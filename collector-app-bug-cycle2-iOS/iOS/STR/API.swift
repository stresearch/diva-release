//  This file was automatically generated and should not be edited.

import AWSAppSync

public struct CreateStrCollectionsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
    graphQLMap = ["id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var trainingVideoUrl: String? {
    get {
      return graphQLMap["training_video_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: String? {
    get {
      return graphQLMap["training_video_json_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: String? {
    get {
      return graphQLMap["training_videos"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: String? {
    get {
      return graphQLMap["training_videos_low"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: String? {
    get {
      return graphQLMap["collection_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectId: String? {
    get {
      return graphQLMap["object_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_id")
    }
  }

  public var objectsList: String? {
    get {
      return graphQLMap["objects_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var activities: String? {
    get {
      return graphQLMap["activities"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var activityShortNames: String? {
    get {
      return graphQLMap["activity_short_names"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: String? {
    get {
      return graphQLMap["default_object"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var active: Bool? {
    get {
      return graphQLMap["active"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }
}

public struct ModelstrCollectionsConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(projectId: ModelStringInput? = nil, trainingVideoUrl: ModelStringInput? = nil, trainingVideoJsonUrl: ModelStringInput? = nil, trainingVideos: ModelStringInput? = nil, trainingVideosLow: ModelStringInput? = nil, collectionDescription: ModelStringInput? = nil, objectId: ModelStringInput? = nil, objectsList: ModelStringInput? = nil, activities: ModelStringInput? = nil, activityShortNames: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, defaultObject: ModelStringInput? = nil, active: ModelBooleanInput? = nil, and: [ModelstrCollectionsConditionInput?]? = nil, or: [ModelstrCollectionsConditionInput?]? = nil, not: ModelstrCollectionsConditionInput? = nil) {
    graphQLMap = ["project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active, "and": and, "or": or, "not": not]
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var trainingVideoUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_json_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: ModelStringInput? {
    get {
      return graphQLMap["training_videos"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: ModelStringInput? {
    get {
      return graphQLMap["training_videos_low"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: ModelStringInput? {
    get {
      return graphQLMap["collection_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectId: ModelStringInput? {
    get {
      return graphQLMap["object_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_id")
    }
  }

  public var objectsList: ModelStringInput? {
    get {
      return graphQLMap["objects_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var activities: ModelStringInput? {
    get {
      return graphQLMap["activities"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var activityShortNames: ModelStringInput? {
    get {
      return graphQLMap["activity_short_names"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: ModelStringInput? {
    get {
      return graphQLMap["default_object"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var active: ModelBooleanInput? {
    get {
      return graphQLMap["active"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }

  public var and: [ModelstrCollectionsConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrCollectionsConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrCollectionsConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrCollectionsConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrCollectionsConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrCollectionsConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public enum ModelAttributeTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case binary
  case binarySet
  case bool
  case list
  case map
  case number
  case numberSet
  case string
  case stringSet
  case null
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "binary": self = .binary
      case "binarySet": self = .binarySet
      case "bool": self = .bool
      case "list": self = .list
      case "map": self = .map
      case "number": self = .number
      case "numberSet": self = .numberSet
      case "string": self = .string
      case "stringSet": self = .stringSet
      case "_null": self = .null
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .binary: return "binary"
      case .binarySet: return "binarySet"
      case .bool: return "bool"
      case .list: return "list"
      case .map: return "map"
      case .number: return "number"
      case .numberSet: return "numberSet"
      case .string: return "string"
      case .stringSet: return "stringSet"
      case .null: return "_null"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelAttributeTypes, rhs: ModelAttributeTypes) -> Bool {
    switch (lhs, rhs) {
      case (.binary, .binary): return true
      case (.binarySet, .binarySet): return true
      case (.bool, .bool): return true
      case (.list, .list): return true
      case (.map, .map): return true
      case (.number, .number): return true
      case (.numberSet, .numberSet): return true
      case (.string, .string): return true
      case (.stringSet, .stringSet): return true
      case (.null, .null): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelSizeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }
}

public struct ModelBooleanInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Bool? = nil, eq: Bool? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Bool? {
    get {
      return graphQLMap["ne"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Bool? {
    get {
      return graphQLMap["eq"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateStrCollectionsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
    graphQLMap = ["id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var trainingVideoUrl: String? {
    get {
      return graphQLMap["training_video_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: String? {
    get {
      return graphQLMap["training_video_json_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: String? {
    get {
      return graphQLMap["training_videos"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: String? {
    get {
      return graphQLMap["training_videos_low"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: String? {
    get {
      return graphQLMap["collection_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectId: String? {
    get {
      return graphQLMap["object_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_id")
    }
  }

  public var objectsList: String? {
    get {
      return graphQLMap["objects_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var activities: String? {
    get {
      return graphQLMap["activities"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var activityShortNames: String? {
    get {
      return graphQLMap["activity_short_names"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: String? {
    get {
      return graphQLMap["default_object"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var active: Bool? {
    get {
      return graphQLMap["active"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }
}

public struct DeleteStrCollectionsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String) {
    graphQLMap = ["id": id, "name": name]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }
}

public struct CreateStrProjectsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
    graphQLMap = ["id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var activityCount: String? {
    get {
      return graphQLMap["activity_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_count")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }
}

public struct ModelstrProjectsConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(activityCount: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, projectId: ModelStringInput? = nil, and: [ModelstrProjectsConditionInput?]? = nil, or: [ModelstrProjectsConditionInput?]? = nil, not: ModelstrProjectsConditionInput? = nil) {
    graphQLMap = ["activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId, "and": and, "or": or, "not": not]
  }

  public var activityCount: ModelStringInput? {
    get {
      return graphQLMap["activity_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_count")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var and: [ModelstrProjectsConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrProjectsConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrProjectsConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrProjectsConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrProjectsConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrProjectsConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrProjectsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
    graphQLMap = ["id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var activityCount: String? {
    get {
      return graphQLMap["activity_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_count")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }
}

public struct DeleteStrProjectsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String) {
    graphQLMap = ["id": id, "name": name]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }
}

public struct CreateStrActivitiesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
    graphQLMap = ["id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var activityId: String? {
    get {
      return graphQLMap["activity_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var counts: String? {
    get {
      return graphQLMap["counts"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "counts")
    }
  }

  public var shortName: String? {
    get {
      return graphQLMap["short_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_name")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }
}

public struct ModelstrActivitiesConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(activityId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, programId: ModelStringInput? = nil, counts: ModelStringInput? = nil, shortName: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, and: [ModelstrActivitiesConditionInput?]? = nil, or: [ModelstrActivitiesConditionInput?]? = nil, not: ModelstrActivitiesConditionInput? = nil) {
    graphQLMap = ["activity_id": activityId, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate, "and": and, "or": or, "not": not]
  }

  public var activityId: ModelStringInput? {
    get {
      return graphQLMap["activity_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var counts: ModelStringInput? {
    get {
      return graphQLMap["counts"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "counts")
    }
  }

  public var shortName: ModelStringInput? {
    get {
      return graphQLMap["short_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_name")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var and: [ModelstrActivitiesConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrActivitiesConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrActivitiesConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrActivitiesConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrActivitiesConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrActivitiesConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrActivitiesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
    graphQLMap = ["id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var activityId: String? {
    get {
      return graphQLMap["activity_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var counts: String? {
    get {
      return graphQLMap["counts"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "counts")
    }
  }

  public var shortName: String? {
    get {
      return graphQLMap["short_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_name")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }
}

public struct DeleteStrActivitiesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String) {
    graphQLMap = ["id": id, "name": name]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }
}

public struct CreateStrProgramInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
    graphQLMap = ["id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var client: String? {
    get {
      return graphQLMap["client"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "client")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }
}

public struct ModelstrProgramConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(programId: ModelStringInput? = nil, client: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, and: [ModelstrProgramConditionInput?]? = nil, or: [ModelstrProgramConditionInput?]? = nil, not: ModelstrProgramConditionInput? = nil) {
    graphQLMap = ["program_id": programId, "client": client, "created_date": createdDate, "and": and, "or": or, "not": not]
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var client: ModelStringInput? {
    get {
      return graphQLMap["client"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "client")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var and: [ModelstrProgramConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrProgramConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrProgramConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrProgramConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrProgramConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrProgramConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrProgramInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
    graphQLMap = ["id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var client: String? {
    get {
      return graphQLMap["client"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "client")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }
}

public struct DeleteStrProgramInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, name: String) {
    graphQLMap = ["id": id, "name": name]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }
}

public struct CreateStrCollectorInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: String {
    get {
      return graphQLMap["collector_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var firstName: String {
    get {
      return graphQLMap["first_name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: String {
    get {
      return graphQLMap["last_name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var password: String? {
    get {
      return graphQLMap["password"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var queryAttribute: String {
    get {
      return graphQLMap["query_attribute"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var isConsented: Bool? {
    get {
      return graphQLMap["is_consented"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_consented")
    }
  }

  public var isDropboxIntegrated: Bool? {
    get {
      return graphQLMap["is_dropbox_integrated"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_dropbox_integrated")
    }
  }

  public var isPaypalIntegrated: Bool? {
    get {
      return graphQLMap["is_paypal_integrated"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_paypal_integrated")
    }
  }

  public var dropboxToken: String? {
    get {
      return graphQLMap["dropbox_token"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dropbox_token")
    }
  }

  public var paypalEmailId: String? {
    get {
      return graphQLMap["paypal_email_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "paypal_email_id")
    }
  }

  public var uploadedCount: String? {
    get {
      return graphQLMap["uploaded_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: String? {
    get {
      return graphQLMap["verified_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var notVerifiedCount: String? {
    get {
      return graphQLMap["not_verified_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not_verified_count")
    }
  }

  public var consentedCount: String? {
    get {
      return graphQLMap["consented_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consented_count")
    }
  }

  public var authorized: String? {
    get {
      return graphQLMap["authorized"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "authorized")
    }
  }

  public var outstandingAmount: String? {
    get {
      return graphQLMap["outstanding_amount"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "outstanding_amount")
    }
  }

  public var collectorScore: String? {
    get {
      return graphQLMap["collector_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_score")
    }
  }

  public var reviewerScore: String? {
    get {
      return graphQLMap["reviewer_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_score")
    }
  }
}

public struct ModelstrCollectorConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, password: ModelStringInput? = nil, queryAttribute: ModelStringInput? = nil, isConsented: ModelBooleanInput? = nil, isDropboxIntegrated: ModelBooleanInput? = nil, isPaypalIntegrated: ModelBooleanInput? = nil, dropboxToken: ModelStringInput? = nil, paypalEmailId: ModelStringInput? = nil, uploadedCount: ModelStringInput? = nil, verifiedCount: ModelStringInput? = nil, notVerifiedCount: ModelStringInput? = nil, consentedCount: ModelStringInput? = nil, authorized: ModelStringInput? = nil, outstandingAmount: ModelStringInput? = nil, collectorScore: ModelStringInput? = nil, reviewerScore: ModelStringInput? = nil, and: [ModelstrCollectorConditionInput?]? = nil, or: [ModelstrCollectorConditionInput?]? = nil, not: ModelstrCollectorConditionInput? = nil) {
    graphQLMap = ["first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore, "and": and, "or": or, "not": not]
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["first_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["last_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var password: ModelStringInput? {
    get {
      return graphQLMap["password"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var queryAttribute: ModelStringInput? {
    get {
      return graphQLMap["query_attribute"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var isConsented: ModelBooleanInput? {
    get {
      return graphQLMap["is_consented"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_consented")
    }
  }

  public var isDropboxIntegrated: ModelBooleanInput? {
    get {
      return graphQLMap["is_dropbox_integrated"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_dropbox_integrated")
    }
  }

  public var isPaypalIntegrated: ModelBooleanInput? {
    get {
      return graphQLMap["is_paypal_integrated"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_paypal_integrated")
    }
  }

  public var dropboxToken: ModelStringInput? {
    get {
      return graphQLMap["dropbox_token"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dropbox_token")
    }
  }

  public var paypalEmailId: ModelStringInput? {
    get {
      return graphQLMap["paypal_email_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "paypal_email_id")
    }
  }

  public var uploadedCount: ModelStringInput? {
    get {
      return graphQLMap["uploaded_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: ModelStringInput? {
    get {
      return graphQLMap["verified_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var notVerifiedCount: ModelStringInput? {
    get {
      return graphQLMap["not_verified_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not_verified_count")
    }
  }

  public var consentedCount: ModelStringInput? {
    get {
      return graphQLMap["consented_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consented_count")
    }
  }

  public var authorized: ModelStringInput? {
    get {
      return graphQLMap["authorized"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "authorized")
    }
  }

  public var outstandingAmount: ModelStringInput? {
    get {
      return graphQLMap["outstanding_amount"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "outstanding_amount")
    }
  }

  public var collectorScore: ModelStringInput? {
    get {
      return graphQLMap["collector_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_score")
    }
  }

  public var reviewerScore: ModelStringInput? {
    get {
      return graphQLMap["reviewer_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_score")
    }
  }

  public var and: [ModelstrCollectorConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrCollectorConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrCollectorConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrCollectorConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrCollectorConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrCollectorConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrCollectorInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, collectorEmail: String, firstName: String? = nil, lastName: String? = nil, password: String? = nil, queryAttribute: String? = nil, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: String {
    get {
      return graphQLMap["collector_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["first_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["last_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var password: String? {
    get {
      return graphQLMap["password"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var queryAttribute: String? {
    get {
      return graphQLMap["query_attribute"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var isConsented: Bool? {
    get {
      return graphQLMap["is_consented"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_consented")
    }
  }

  public var isDropboxIntegrated: Bool? {
    get {
      return graphQLMap["is_dropbox_integrated"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_dropbox_integrated")
    }
  }

  public var isPaypalIntegrated: Bool? {
    get {
      return graphQLMap["is_paypal_integrated"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_paypal_integrated")
    }
  }

  public var dropboxToken: String? {
    get {
      return graphQLMap["dropbox_token"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dropbox_token")
    }
  }

  public var paypalEmailId: String? {
    get {
      return graphQLMap["paypal_email_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "paypal_email_id")
    }
  }

  public var uploadedCount: String? {
    get {
      return graphQLMap["uploaded_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: String? {
    get {
      return graphQLMap["verified_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var notVerifiedCount: String? {
    get {
      return graphQLMap["not_verified_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not_verified_count")
    }
  }

  public var consentedCount: String? {
    get {
      return graphQLMap["consented_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consented_count")
    }
  }

  public var authorized: String? {
    get {
      return graphQLMap["authorized"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "authorized")
    }
  }

  public var outstandingAmount: String? {
    get {
      return graphQLMap["outstanding_amount"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "outstanding_amount")
    }
  }

  public var collectorScore: String? {
    get {
      return graphQLMap["collector_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_score")
    }
  }

  public var reviewerScore: String? {
    get {
      return graphQLMap["reviewer_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_score")
    }
  }
}

public struct DeleteStrCollectorInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, collectorEmail: String) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: String {
    get {
      return graphQLMap["collector_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }
}

public struct CreateStrCollectionsAssignmentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: String? {
    get {
      return graphQLMap["collector_email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var trainingVideoUrl: String? {
    get {
      return graphQLMap["training_video_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: String? {
    get {
      return graphQLMap["training_video_json_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: String? {
    get {
      return graphQLMap["training_videos"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: String? {
    get {
      return graphQLMap["training_videos_low"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: String? {
    get {
      return graphQLMap["collection_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectsList: String? {
    get {
      return graphQLMap["objects_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var collectionId: String {
    get {
      return graphQLMap["collection_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: String? {
    get {
      return graphQLMap["default_object"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var activities: String? {
    get {
      return graphQLMap["activities"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var trainingVideosOverlay: String? {
    get {
      return graphQLMap["training_videos_overlay"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_overlay")
    }
  }

  public var activityShortNames: String? {
    get {
      return graphQLMap["activity_short_names"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var active: Bool? {
    get {
      return graphQLMap["active"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }

  public var isTrainingVideoEnabled: Bool? {
    get {
      return graphQLMap["isTrainingVideoEnabled"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isTrainingVideoEnabled")
    }
  }

  public var isConsentRequired: Bool? {
    get {
      return graphQLMap["isConsentRequired"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isConsentRequired")
    }
  }

  public var consentOverlayText: String? {
    get {
      return graphQLMap["consent_overlay_text"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_overlay_text")
    }
  }
}

public struct ModelstrCollectionsAssignmentConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorEmail: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, projectId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, programId: ModelStringInput? = nil, programName: ModelStringInput? = nil, trainingVideoUrl: ModelStringInput? = nil, trainingVideoJsonUrl: ModelStringInput? = nil, trainingVideos: ModelStringInput? = nil, trainingVideosLow: ModelStringInput? = nil, collectionDescription: ModelStringInput? = nil, objectsList: ModelStringInput? = nil, defaultObject: ModelStringInput? = nil, activities: ModelStringInput? = nil, trainingVideosOverlay: ModelStringInput? = nil, activityShortNames: ModelStringInput? = nil, active: ModelBooleanInput? = nil, isTrainingVideoEnabled: ModelBooleanInput? = nil, isConsentRequired: ModelBooleanInput? = nil, consentOverlayText: ModelStringInput? = nil, and: [ModelstrCollectionsAssignmentConditionInput?]? = nil, or: [ModelstrCollectionsAssignmentConditionInput?]? = nil, not: ModelstrCollectionsAssignmentConditionInput? = nil) {
    graphQLMap = ["collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText, "and": and, "or": or, "not": not]
  }

  public var collectorEmail: ModelStringInput? {
    get {
      return graphQLMap["collector_email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var trainingVideoUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_json_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: ModelStringInput? {
    get {
      return graphQLMap["training_videos"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: ModelStringInput? {
    get {
      return graphQLMap["training_videos_low"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: ModelStringInput? {
    get {
      return graphQLMap["collection_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectsList: ModelStringInput? {
    get {
      return graphQLMap["objects_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var defaultObject: ModelStringInput? {
    get {
      return graphQLMap["default_object"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var activities: ModelStringInput? {
    get {
      return graphQLMap["activities"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var trainingVideosOverlay: ModelStringInput? {
    get {
      return graphQLMap["training_videos_overlay"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_overlay")
    }
  }

  public var activityShortNames: ModelStringInput? {
    get {
      return graphQLMap["activity_short_names"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var active: ModelBooleanInput? {
    get {
      return graphQLMap["active"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }

  public var isTrainingVideoEnabled: ModelBooleanInput? {
    get {
      return graphQLMap["isTrainingVideoEnabled"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isTrainingVideoEnabled")
    }
  }

  public var isConsentRequired: ModelBooleanInput? {
    get {
      return graphQLMap["isConsentRequired"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isConsentRequired")
    }
  }

  public var consentOverlayText: ModelStringInput? {
    get {
      return graphQLMap["consent_overlay_text"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_overlay_text")
    }
  }

  public var and: [ModelstrCollectionsAssignmentConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrCollectionsAssignmentConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrCollectionsAssignmentConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrCollectionsAssignmentConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrCollectionsAssignmentConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrCollectionsAssignmentConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrCollectionsAssignmentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: String? {
    get {
      return graphQLMap["collector_email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var trainingVideoUrl: String? {
    get {
      return graphQLMap["training_video_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: String? {
    get {
      return graphQLMap["training_video_json_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: String? {
    get {
      return graphQLMap["training_videos"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: String? {
    get {
      return graphQLMap["training_videos_low"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: String? {
    get {
      return graphQLMap["collection_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectsList: String? {
    get {
      return graphQLMap["objects_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var collectionId: String {
    get {
      return graphQLMap["collection_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: String? {
    get {
      return graphQLMap["default_object"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var activities: String? {
    get {
      return graphQLMap["activities"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var trainingVideosOverlay: String? {
    get {
      return graphQLMap["training_videos_overlay"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_overlay")
    }
  }

  public var activityShortNames: String? {
    get {
      return graphQLMap["activity_short_names"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var active: Bool? {
    get {
      return graphQLMap["active"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }

  public var isTrainingVideoEnabled: Bool? {
    get {
      return graphQLMap["isTrainingVideoEnabled"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isTrainingVideoEnabled")
    }
  }

  public var isConsentRequired: Bool? {
    get {
      return graphQLMap["isConsentRequired"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isConsentRequired")
    }
  }

  public var consentOverlayText: String? {
    get {
      return graphQLMap["consent_overlay_text"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_overlay_text")
    }
  }
}

public struct DeleteStrCollectionsAssignmentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, collectionId: String) {
    graphQLMap = ["collector_id": collectorId, "collection_id": collectionId]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectionId: String {
    get {
      return graphQLMap["collection_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }
}

public struct CreateStrVideosInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
    graphQLMap = ["id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var rawVideoFilePath: String {
    get {
      return graphQLMap["raw_video_file_path"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "raw_video_file_path")
    }
  }

  public var annotationFilePath: String? {
    get {
      return graphQLMap["annotation_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var videoId: String {
    get {
      return graphQLMap["video_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectorId: String {
    get {
      return graphQLMap["collector_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var activitiesList: String? {
    get {
      return graphQLMap["activities_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities_list")
    }
  }

  public var objectLabelList: String? {
    get {
      return graphQLMap["object_label_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_label_list")
    }
  }

  public var thumbsUp: Int? {
    get {
      return graphQLMap["thumbs_up"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_up")
    }
  }

  public var thumbsDown: Int? {
    get {
      return graphQLMap["thumbs_down"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_down")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectedDate: String? {
    get {
      return graphQLMap["collected_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collected_date")
    }
  }

  public var latitude: String? {
    get {
      return graphQLMap["latitude"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "latitude")
    }
  }

  public var longitude: String? {
    get {
      return graphQLMap["longitude"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "longitude")
    }
  }

  public var processedVideoFilePath: String? {
    get {
      return graphQLMap["processed_video_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "processed_video_file_path")
    }
  }

  public var rating: String? {
    get {
      return graphQLMap["rating"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating")
    }
  }

  public var subjectId: String? {
    get {
      return graphQLMap["subject_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var verified: Bool? {
    get {
      return graphQLMap["verified"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoSharingLink: String? {
    get {
      return graphQLMap["video_sharing_link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_sharing_link")
    }
  }

  public var jsonSharingLink: String? {
    get {
      return graphQLMap["json_sharing_link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "json_sharing_link")
    }
  }

  public var ratingScore: String? {
    get {
      return graphQLMap["rating_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var status: String? {
    get {
      return graphQLMap["status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var statusReason: String? {
    get {
      return graphQLMap["status_reason"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status_reason")
    }
  }

  public var thumbnail: String? {
    get {
      return graphQLMap["thumbnail"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: String? {
    get {
      return graphQLMap["thumbnail_small"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var duration: String? {
    get {
      return graphQLMap["duration"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var displayDuration: String? {
    get {
      return graphQLMap["display_duration"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "display_duration")
    }
  }

  public var uploadedDate: String {
    get {
      return graphQLMap["uploaded_date"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var queryAttribute: String {
    get {
      return graphQLMap["query_attribute"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var videoState: String? {
    get {
      return graphQLMap["video_state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_state")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }
}

public struct ModelstrVideosConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(rawVideoFilePath: ModelStringInput? = nil, annotationFilePath: ModelStringInput? = nil, videoId: ModelStringInput? = nil, collectorId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, activitiesList: ModelStringInput? = nil, objectLabelList: ModelStringInput? = nil, thumbsUp: ModelIntInput? = nil, thumbsDown: ModelIntInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, collectedDate: ModelStringInput? = nil, latitude: ModelStringInput? = nil, longitude: ModelStringInput? = nil, processedVideoFilePath: ModelStringInput? = nil, rating: ModelStringInput? = nil, subjectId: ModelStringInput? = nil, verified: ModelBooleanInput? = nil, videoSharingLink: ModelStringInput? = nil, jsonSharingLink: ModelStringInput? = nil, ratingScore: ModelStringInput? = nil, status: ModelStringInput? = nil, statusReason: ModelStringInput? = nil, thumbnail: ModelStringInput? = nil, thumbnailSmall: ModelStringInput? = nil, duration: ModelStringInput? = nil, displayDuration: ModelStringInput? = nil, queryAttribute: ModelStringInput? = nil, videoState: ModelStringInput? = nil, week: ModelStringInput? = nil, and: [ModelstrVideosConditionInput?]? = nil, or: [ModelstrVideosConditionInput?]? = nil, not: ModelstrVideosConditionInput? = nil) {
    graphQLMap = ["raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "query_attribute": queryAttribute, "video_state": videoState, "week": week, "and": and, "or": or, "not": not]
  }

  public var rawVideoFilePath: ModelStringInput? {
    get {
      return graphQLMap["raw_video_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "raw_video_file_path")
    }
  }

  public var annotationFilePath: ModelStringInput? {
    get {
      return graphQLMap["annotation_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectorId: ModelStringInput? {
    get {
      return graphQLMap["collector_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var activitiesList: ModelStringInput? {
    get {
      return graphQLMap["activities_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities_list")
    }
  }

  public var objectLabelList: ModelStringInput? {
    get {
      return graphQLMap["object_label_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_label_list")
    }
  }

  public var thumbsUp: ModelIntInput? {
    get {
      return graphQLMap["thumbs_up"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_up")
    }
  }

  public var thumbsDown: ModelIntInput? {
    get {
      return graphQLMap["thumbs_down"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_down")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectedDate: ModelStringInput? {
    get {
      return graphQLMap["collected_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collected_date")
    }
  }

  public var latitude: ModelStringInput? {
    get {
      return graphQLMap["latitude"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "latitude")
    }
  }

  public var longitude: ModelStringInput? {
    get {
      return graphQLMap["longitude"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "longitude")
    }
  }

  public var processedVideoFilePath: ModelStringInput? {
    get {
      return graphQLMap["processed_video_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "processed_video_file_path")
    }
  }

  public var rating: ModelStringInput? {
    get {
      return graphQLMap["rating"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating")
    }
  }

  public var subjectId: ModelStringInput? {
    get {
      return graphQLMap["subject_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var verified: ModelBooleanInput? {
    get {
      return graphQLMap["verified"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoSharingLink: ModelStringInput? {
    get {
      return graphQLMap["video_sharing_link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_sharing_link")
    }
  }

  public var jsonSharingLink: ModelStringInput? {
    get {
      return graphQLMap["json_sharing_link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "json_sharing_link")
    }
  }

  public var ratingScore: ModelStringInput? {
    get {
      return graphQLMap["rating_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var status: ModelStringInput? {
    get {
      return graphQLMap["status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var statusReason: ModelStringInput? {
    get {
      return graphQLMap["status_reason"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status_reason")
    }
  }

  public var thumbnail: ModelStringInput? {
    get {
      return graphQLMap["thumbnail"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: ModelStringInput? {
    get {
      return graphQLMap["thumbnail_small"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var duration: ModelStringInput? {
    get {
      return graphQLMap["duration"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var displayDuration: ModelStringInput? {
    get {
      return graphQLMap["display_duration"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "display_duration")
    }
  }

  public var queryAttribute: ModelStringInput? {
    get {
      return graphQLMap["query_attribute"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var videoState: ModelStringInput? {
    get {
      return graphQLMap["video_state"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_state")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var and: [ModelstrVideosConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrVideosConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrVideosConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrVideosConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrVideosConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrVideosConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateStrVideosInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, rawVideoFilePath: String? = nil, annotationFilePath: String? = nil, videoId: String? = nil, collectorId: String? = nil, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String? = nil, videoState: String? = nil, week: String? = nil) {
    graphQLMap = ["id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var rawVideoFilePath: String? {
    get {
      return graphQLMap["raw_video_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "raw_video_file_path")
    }
  }

  public var annotationFilePath: String? {
    get {
      return graphQLMap["annotation_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var videoId: String? {
    get {
      return graphQLMap["video_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectorId: String? {
    get {
      return graphQLMap["collector_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var activitiesList: String? {
    get {
      return graphQLMap["activities_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities_list")
    }
  }

  public var objectLabelList: String? {
    get {
      return graphQLMap["object_label_list"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_label_list")
    }
  }

  public var thumbsUp: Int? {
    get {
      return graphQLMap["thumbs_up"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_up")
    }
  }

  public var thumbsDown: Int? {
    get {
      return graphQLMap["thumbs_down"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_down")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectedDate: String? {
    get {
      return graphQLMap["collected_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collected_date")
    }
  }

  public var latitude: String? {
    get {
      return graphQLMap["latitude"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "latitude")
    }
  }

  public var longitude: String? {
    get {
      return graphQLMap["longitude"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "longitude")
    }
  }

  public var processedVideoFilePath: String? {
    get {
      return graphQLMap["processed_video_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "processed_video_file_path")
    }
  }

  public var rating: String? {
    get {
      return graphQLMap["rating"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating")
    }
  }

  public var subjectId: String? {
    get {
      return graphQLMap["subject_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var verified: Bool? {
    get {
      return graphQLMap["verified"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoSharingLink: String? {
    get {
      return graphQLMap["video_sharing_link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_sharing_link")
    }
  }

  public var jsonSharingLink: String? {
    get {
      return graphQLMap["json_sharing_link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "json_sharing_link")
    }
  }

  public var ratingScore: String? {
    get {
      return graphQLMap["rating_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var status: String? {
    get {
      return graphQLMap["status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var statusReason: String? {
    get {
      return graphQLMap["status_reason"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status_reason")
    }
  }

  public var thumbnail: String? {
    get {
      return graphQLMap["thumbnail"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: String? {
    get {
      return graphQLMap["thumbnail_small"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var duration: String? {
    get {
      return graphQLMap["duration"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var displayDuration: String? {
    get {
      return graphQLMap["display_duration"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "display_duration")
    }
  }

  public var uploadedDate: String {
    get {
      return graphQLMap["uploaded_date"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var queryAttribute: String? {
    get {
      return graphQLMap["query_attribute"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var videoState: String? {
    get {
      return graphQLMap["video_state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_state")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }
}

public struct DeleteStrVideosInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, uploadedDate: String) {
    graphQLMap = ["id": id, "uploaded_date": uploadedDate]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var uploadedDate: String {
    get {
      return graphQLMap["uploaded_date"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }
}

public struct CreateStrInstancesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
    graphQLMap = ["id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var instanceId: String {
    get {
      return graphQLMap["instance_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_id")
    }
  }

  public var activityName: String {
    get {
      return graphQLMap["activity_name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_name")
    }
  }

  public var avgBboxHeight: String? {
    get {
      return graphQLMap["avg_bbox_height"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_height")
    }
  }

  public var avgBboxSize: String? {
    get {
      return graphQLMap["avg_bbox_size"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_size")
    }
  }

  public var avgBboxWidth: String? {
    get {
      return graphQLMap["avg_bbox_width"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_width")
    }
  }

  public var badAlignamentScore: String? {
    get {
      return graphQLMap["bad_alignament_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignament_score")
    }
  }

  public var badBoxBigScore: String? {
    get {
      return graphQLMap["bad_box_big_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big_score")
    }
  }

  public var badBoxScore: String? {
    get {
      return graphQLMap["bad_box_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_score")
    }
  }

  public var badBoxSmallScore: String? {
    get {
      return graphQLMap["bad_box_small_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small_score")
    }
  }

  public var badLabelScore: String? {
    get {
      return graphQLMap["bad_label_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label_score")
    }
  }

  public var badTimingScore: String? {
    get {
      return graphQLMap["bad_timing_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing_score")
    }
  }

  public var badVideoScore: String? {
    get {
      return graphQLMap["bad_video_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video_score")
    }
  }

  public var badViewpointScore: String? {
    get {
      return graphQLMap["bad_viewpoint_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint_score")
    }
  }

  public var collectorId: String? {
    get {
      return graphQLMap["collector_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var endFrame: String? {
    get {
      return graphQLMap["end_frame"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "end_frame")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var ratingScore: String? {
    get {
      return graphQLMap["rating_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var reviewReason: String? {
    get {
      return graphQLMap["review_reason"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_reason")
    }
  }

  public var s3Path: String? {
    get {
      return graphQLMap["s3_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3_path")
    }
  }

  public var startFrame: String? {
    get {
      return graphQLMap["start_frame"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "start_frame")
    }
  }

  public var subjectId: String? {
    get {
      return graphQLMap["subject_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var uploadedDate: String? {
    get {
      return graphQLMap["uploaded_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var verified: Bool? {
    get {
      return graphQLMap["verified"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoId: String {
    get {
      return graphQLMap["video_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var needReviewScore: String? {
    get {
      return graphQLMap["need_review_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "need_review_score")
    }
  }
}

public struct ModelstrInstancesConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(activityName: ModelStringInput? = nil, avgBboxHeight: ModelStringInput? = nil, avgBboxSize: ModelStringInput? = nil, avgBboxWidth: ModelStringInput? = nil, badAlignamentScore: ModelStringInput? = nil, badBoxBigScore: ModelStringInput? = nil, badBoxScore: ModelStringInput? = nil, badBoxSmallScore: ModelStringInput? = nil, badLabelScore: ModelStringInput? = nil, badTimingScore: ModelStringInput? = nil, badVideoScore: ModelStringInput? = nil, badViewpointScore: ModelStringInput? = nil, collectorId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, endFrame: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, ratingScore: ModelStringInput? = nil, reviewReason: ModelStringInput? = nil, s3Path: ModelStringInput? = nil, startFrame: ModelStringInput? = nil, subjectId: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, uploadedDate: ModelStringInput? = nil, verified: ModelBooleanInput? = nil, videoId: ModelStringInput? = nil, week: ModelStringInput? = nil, needReviewScore: ModelStringInput? = nil, and: [ModelstrInstancesConditionInput?]? = nil, or: [ModelstrInstancesConditionInput?]? = nil, not: ModelstrInstancesConditionInput? = nil) {
    graphQLMap = ["activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore, "and": and, "or": or, "not": not]
  }

  public var activityName: ModelStringInput? {
    get {
      return graphQLMap["activity_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_name")
    }
  }

  public var avgBboxHeight: ModelStringInput? {
    get {
      return graphQLMap["avg_bbox_height"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_height")
    }
  }

  public var avgBboxSize: ModelStringInput? {
    get {
      return graphQLMap["avg_bbox_size"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_size")
    }
  }

  public var avgBboxWidth: ModelStringInput? {
    get {
      return graphQLMap["avg_bbox_width"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_width")
    }
  }

  public var badAlignamentScore: ModelStringInput? {
    get {
      return graphQLMap["bad_alignament_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignament_score")
    }
  }

  public var badBoxBigScore: ModelStringInput? {
    get {
      return graphQLMap["bad_box_big_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big_score")
    }
  }

  public var badBoxScore: ModelStringInput? {
    get {
      return graphQLMap["bad_box_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_score")
    }
  }

  public var badBoxSmallScore: ModelStringInput? {
    get {
      return graphQLMap["bad_box_small_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small_score")
    }
  }

  public var badLabelScore: ModelStringInput? {
    get {
      return graphQLMap["bad_label_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label_score")
    }
  }

  public var badTimingScore: ModelStringInput? {
    get {
      return graphQLMap["bad_timing_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing_score")
    }
  }

  public var badVideoScore: ModelStringInput? {
    get {
      return graphQLMap["bad_video_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video_score")
    }
  }

  public var badViewpointScore: ModelStringInput? {
    get {
      return graphQLMap["bad_viewpoint_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint_score")
    }
  }

  public var collectorId: ModelStringInput? {
    get {
      return graphQLMap["collector_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var endFrame: ModelStringInput? {
    get {
      return graphQLMap["end_frame"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "end_frame")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var ratingScore: ModelStringInput? {
    get {
      return graphQLMap["rating_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var reviewReason: ModelStringInput? {
    get {
      return graphQLMap["review_reason"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_reason")
    }
  }

  public var s3Path: ModelStringInput? {
    get {
      return graphQLMap["s3_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3_path")
    }
  }

  public var startFrame: ModelStringInput? {
    get {
      return graphQLMap["start_frame"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "start_frame")
    }
  }

  public var subjectId: ModelStringInput? {
    get {
      return graphQLMap["subject_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var uploadedDate: ModelStringInput? {
    get {
      return graphQLMap["uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var verified: ModelBooleanInput? {
    get {
      return graphQLMap["verified"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var needReviewScore: ModelStringInput? {
    get {
      return graphQLMap["need_review_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "need_review_score")
    }
  }

  public var and: [ModelstrInstancesConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrInstancesConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrInstancesConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrInstancesConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrInstancesConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrInstancesConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrInstancesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, instanceId: String, activityName: String? = nil, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String? = nil, week: String? = nil, needReviewScore: String? = nil) {
    graphQLMap = ["id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var instanceId: String {
    get {
      return graphQLMap["instance_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_id")
    }
  }

  public var activityName: String? {
    get {
      return graphQLMap["activity_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_name")
    }
  }

  public var avgBboxHeight: String? {
    get {
      return graphQLMap["avg_bbox_height"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_height")
    }
  }

  public var avgBboxSize: String? {
    get {
      return graphQLMap["avg_bbox_size"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_size")
    }
  }

  public var avgBboxWidth: String? {
    get {
      return graphQLMap["avg_bbox_width"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_width")
    }
  }

  public var badAlignamentScore: String? {
    get {
      return graphQLMap["bad_alignament_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignament_score")
    }
  }

  public var badBoxBigScore: String? {
    get {
      return graphQLMap["bad_box_big_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big_score")
    }
  }

  public var badBoxScore: String? {
    get {
      return graphQLMap["bad_box_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_score")
    }
  }

  public var badBoxSmallScore: String? {
    get {
      return graphQLMap["bad_box_small_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small_score")
    }
  }

  public var badLabelScore: String? {
    get {
      return graphQLMap["bad_label_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label_score")
    }
  }

  public var badTimingScore: String? {
    get {
      return graphQLMap["bad_timing_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing_score")
    }
  }

  public var badVideoScore: String? {
    get {
      return graphQLMap["bad_video_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video_score")
    }
  }

  public var badViewpointScore: String? {
    get {
      return graphQLMap["bad_viewpoint_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint_score")
    }
  }

  public var collectorId: String? {
    get {
      return graphQLMap["collector_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var endFrame: String? {
    get {
      return graphQLMap["end_frame"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "end_frame")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var ratingScore: String? {
    get {
      return graphQLMap["rating_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var reviewReason: String? {
    get {
      return graphQLMap["review_reason"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_reason")
    }
  }

  public var s3Path: String? {
    get {
      return graphQLMap["s3_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3_path")
    }
  }

  public var startFrame: String? {
    get {
      return graphQLMap["start_frame"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "start_frame")
    }
  }

  public var subjectId: String? {
    get {
      return graphQLMap["subject_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var uploadedDate: String? {
    get {
      return graphQLMap["uploaded_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var verified: Bool? {
    get {
      return graphQLMap["verified"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoId: String? {
    get {
      return graphQLMap["video_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var needReviewScore: String? {
    get {
      return graphQLMap["need_review_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "need_review_score")
    }
  }
}

public struct DeleteStrInstancesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, instanceId: String) {
    graphQLMap = ["id": id, "instance_id": instanceId]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var instanceId: String {
    get {
      return graphQLMap["instance_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_id")
    }
  }
}

public struct CreateStrSubjectInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var uuid: String? {
    get {
      return graphQLMap["uuid"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uuid")
    }
  }

  public var subjectEmail: String {
    get {
      return graphQLMap["subject_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_email")
    }
  }

  public var collectorEmail: String {
    get {
      return graphQLMap["collector_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var lastActivityDate: String? {
    get {
      return graphQLMap["last_activity_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_activity_date")
    }
  }

  public var consentResponse: String? {
    get {
      return graphQLMap["consent_response"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_response")
    }
  }

  public var consentVideoId: String? {
    get {
      return graphQLMap["consent_video_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_video_id")
    }
  }

  public var beard: String? {
    get {
      return graphQLMap["beard"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beard")
    }
  }

  public var ethnicity: String? {
    get {
      return graphQLMap["ethnicity"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ethnicity")
    }
  }

  public var eyeGlasses: String? {
    get {
      return graphQLMap["eye_glasses"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eye_glasses")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["first_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["last_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var gender: String? {
    get {
      return graphQLMap["gender"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var hairColor: String? {
    get {
      return graphQLMap["hair_color"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_color")
    }
  }

  public var hairLength: String? {
    get {
      return graphQLMap["hair_length"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_length")
    }
  }

  public var uploadedCount: String? {
    get {
      return graphQLMap["uploaded_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: String? {
    get {
      return graphQLMap["verified_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var status: String {
    get {
      return graphQLMap["status"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var count: String? {
    get {
      return graphQLMap["count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "count")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }
}

public struct ModelstrSubjectConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: ModelIDInput? = nil, uuid: ModelStringInput? = nil, lastActivityDate: ModelStringInput? = nil, consentResponse: ModelStringInput? = nil, consentVideoId: ModelStringInput? = nil, beard: ModelStringInput? = nil, ethnicity: ModelStringInput? = nil, eyeGlasses: ModelStringInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, gender: ModelStringInput? = nil, hairColor: ModelStringInput? = nil, hairLength: ModelStringInput? = nil, uploadedCount: ModelStringInput? = nil, verifiedCount: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, status: ModelStringInput? = nil, count: ModelStringInput? = nil, programId: ModelStringInput? = nil, programName: ModelStringInput? = nil, projectId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, and: [ModelstrSubjectConditionInput?]? = nil, or: [ModelstrSubjectConditionInput?]? = nil, not: ModelstrSubjectConditionInput? = nil) {
    graphQLMap = ["collector_id": collectorId, "uuid": uuid, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName, "and": and, "or": or, "not": not]
  }

  public var collectorId: ModelIDInput? {
    get {
      return graphQLMap["collector_id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var uuid: ModelStringInput? {
    get {
      return graphQLMap["uuid"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uuid")
    }
  }

  public var lastActivityDate: ModelStringInput? {
    get {
      return graphQLMap["last_activity_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_activity_date")
    }
  }

  public var consentResponse: ModelStringInput? {
    get {
      return graphQLMap["consent_response"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_response")
    }
  }

  public var consentVideoId: ModelStringInput? {
    get {
      return graphQLMap["consent_video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_video_id")
    }
  }

  public var beard: ModelStringInput? {
    get {
      return graphQLMap["beard"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beard")
    }
  }

  public var ethnicity: ModelStringInput? {
    get {
      return graphQLMap["ethnicity"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ethnicity")
    }
  }

  public var eyeGlasses: ModelStringInput? {
    get {
      return graphQLMap["eye_glasses"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eye_glasses")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["first_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["last_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var gender: ModelStringInput? {
    get {
      return graphQLMap["gender"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var hairColor: ModelStringInput? {
    get {
      return graphQLMap["hair_color"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_color")
    }
  }

  public var hairLength: ModelStringInput? {
    get {
      return graphQLMap["hair_length"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_length")
    }
  }

  public var uploadedCount: ModelStringInput? {
    get {
      return graphQLMap["uploaded_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: ModelStringInput? {
    get {
      return graphQLMap["verified_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var status: ModelStringInput? {
    get {
      return graphQLMap["status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var count: ModelStringInput? {
    get {
      return graphQLMap["count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "count")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var and: [ModelstrSubjectConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrSubjectConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrSubjectConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrSubjectConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrSubjectConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrSubjectConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public struct UpdateStrSubjectInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID? = nil, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String? = nil, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName]
  }

  public var collectorId: GraphQLID? {
    get {
      return graphQLMap["collector_id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var uuid: String? {
    get {
      return graphQLMap["uuid"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uuid")
    }
  }

  public var subjectEmail: String {
    get {
      return graphQLMap["subject_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_email")
    }
  }

  public var collectorEmail: String {
    get {
      return graphQLMap["collector_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var lastActivityDate: String? {
    get {
      return graphQLMap["last_activity_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_activity_date")
    }
  }

  public var consentResponse: String? {
    get {
      return graphQLMap["consent_response"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_response")
    }
  }

  public var consentVideoId: String? {
    get {
      return graphQLMap["consent_video_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_video_id")
    }
  }

  public var beard: String? {
    get {
      return graphQLMap["beard"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beard")
    }
  }

  public var ethnicity: String? {
    get {
      return graphQLMap["ethnicity"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ethnicity")
    }
  }

  public var eyeGlasses: String? {
    get {
      return graphQLMap["eye_glasses"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eye_glasses")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["first_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["last_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var gender: String? {
    get {
      return graphQLMap["gender"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var hairColor: String? {
    get {
      return graphQLMap["hair_color"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_color")
    }
  }

  public var hairLength: String? {
    get {
      return graphQLMap["hair_length"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_length")
    }
  }

  public var uploadedCount: String? {
    get {
      return graphQLMap["uploaded_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: String? {
    get {
      return graphQLMap["verified_count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var status: String? {
    get {
      return graphQLMap["status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var count: String? {
    get {
      return graphQLMap["count"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "count")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }
}

public struct DeleteStrSubjectInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorEmail: String, subjectEmail: String) {
    graphQLMap = ["collector_email": collectorEmail, "subject_email": subjectEmail]
  }

  public var collectorEmail: String {
    get {
      return graphQLMap["collector_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var subjectEmail: String {
    get {
      return graphQLMap["subject_email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_email")
    }
  }
}

public struct CreateStrRatingInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
    graphQLMap = ["id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reviewerId: String {
    get {
      return graphQLMap["reviewer_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_id")
    }
  }

  public var up: Int? {
    get {
      return graphQLMap["up"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "up")
    }
  }

  public var videoId: String? {
    get {
      return graphQLMap["video_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var badAlignment: String? {
    get {
      return graphQLMap["bad_alignment"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignment")
    }
  }

  public var badBoxBig: String? {
    get {
      return graphQLMap["bad_box_big"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big")
    }
  }

  public var badBoxSmall: String? {
    get {
      return graphQLMap["bad_box_small"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small")
    }
  }

  public var badLabel: String? {
    get {
      return graphQLMap["bad_label"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label")
    }
  }

  public var badTiming: String? {
    get {
      return graphQLMap["bad_timing"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing")
    }
  }

  public var badVideo: String? {
    get {
      return graphQLMap["bad_video"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video")
    }
  }

  public var badViewpoint: String? {
    get {
      return graphQLMap["bad_viewpoint"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint")
    }
  }

  public var awkwardScene: String? {
    get {
      return graphQLMap["awkward_scene"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "awkward_scene")
    }
  }

  public var badVisibility: String? {
    get {
      return graphQLMap["bad_visibility"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_visibility")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var ratingResponses: String? {
    get {
      return graphQLMap["rating_responses"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_responses")
    }
  }

  public var badDiversity: String? {
    get {
      return graphQLMap["bad_diversity"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_diversity")
    }
  }

  public var submittedTime: String? {
    get {
      return graphQLMap["submitted_time"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "submitted_time")
    }
  }

  public var videoUploadedDate: String? {
    get {
      return graphQLMap["video_uploaded_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_uploaded_date")
    }
  }
}

public struct ModelstrRatingConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(up: ModelIntInput? = nil, videoId: ModelStringInput? = nil, week: ModelStringInput? = nil, badAlignment: ModelStringInput? = nil, badBoxBig: ModelStringInput? = nil, badBoxSmall: ModelStringInput? = nil, badLabel: ModelStringInput? = nil, badTiming: ModelStringInput? = nil, badVideo: ModelStringInput? = nil, badViewpoint: ModelStringInput? = nil, awkwardScene: ModelStringInput? = nil, badVisibility: ModelStringInput? = nil, projectId: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, programName: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, ratingResponses: ModelStringInput? = nil, badDiversity: ModelStringInput? = nil, submittedTime: ModelStringInput? = nil, videoUploadedDate: ModelStringInput? = nil, and: [ModelstrRatingConditionInput?]? = nil, or: [ModelstrRatingConditionInput?]? = nil, not: ModelstrRatingConditionInput? = nil) {
    graphQLMap = ["up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate, "and": and, "or": or, "not": not]
  }

  public var up: ModelIntInput? {
    get {
      return graphQLMap["up"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "up")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var badAlignment: ModelStringInput? {
    get {
      return graphQLMap["bad_alignment"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignment")
    }
  }

  public var badBoxBig: ModelStringInput? {
    get {
      return graphQLMap["bad_box_big"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big")
    }
  }

  public var badBoxSmall: ModelStringInput? {
    get {
      return graphQLMap["bad_box_small"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small")
    }
  }

  public var badLabel: ModelStringInput? {
    get {
      return graphQLMap["bad_label"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label")
    }
  }

  public var badTiming: ModelStringInput? {
    get {
      return graphQLMap["bad_timing"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing")
    }
  }

  public var badVideo: ModelStringInput? {
    get {
      return graphQLMap["bad_video"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video")
    }
  }

  public var badViewpoint: ModelStringInput? {
    get {
      return graphQLMap["bad_viewpoint"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint")
    }
  }

  public var awkwardScene: ModelStringInput? {
    get {
      return graphQLMap["awkward_scene"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "awkward_scene")
    }
  }

  public var badVisibility: ModelStringInput? {
    get {
      return graphQLMap["bad_visibility"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_visibility")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var ratingResponses: ModelStringInput? {
    get {
      return graphQLMap["rating_responses"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_responses")
    }
  }

  public var badDiversity: ModelStringInput? {
    get {
      return graphQLMap["bad_diversity"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_diversity")
    }
  }

  public var submittedTime: ModelStringInput? {
    get {
      return graphQLMap["submitted_time"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "submitted_time")
    }
  }

  public var videoUploadedDate: ModelStringInput? {
    get {
      return graphQLMap["video_uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_uploaded_date")
    }
  }

  public var and: [ModelstrRatingConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrRatingConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrRatingConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrRatingConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrRatingConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrRatingConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrRatingInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
    graphQLMap = ["id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reviewerId: String {
    get {
      return graphQLMap["reviewer_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_id")
    }
  }

  public var up: Int? {
    get {
      return graphQLMap["up"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "up")
    }
  }

  public var videoId: String? {
    get {
      return graphQLMap["video_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var badAlignment: String? {
    get {
      return graphQLMap["bad_alignment"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignment")
    }
  }

  public var badBoxBig: String? {
    get {
      return graphQLMap["bad_box_big"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big")
    }
  }

  public var badBoxSmall: String? {
    get {
      return graphQLMap["bad_box_small"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small")
    }
  }

  public var badLabel: String? {
    get {
      return graphQLMap["bad_label"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label")
    }
  }

  public var badTiming: String? {
    get {
      return graphQLMap["bad_timing"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing")
    }
  }

  public var badVideo: String? {
    get {
      return graphQLMap["bad_video"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video")
    }
  }

  public var badViewpoint: String? {
    get {
      return graphQLMap["bad_viewpoint"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint")
    }
  }

  public var awkwardScene: String? {
    get {
      return graphQLMap["awkward_scene"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "awkward_scene")
    }
  }

  public var badVisibility: String? {
    get {
      return graphQLMap["bad_visibility"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_visibility")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var ratingResponses: String? {
    get {
      return graphQLMap["rating_responses"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_responses")
    }
  }

  public var badDiversity: String? {
    get {
      return graphQLMap["bad_diversity"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_diversity")
    }
  }

  public var submittedTime: String? {
    get {
      return graphQLMap["submitted_time"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "submitted_time")
    }
  }

  public var videoUploadedDate: String? {
    get {
      return graphQLMap["video_uploaded_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_uploaded_date")
    }
  }
}

public struct DeleteStrRatingInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, reviewerId: String) {
    graphQLMap = ["id": id, "reviewer_id": reviewerId]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reviewerId: String {
    get {
      return graphQLMap["reviewer_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_id")
    }
  }
}

public struct CreateStrConsentQuestionnaireInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
    graphQLMap = ["id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var consentId: String? {
    get {
      return graphQLMap["consent_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_id")
    }
  }

  public var shortDescription: String? {
    get {
      return graphQLMap["short_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_description")
    }
  }

  public var longDescription: String? {
    get {
      return graphQLMap["long_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "long_description")
    }
  }

  public var agreeQuestionId: String? {
    get {
      return graphQLMap["agree_question_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "agree_question_id")
    }
  }

  public var disagreeQuestionId: String? {
    get {
      return graphQLMap["disagree_question_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "disagree_question_id")
    }
  }

  public var category: String? {
    get {
      return graphQLMap["category"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category")
    }
  }

  public var categoryResponse: String? {
    get {
      return graphQLMap["category_response"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category_response")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: String {
    get {
      return graphQLMap["project_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var moreInfo: String? {
    get {
      return graphQLMap["more_info"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "more_info")
    }
  }

  public var consentQuestionType: String? {
    get {
      return graphQLMap["consent_question_type"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_question_type")
    }
  }
}

public struct ModelstrConsentQuestionnaireConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(consentId: ModelStringInput? = nil, shortDescription: ModelStringInput? = nil, longDescription: ModelStringInput? = nil, agreeQuestionId: ModelStringInput? = nil, disagreeQuestionId: ModelStringInput? = nil, category: ModelStringInput? = nil, categoryResponse: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, programId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, moreInfo: ModelStringInput? = nil, consentQuestionType: ModelStringInput? = nil, and: [ModelstrConsentQuestionnaireConditionInput?]? = nil, or: [ModelstrConsentQuestionnaireConditionInput?]? = nil, not: ModelstrConsentQuestionnaireConditionInput? = nil) {
    graphQLMap = ["consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType, "and": and, "or": or, "not": not]
  }

  public var consentId: ModelStringInput? {
    get {
      return graphQLMap["consent_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_id")
    }
  }

  public var shortDescription: ModelStringInput? {
    get {
      return graphQLMap["short_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_description")
    }
  }

  public var longDescription: ModelStringInput? {
    get {
      return graphQLMap["long_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "long_description")
    }
  }

  public var agreeQuestionId: ModelStringInput? {
    get {
      return graphQLMap["agree_question_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "agree_question_id")
    }
  }

  public var disagreeQuestionId: ModelStringInput? {
    get {
      return graphQLMap["disagree_question_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "disagree_question_id")
    }
  }

  public var category: ModelStringInput? {
    get {
      return graphQLMap["category"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category")
    }
  }

  public var categoryResponse: ModelStringInput? {
    get {
      return graphQLMap["category_response"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category_response")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var moreInfo: ModelStringInput? {
    get {
      return graphQLMap["more_info"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "more_info")
    }
  }

  public var consentQuestionType: ModelStringInput? {
    get {
      return graphQLMap["consent_question_type"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_question_type")
    }
  }

  public var and: [ModelstrConsentQuestionnaireConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrConsentQuestionnaireConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrConsentQuestionnaireConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrConsentQuestionnaireConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrConsentQuestionnaireConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrConsentQuestionnaireConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrConsentQuestionnaireInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
    graphQLMap = ["id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var consentId: String? {
    get {
      return graphQLMap["consent_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_id")
    }
  }

  public var shortDescription: String? {
    get {
      return graphQLMap["short_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_description")
    }
  }

  public var longDescription: String? {
    get {
      return graphQLMap["long_description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "long_description")
    }
  }

  public var agreeQuestionId: String? {
    get {
      return graphQLMap["agree_question_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "agree_question_id")
    }
  }

  public var disagreeQuestionId: String? {
    get {
      return graphQLMap["disagree_question_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "disagree_question_id")
    }
  }

  public var category: String? {
    get {
      return graphQLMap["category"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category")
    }
  }

  public var categoryResponse: String? {
    get {
      return graphQLMap["category_response"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category_response")
    }
  }

  public var createdDate: String? {
    get {
      return graphQLMap["created_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: String? {
    get {
      return graphQLMap["updated_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: String {
    get {
      return graphQLMap["project_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var moreInfo: String? {
    get {
      return graphQLMap["more_info"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "more_info")
    }
  }

  public var consentQuestionType: String? {
    get {
      return graphQLMap["consent_question_type"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_question_type")
    }
  }
}

public struct DeleteStrConsentQuestionnaireInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(projectId: String, id: GraphQLID) {
    graphQLMap = ["project_id": projectId, "id": id]
  }

  public var projectId: String {
    get {
      return graphQLMap["project_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateStrReviewAssignmentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var videoId: String {
    get {
      return graphQLMap["video_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var duration: String? {
    get {
      return graphQLMap["duration"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var reviewStatus: String? {
    get {
      return graphQLMap["review_status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_status")
    }
  }

  public var uploadedDate: String? {
    get {
      return graphQLMap["uploaded_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var instanceIds: String? {
    get {
      return graphQLMap["instance_ids"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_ids")
    }
  }

  public var videoFilePath: String? {
    get {
      return graphQLMap["video_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_file_path")
    }
  }

  public var annotationFilePath: String? {
    get {
      return graphQLMap["annotation_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var ratingScore: String? {
    get {
      return graphQLMap["rating_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var thumbnail: String? {
    get {
      return graphQLMap["thumbnail"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: String? {
    get {
      return graphQLMap["thumbnail_small"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var assignedDate: String {
    get {
      return graphQLMap["assigned_date"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "assigned_date")
    }
  }

  public var orientation: String? {
    get {
      return graphQLMap["orientation"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orientation")
    }
  }
}

public struct ModelstrReviewAssignmentConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectionId: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, programName: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, duration: ModelStringInput? = nil, reviewStatus: ModelStringInput? = nil, uploadedDate: ModelStringInput? = nil, week: ModelStringInput? = nil, instanceIds: ModelStringInput? = nil, videoFilePath: ModelStringInput? = nil, annotationFilePath: ModelStringInput? = nil, ratingScore: ModelStringInput? = nil, thumbnail: ModelStringInput? = nil, thumbnailSmall: ModelStringInput? = nil, assignedDate: ModelStringInput? = nil, orientation: ModelStringInput? = nil, and: [ModelstrReviewAssignmentConditionInput?]? = nil, or: [ModelstrReviewAssignmentConditionInput?]? = nil, not: ModelstrReviewAssignmentConditionInput? = nil) {
    graphQLMap = ["collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation, "and": and, "or": or, "not": not]
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var duration: ModelStringInput? {
    get {
      return graphQLMap["duration"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var reviewStatus: ModelStringInput? {
    get {
      return graphQLMap["review_status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_status")
    }
  }

  public var uploadedDate: ModelStringInput? {
    get {
      return graphQLMap["uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var instanceIds: ModelStringInput? {
    get {
      return graphQLMap["instance_ids"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_ids")
    }
  }

  public var videoFilePath: ModelStringInput? {
    get {
      return graphQLMap["video_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_file_path")
    }
  }

  public var annotationFilePath: ModelStringInput? {
    get {
      return graphQLMap["annotation_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var ratingScore: ModelStringInput? {
    get {
      return graphQLMap["rating_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var thumbnail: ModelStringInput? {
    get {
      return graphQLMap["thumbnail"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: ModelStringInput? {
    get {
      return graphQLMap["thumbnail_small"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var assignedDate: ModelStringInput? {
    get {
      return graphQLMap["assigned_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "assigned_date")
    }
  }

  public var orientation: ModelStringInput? {
    get {
      return graphQLMap["orientation"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orientation")
    }
  }

  public var and: [ModelstrReviewAssignmentConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrReviewAssignmentConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrReviewAssignmentConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrReviewAssignmentConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrReviewAssignmentConditionInput? {
    get {
      return graphQLMap["not"] as! ModelstrReviewAssignmentConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateStrReviewAssignmentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String? = nil, orientation: String? = nil) {
    graphQLMap = ["collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var videoId: String {
    get {
      return graphQLMap["video_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectionId: String? {
    get {
      return graphQLMap["collection_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: String? {
    get {
      return graphQLMap["collection_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var programName: String? {
    get {
      return graphQLMap["program_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var programId: String? {
    get {
      return graphQLMap["program_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: String? {
    get {
      return graphQLMap["project_id"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: String? {
    get {
      return graphQLMap["project_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var duration: String? {
    get {
      return graphQLMap["duration"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var reviewStatus: String? {
    get {
      return graphQLMap["review_status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_status")
    }
  }

  public var uploadedDate: String? {
    get {
      return graphQLMap["uploaded_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var week: String? {
    get {
      return graphQLMap["week"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var instanceIds: String? {
    get {
      return graphQLMap["instance_ids"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_ids")
    }
  }

  public var videoFilePath: String? {
    get {
      return graphQLMap["video_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_file_path")
    }
  }

  public var annotationFilePath: String? {
    get {
      return graphQLMap["annotation_file_path"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var ratingScore: String? {
    get {
      return graphQLMap["rating_score"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var thumbnail: String? {
    get {
      return graphQLMap["thumbnail"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: String? {
    get {
      return graphQLMap["thumbnail_small"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var assignedDate: String? {
    get {
      return graphQLMap["assigned_date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "assigned_date")
    }
  }

  public var orientation: String? {
    get {
      return graphQLMap["orientation"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orientation")
    }
  }
}

public struct DeleteStrReviewAssignmentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: GraphQLID, videoId: String) {
    graphQLMap = ["collector_id": collectorId, "video_id": videoId]
  }

  public var collectorId: GraphQLID {
    get {
      return graphQLMap["collector_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var videoId: String {
    get {
      return graphQLMap["video_id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }
}

public struct ModelStringKeyConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, between: [String?]? = nil, beginsWith: String? = nil) {
    graphQLMap = ["eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "beginsWith": beginsWith]
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }
}

public struct ModelstrCollectionsFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, projectId: ModelStringInput? = nil, trainingVideoUrl: ModelStringInput? = nil, trainingVideoJsonUrl: ModelStringInput? = nil, trainingVideos: ModelStringInput? = nil, trainingVideosLow: ModelStringInput? = nil, collectionDescription: ModelStringInput? = nil, objectId: ModelStringInput? = nil, objectsList: ModelStringInput? = nil, activities: ModelStringInput? = nil, activityShortNames: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, defaultObject: ModelStringInput? = nil, active: ModelBooleanInput? = nil, and: [ModelstrCollectionsFilterInput?]? = nil, or: [ModelstrCollectionsFilterInput?]? = nil, not: ModelstrCollectionsFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var trainingVideoUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_json_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: ModelStringInput? {
    get {
      return graphQLMap["training_videos"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: ModelStringInput? {
    get {
      return graphQLMap["training_videos_low"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: ModelStringInput? {
    get {
      return graphQLMap["collection_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectId: ModelStringInput? {
    get {
      return graphQLMap["object_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_id")
    }
  }

  public var objectsList: ModelStringInput? {
    get {
      return graphQLMap["objects_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var activities: ModelStringInput? {
    get {
      return graphQLMap["activities"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var activityShortNames: ModelStringInput? {
    get {
      return graphQLMap["activity_short_names"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: ModelStringInput? {
    get {
      return graphQLMap["default_object"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var active: ModelBooleanInput? {
    get {
      return graphQLMap["active"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }

  public var and: [ModelstrCollectionsFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrCollectionsFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrCollectionsFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrCollectionsFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrCollectionsFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrCollectionsFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public enum ModelSortDirection: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case asc
  case desc
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ASC": self = .asc
      case "DESC": self = .desc
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .asc: return "ASC"
      case .desc: return "DESC"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelSortDirection, rhs: ModelSortDirection) -> Bool {
    switch (lhs, rhs) {
      case (.asc, .asc): return true
      case (.desc, .desc): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelstrProjectsFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, activityCount: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, projectId: ModelStringInput? = nil, and: [ModelstrProjectsFilterInput?]? = nil, or: [ModelstrProjectsFilterInput?]? = nil, not: ModelstrProjectsFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var activityCount: ModelStringInput? {
    get {
      return graphQLMap["activity_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_count")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var and: [ModelstrProjectsFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrProjectsFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrProjectsFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrProjectsFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrProjectsFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrProjectsFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrActivitiesFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, activityId: ModelStringInput? = nil, name: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, programId: ModelStringInput? = nil, counts: ModelStringInput? = nil, shortName: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, and: [ModelstrActivitiesFilterInput?]? = nil, or: [ModelstrActivitiesFilterInput?]? = nil, not: ModelstrActivitiesFilterInput? = nil) {
    graphQLMap = ["id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var activityId: ModelStringInput? {
    get {
      return graphQLMap["activity_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var counts: ModelStringInput? {
    get {
      return graphQLMap["counts"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "counts")
    }
  }

  public var shortName: ModelStringInput? {
    get {
      return graphQLMap["short_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_name")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var and: [ModelstrActivitiesFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrActivitiesFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrActivitiesFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrActivitiesFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrActivitiesFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrActivitiesFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrProgramFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelStringInput? = nil, name: ModelStringInput? = nil, programId: ModelStringInput? = nil, client: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, and: [ModelstrProgramFilterInput?]? = nil, or: [ModelstrProgramFilterInput?]? = nil, not: ModelstrProgramFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate, "and": and, "or": or, "not": not]
  }

  public var id: ModelStringInput? {
    get {
      return graphQLMap["id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var client: ModelStringInput? {
    get {
      return graphQLMap["client"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "client")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var and: [ModelstrProgramFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrProgramFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrProgramFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrProgramFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrProgramFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrProgramFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrCollectorFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: ModelIDInput? = nil, collectorEmail: ModelStringInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, password: ModelStringInput? = nil, queryAttribute: ModelStringInput? = nil, isConsented: ModelBooleanInput? = nil, isDropboxIntegrated: ModelBooleanInput? = nil, isPaypalIntegrated: ModelBooleanInput? = nil, dropboxToken: ModelStringInput? = nil, paypalEmailId: ModelStringInput? = nil, uploadedCount: ModelStringInput? = nil, verifiedCount: ModelStringInput? = nil, notVerifiedCount: ModelStringInput? = nil, consentedCount: ModelStringInput? = nil, authorized: ModelStringInput? = nil, outstandingAmount: ModelStringInput? = nil, collectorScore: ModelStringInput? = nil, reviewerScore: ModelStringInput? = nil, and: [ModelstrCollectorFilterInput?]? = nil, or: [ModelstrCollectorFilterInput?]? = nil, not: ModelstrCollectorFilterInput? = nil) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore, "and": and, "or": or, "not": not]
  }

  public var collectorId: ModelIDInput? {
    get {
      return graphQLMap["collector_id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: ModelStringInput? {
    get {
      return graphQLMap["collector_email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["first_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["last_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var password: ModelStringInput? {
    get {
      return graphQLMap["password"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var queryAttribute: ModelStringInput? {
    get {
      return graphQLMap["query_attribute"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var isConsented: ModelBooleanInput? {
    get {
      return graphQLMap["is_consented"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_consented")
    }
  }

  public var isDropboxIntegrated: ModelBooleanInput? {
    get {
      return graphQLMap["is_dropbox_integrated"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_dropbox_integrated")
    }
  }

  public var isPaypalIntegrated: ModelBooleanInput? {
    get {
      return graphQLMap["is_paypal_integrated"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "is_paypal_integrated")
    }
  }

  public var dropboxToken: ModelStringInput? {
    get {
      return graphQLMap["dropbox_token"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dropbox_token")
    }
  }

  public var paypalEmailId: ModelStringInput? {
    get {
      return graphQLMap["paypal_email_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "paypal_email_id")
    }
  }

  public var uploadedCount: ModelStringInput? {
    get {
      return graphQLMap["uploaded_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: ModelStringInput? {
    get {
      return graphQLMap["verified_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var notVerifiedCount: ModelStringInput? {
    get {
      return graphQLMap["not_verified_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not_verified_count")
    }
  }

  public var consentedCount: ModelStringInput? {
    get {
      return graphQLMap["consented_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consented_count")
    }
  }

  public var authorized: ModelStringInput? {
    get {
      return graphQLMap["authorized"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "authorized")
    }
  }

  public var outstandingAmount: ModelStringInput? {
    get {
      return graphQLMap["outstanding_amount"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "outstanding_amount")
    }
  }

  public var collectorScore: ModelStringInput? {
    get {
      return graphQLMap["collector_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_score")
    }
  }

  public var reviewerScore: ModelStringInput? {
    get {
      return graphQLMap["reviewer_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_score")
    }
  }

  public var and: [ModelstrCollectorFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrCollectorFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrCollectorFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrCollectorFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrCollectorFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrCollectorFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrCollectionsAssignmentFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: ModelIDInput? = nil, collectorEmail: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, projectId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, programId: ModelStringInput? = nil, programName: ModelStringInput? = nil, trainingVideoUrl: ModelStringInput? = nil, trainingVideoJsonUrl: ModelStringInput? = nil, trainingVideos: ModelStringInput? = nil, trainingVideosLow: ModelStringInput? = nil, collectionDescription: ModelStringInput? = nil, objectsList: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, defaultObject: ModelStringInput? = nil, activities: ModelStringInput? = nil, trainingVideosOverlay: ModelStringInput? = nil, activityShortNames: ModelStringInput? = nil, active: ModelBooleanInput? = nil, isTrainingVideoEnabled: ModelBooleanInput? = nil, isConsentRequired: ModelBooleanInput? = nil, consentOverlayText: ModelStringInput? = nil, and: [ModelstrCollectionsAssignmentFilterInput?]? = nil, or: [ModelstrCollectionsAssignmentFilterInput?]? = nil, not: ModelstrCollectionsAssignmentFilterInput? = nil) {
    graphQLMap = ["collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText, "and": and, "or": or, "not": not]
  }

  public var collectorId: ModelIDInput? {
    get {
      return graphQLMap["collector_id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectorEmail: ModelStringInput? {
    get {
      return graphQLMap["collector_email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var trainingVideoUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_url")
    }
  }

  public var trainingVideoJsonUrl: ModelStringInput? {
    get {
      return graphQLMap["training_video_json_url"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_video_json_url")
    }
  }

  public var trainingVideos: ModelStringInput? {
    get {
      return graphQLMap["training_videos"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos")
    }
  }

  public var trainingVideosLow: ModelStringInput? {
    get {
      return graphQLMap["training_videos_low"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_low")
    }
  }

  public var collectionDescription: ModelStringInput? {
    get {
      return graphQLMap["collection_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_description")
    }
  }

  public var objectsList: ModelStringInput? {
    get {
      return graphQLMap["objects_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "objects_list")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var defaultObject: ModelStringInput? {
    get {
      return graphQLMap["default_object"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_object")
    }
  }

  public var activities: ModelStringInput? {
    get {
      return graphQLMap["activities"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities")
    }
  }

  public var trainingVideosOverlay: ModelStringInput? {
    get {
      return graphQLMap["training_videos_overlay"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "training_videos_overlay")
    }
  }

  public var activityShortNames: ModelStringInput? {
    get {
      return graphQLMap["activity_short_names"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_short_names")
    }
  }

  public var active: ModelBooleanInput? {
    get {
      return graphQLMap["active"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "active")
    }
  }

  public var isTrainingVideoEnabled: ModelBooleanInput? {
    get {
      return graphQLMap["isTrainingVideoEnabled"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isTrainingVideoEnabled")
    }
  }

  public var isConsentRequired: ModelBooleanInput? {
    get {
      return graphQLMap["isConsentRequired"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isConsentRequired")
    }
  }

  public var consentOverlayText: ModelStringInput? {
    get {
      return graphQLMap["consent_overlay_text"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_overlay_text")
    }
  }

  public var and: [ModelstrCollectionsAssignmentFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrCollectionsAssignmentFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrCollectionsAssignmentFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrCollectionsAssignmentFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrCollectionsAssignmentFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrCollectionsAssignmentFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrVideosFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, rawVideoFilePath: ModelStringInput? = nil, annotationFilePath: ModelStringInput? = nil, videoId: ModelStringInput? = nil, collectorId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, activitiesList: ModelStringInput? = nil, objectLabelList: ModelStringInput? = nil, thumbsUp: ModelIntInput? = nil, thumbsDown: ModelIntInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, collectedDate: ModelStringInput? = nil, latitude: ModelStringInput? = nil, longitude: ModelStringInput? = nil, processedVideoFilePath: ModelStringInput? = nil, rating: ModelStringInput? = nil, subjectId: ModelStringInput? = nil, verified: ModelBooleanInput? = nil, videoSharingLink: ModelStringInput? = nil, jsonSharingLink: ModelStringInput? = nil, ratingScore: ModelStringInput? = nil, status: ModelStringInput? = nil, statusReason: ModelStringInput? = nil, thumbnail: ModelStringInput? = nil, thumbnailSmall: ModelStringInput? = nil, duration: ModelStringInput? = nil, displayDuration: ModelStringInput? = nil, uploadedDate: ModelStringInput? = nil, queryAttribute: ModelStringInput? = nil, videoState: ModelStringInput? = nil, week: ModelStringInput? = nil, and: [ModelstrVideosFilterInput?]? = nil, or: [ModelstrVideosFilterInput?]? = nil, not: ModelstrVideosFilterInput? = nil) {
    graphQLMap = ["id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var rawVideoFilePath: ModelStringInput? {
    get {
      return graphQLMap["raw_video_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "raw_video_file_path")
    }
  }

  public var annotationFilePath: ModelStringInput? {
    get {
      return graphQLMap["annotation_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectorId: ModelStringInput? {
    get {
      return graphQLMap["collector_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var activitiesList: ModelStringInput? {
    get {
      return graphQLMap["activities_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activities_list")
    }
  }

  public var objectLabelList: ModelStringInput? {
    get {
      return graphQLMap["object_label_list"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "object_label_list")
    }
  }

  public var thumbsUp: ModelIntInput? {
    get {
      return graphQLMap["thumbs_up"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_up")
    }
  }

  public var thumbsDown: ModelIntInput? {
    get {
      return graphQLMap["thumbs_down"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbs_down")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var collectedDate: ModelStringInput? {
    get {
      return graphQLMap["collected_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collected_date")
    }
  }

  public var latitude: ModelStringInput? {
    get {
      return graphQLMap["latitude"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "latitude")
    }
  }

  public var longitude: ModelStringInput? {
    get {
      return graphQLMap["longitude"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "longitude")
    }
  }

  public var processedVideoFilePath: ModelStringInput? {
    get {
      return graphQLMap["processed_video_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "processed_video_file_path")
    }
  }

  public var rating: ModelStringInput? {
    get {
      return graphQLMap["rating"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating")
    }
  }

  public var subjectId: ModelStringInput? {
    get {
      return graphQLMap["subject_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var verified: ModelBooleanInput? {
    get {
      return graphQLMap["verified"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoSharingLink: ModelStringInput? {
    get {
      return graphQLMap["video_sharing_link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_sharing_link")
    }
  }

  public var jsonSharingLink: ModelStringInput? {
    get {
      return graphQLMap["json_sharing_link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "json_sharing_link")
    }
  }

  public var ratingScore: ModelStringInput? {
    get {
      return graphQLMap["rating_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var status: ModelStringInput? {
    get {
      return graphQLMap["status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var statusReason: ModelStringInput? {
    get {
      return graphQLMap["status_reason"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status_reason")
    }
  }

  public var thumbnail: ModelStringInput? {
    get {
      return graphQLMap["thumbnail"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: ModelStringInput? {
    get {
      return graphQLMap["thumbnail_small"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var duration: ModelStringInput? {
    get {
      return graphQLMap["duration"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var displayDuration: ModelStringInput? {
    get {
      return graphQLMap["display_duration"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "display_duration")
    }
  }

  public var uploadedDate: ModelStringInput? {
    get {
      return graphQLMap["uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var queryAttribute: ModelStringInput? {
    get {
      return graphQLMap["query_attribute"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "query_attribute")
    }
  }

  public var videoState: ModelStringInput? {
    get {
      return graphQLMap["video_state"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_state")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var and: [ModelstrVideosFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrVideosFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrVideosFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrVideosFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrVideosFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrVideosFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrInstancesFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelStringInput? = nil, instanceId: ModelStringInput? = nil, activityName: ModelStringInput? = nil, avgBboxHeight: ModelStringInput? = nil, avgBboxSize: ModelStringInput? = nil, avgBboxWidth: ModelStringInput? = nil, badAlignamentScore: ModelStringInput? = nil, badBoxBigScore: ModelStringInput? = nil, badBoxScore: ModelStringInput? = nil, badBoxSmallScore: ModelStringInput? = nil, badLabelScore: ModelStringInput? = nil, badTimingScore: ModelStringInput? = nil, badVideoScore: ModelStringInput? = nil, badViewpointScore: ModelStringInput? = nil, collectorId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, endFrame: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, ratingScore: ModelStringInput? = nil, reviewReason: ModelStringInput? = nil, s3Path: ModelStringInput? = nil, startFrame: ModelStringInput? = nil, subjectId: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, uploadedDate: ModelStringInput? = nil, verified: ModelBooleanInput? = nil, videoId: ModelStringInput? = nil, week: ModelStringInput? = nil, needReviewScore: ModelStringInput? = nil, and: [ModelstrInstancesFilterInput?]? = nil, or: [ModelstrInstancesFilterInput?]? = nil, not: ModelstrInstancesFilterInput? = nil) {
    graphQLMap = ["id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore, "and": and, "or": or, "not": not]
  }

  public var id: ModelStringInput? {
    get {
      return graphQLMap["id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var instanceId: ModelStringInput? {
    get {
      return graphQLMap["instance_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_id")
    }
  }

  public var activityName: ModelStringInput? {
    get {
      return graphQLMap["activity_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "activity_name")
    }
  }

  public var avgBboxHeight: ModelStringInput? {
    get {
      return graphQLMap["avg_bbox_height"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_height")
    }
  }

  public var avgBboxSize: ModelStringInput? {
    get {
      return graphQLMap["avg_bbox_size"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_size")
    }
  }

  public var avgBboxWidth: ModelStringInput? {
    get {
      return graphQLMap["avg_bbox_width"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avg_bbox_width")
    }
  }

  public var badAlignamentScore: ModelStringInput? {
    get {
      return graphQLMap["bad_alignament_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignament_score")
    }
  }

  public var badBoxBigScore: ModelStringInput? {
    get {
      return graphQLMap["bad_box_big_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big_score")
    }
  }

  public var badBoxScore: ModelStringInput? {
    get {
      return graphQLMap["bad_box_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_score")
    }
  }

  public var badBoxSmallScore: ModelStringInput? {
    get {
      return graphQLMap["bad_box_small_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small_score")
    }
  }

  public var badLabelScore: ModelStringInput? {
    get {
      return graphQLMap["bad_label_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label_score")
    }
  }

  public var badTimingScore: ModelStringInput? {
    get {
      return graphQLMap["bad_timing_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing_score")
    }
  }

  public var badVideoScore: ModelStringInput? {
    get {
      return graphQLMap["bad_video_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video_score")
    }
  }

  public var badViewpointScore: ModelStringInput? {
    get {
      return graphQLMap["bad_viewpoint_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint_score")
    }
  }

  public var collectorId: ModelStringInput? {
    get {
      return graphQLMap["collector_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var endFrame: ModelStringInput? {
    get {
      return graphQLMap["end_frame"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "end_frame")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var ratingScore: ModelStringInput? {
    get {
      return graphQLMap["rating_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var reviewReason: ModelStringInput? {
    get {
      return graphQLMap["review_reason"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_reason")
    }
  }

  public var s3Path: ModelStringInput? {
    get {
      return graphQLMap["s3_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3_path")
    }
  }

  public var startFrame: ModelStringInput? {
    get {
      return graphQLMap["start_frame"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "start_frame")
    }
  }

  public var subjectId: ModelStringInput? {
    get {
      return graphQLMap["subject_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_id")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var uploadedDate: ModelStringInput? {
    get {
      return graphQLMap["uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var verified: ModelBooleanInput? {
    get {
      return graphQLMap["verified"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var needReviewScore: ModelStringInput? {
    get {
      return graphQLMap["need_review_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "need_review_score")
    }
  }

  public var and: [ModelstrInstancesFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrInstancesFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrInstancesFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrInstancesFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrInstancesFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrInstancesFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrSubjectFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: ModelIDInput? = nil, uuid: ModelStringInput? = nil, subjectEmail: ModelStringInput? = nil, collectorEmail: ModelStringInput? = nil, lastActivityDate: ModelStringInput? = nil, consentResponse: ModelStringInput? = nil, consentVideoId: ModelStringInput? = nil, beard: ModelStringInput? = nil, ethnicity: ModelStringInput? = nil, eyeGlasses: ModelStringInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, gender: ModelStringInput? = nil, hairColor: ModelStringInput? = nil, hairLength: ModelStringInput? = nil, uploadedCount: ModelStringInput? = nil, verifiedCount: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, status: ModelStringInput? = nil, count: ModelStringInput? = nil, programId: ModelStringInput? = nil, programName: ModelStringInput? = nil, projectId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, and: [ModelstrSubjectFilterInput?]? = nil, or: [ModelstrSubjectFilterInput?]? = nil, not: ModelstrSubjectFilterInput? = nil) {
    graphQLMap = ["collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName, "and": and, "or": or, "not": not]
  }

  public var collectorId: ModelIDInput? {
    get {
      return graphQLMap["collector_id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var uuid: ModelStringInput? {
    get {
      return graphQLMap["uuid"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uuid")
    }
  }

  public var subjectEmail: ModelStringInput? {
    get {
      return graphQLMap["subject_email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject_email")
    }
  }

  public var collectorEmail: ModelStringInput? {
    get {
      return graphQLMap["collector_email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_email")
    }
  }

  public var lastActivityDate: ModelStringInput? {
    get {
      return graphQLMap["last_activity_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_activity_date")
    }
  }

  public var consentResponse: ModelStringInput? {
    get {
      return graphQLMap["consent_response"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_response")
    }
  }

  public var consentVideoId: ModelStringInput? {
    get {
      return graphQLMap["consent_video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_video_id")
    }
  }

  public var beard: ModelStringInput? {
    get {
      return graphQLMap["beard"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beard")
    }
  }

  public var ethnicity: ModelStringInput? {
    get {
      return graphQLMap["ethnicity"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ethnicity")
    }
  }

  public var eyeGlasses: ModelStringInput? {
    get {
      return graphQLMap["eye_glasses"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eye_glasses")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["first_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "first_name")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["last_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "last_name")
    }
  }

  public var gender: ModelStringInput? {
    get {
      return graphQLMap["gender"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var hairColor: ModelStringInput? {
    get {
      return graphQLMap["hair_color"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_color")
    }
  }

  public var hairLength: ModelStringInput? {
    get {
      return graphQLMap["hair_length"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hair_length")
    }
  }

  public var uploadedCount: ModelStringInput? {
    get {
      return graphQLMap["uploaded_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_count")
    }
  }

  public var verifiedCount: ModelStringInput? {
    get {
      return graphQLMap["verified_count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verified_count")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var status: ModelStringInput? {
    get {
      return graphQLMap["status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var count: ModelStringInput? {
    get {
      return graphQLMap["count"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "count")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var and: [ModelstrSubjectFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrSubjectFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrSubjectFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrSubjectFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrSubjectFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrSubjectFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrRatingFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelStringInput? = nil, reviewerId: ModelStringInput? = nil, up: ModelIntInput? = nil, videoId: ModelStringInput? = nil, week: ModelStringInput? = nil, badAlignment: ModelStringInput? = nil, badBoxBig: ModelStringInput? = nil, badBoxSmall: ModelStringInput? = nil, badLabel: ModelStringInput? = nil, badTiming: ModelStringInput? = nil, badVideo: ModelStringInput? = nil, badViewpoint: ModelStringInput? = nil, awkwardScene: ModelStringInput? = nil, badVisibility: ModelStringInput? = nil, projectId: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, programName: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, ratingResponses: ModelStringInput? = nil, badDiversity: ModelStringInput? = nil, submittedTime: ModelStringInput? = nil, videoUploadedDate: ModelStringInput? = nil, and: [ModelstrRatingFilterInput?]? = nil, or: [ModelstrRatingFilterInput?]? = nil, not: ModelstrRatingFilterInput? = nil) {
    graphQLMap = ["id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate, "and": and, "or": or, "not": not]
  }

  public var id: ModelStringInput? {
    get {
      return graphQLMap["id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reviewerId: ModelStringInput? {
    get {
      return graphQLMap["reviewer_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "reviewer_id")
    }
  }

  public var up: ModelIntInput? {
    get {
      return graphQLMap["up"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "up")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var badAlignment: ModelStringInput? {
    get {
      return graphQLMap["bad_alignment"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_alignment")
    }
  }

  public var badBoxBig: ModelStringInput? {
    get {
      return graphQLMap["bad_box_big"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_big")
    }
  }

  public var badBoxSmall: ModelStringInput? {
    get {
      return graphQLMap["bad_box_small"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_box_small")
    }
  }

  public var badLabel: ModelStringInput? {
    get {
      return graphQLMap["bad_label"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_label")
    }
  }

  public var badTiming: ModelStringInput? {
    get {
      return graphQLMap["bad_timing"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_timing")
    }
  }

  public var badVideo: ModelStringInput? {
    get {
      return graphQLMap["bad_video"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_video")
    }
  }

  public var badViewpoint: ModelStringInput? {
    get {
      return graphQLMap["bad_viewpoint"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_viewpoint")
    }
  }

  public var awkwardScene: ModelStringInput? {
    get {
      return graphQLMap["awkward_scene"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "awkward_scene")
    }
  }

  public var badVisibility: ModelStringInput? {
    get {
      return graphQLMap["bad_visibility"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_visibility")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var ratingResponses: ModelStringInput? {
    get {
      return graphQLMap["rating_responses"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_responses")
    }
  }

  public var badDiversity: ModelStringInput? {
    get {
      return graphQLMap["bad_diversity"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bad_diversity")
    }
  }

  public var submittedTime: ModelStringInput? {
    get {
      return graphQLMap["submitted_time"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "submitted_time")
    }
  }

  public var videoUploadedDate: ModelStringInput? {
    get {
      return graphQLMap["video_uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_uploaded_date")
    }
  }

  public var and: [ModelstrRatingFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrRatingFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrRatingFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrRatingFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrRatingFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrRatingFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIDKeyConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil) {
    graphQLMap = ["eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "beginsWith": beginsWith]
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }
}

public struct ModelstrConsentQuestionnaireFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, consentId: ModelStringInput? = nil, shortDescription: ModelStringInput? = nil, longDescription: ModelStringInput? = nil, agreeQuestionId: ModelStringInput? = nil, disagreeQuestionId: ModelStringInput? = nil, category: ModelStringInput? = nil, categoryResponse: ModelStringInput? = nil, createdDate: ModelStringInput? = nil, updatedDate: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, moreInfo: ModelStringInput? = nil, consentQuestionType: ModelStringInput? = nil, and: [ModelstrConsentQuestionnaireFilterInput?]? = nil, or: [ModelstrConsentQuestionnaireFilterInput?]? = nil, not: ModelstrConsentQuestionnaireFilterInput? = nil) {
    graphQLMap = ["id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var consentId: ModelStringInput? {
    get {
      return graphQLMap["consent_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_id")
    }
  }

  public var shortDescription: ModelStringInput? {
    get {
      return graphQLMap["short_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "short_description")
    }
  }

  public var longDescription: ModelStringInput? {
    get {
      return graphQLMap["long_description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "long_description")
    }
  }

  public var agreeQuestionId: ModelStringInput? {
    get {
      return graphQLMap["agree_question_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "agree_question_id")
    }
  }

  public var disagreeQuestionId: ModelStringInput? {
    get {
      return graphQLMap["disagree_question_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "disagree_question_id")
    }
  }

  public var category: ModelStringInput? {
    get {
      return graphQLMap["category"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category")
    }
  }

  public var categoryResponse: ModelStringInput? {
    get {
      return graphQLMap["category_response"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category_response")
    }
  }

  public var createdDate: ModelStringInput? {
    get {
      return graphQLMap["created_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "created_date")
    }
  }

  public var updatedDate: ModelStringInput? {
    get {
      return graphQLMap["updated_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "updated_date")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var moreInfo: ModelStringInput? {
    get {
      return graphQLMap["more_info"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "more_info")
    }
  }

  public var consentQuestionType: ModelStringInput? {
    get {
      return graphQLMap["consent_question_type"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "consent_question_type")
    }
  }

  public var and: [ModelstrConsentQuestionnaireFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrConsentQuestionnaireFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrConsentQuestionnaireFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrConsentQuestionnaireFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrConsentQuestionnaireFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrConsentQuestionnaireFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelstrReviewAssignmentFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(collectorId: ModelIDInput? = nil, videoId: ModelStringInput? = nil, collectionId: ModelStringInput? = nil, collectionName: ModelStringInput? = nil, programName: ModelStringInput? = nil, programId: ModelStringInput? = nil, projectId: ModelStringInput? = nil, projectName: ModelStringInput? = nil, duration: ModelStringInput? = nil, reviewStatus: ModelStringInput? = nil, uploadedDate: ModelStringInput? = nil, week: ModelStringInput? = nil, instanceIds: ModelStringInput? = nil, videoFilePath: ModelStringInput? = nil, annotationFilePath: ModelStringInput? = nil, ratingScore: ModelStringInput? = nil, thumbnail: ModelStringInput? = nil, thumbnailSmall: ModelStringInput? = nil, assignedDate: ModelStringInput? = nil, orientation: ModelStringInput? = nil, and: [ModelstrReviewAssignmentFilterInput?]? = nil, or: [ModelstrReviewAssignmentFilterInput?]? = nil, not: ModelstrReviewAssignmentFilterInput? = nil) {
    graphQLMap = ["collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation, "and": and, "or": or, "not": not]
  }

  public var collectorId: ModelIDInput? {
    get {
      return graphQLMap["collector_id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collector_id")
    }
  }

  public var videoId: ModelStringInput? {
    get {
      return graphQLMap["video_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_id")
    }
  }

  public var collectionId: ModelStringInput? {
    get {
      return graphQLMap["collection_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_id")
    }
  }

  public var collectionName: ModelStringInput? {
    get {
      return graphQLMap["collection_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collection_name")
    }
  }

  public var programName: ModelStringInput? {
    get {
      return graphQLMap["program_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_name")
    }
  }

  public var programId: ModelStringInput? {
    get {
      return graphQLMap["program_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "program_id")
    }
  }

  public var projectId: ModelStringInput? {
    get {
      return graphQLMap["project_id"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_id")
    }
  }

  public var projectName: ModelStringInput? {
    get {
      return graphQLMap["project_name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "project_name")
    }
  }

  public var duration: ModelStringInput? {
    get {
      return graphQLMap["duration"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var reviewStatus: ModelStringInput? {
    get {
      return graphQLMap["review_status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review_status")
    }
  }

  public var uploadedDate: ModelStringInput? {
    get {
      return graphQLMap["uploaded_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploaded_date")
    }
  }

  public var week: ModelStringInput? {
    get {
      return graphQLMap["week"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "week")
    }
  }

  public var instanceIds: ModelStringInput? {
    get {
      return graphQLMap["instance_ids"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instance_ids")
    }
  }

  public var videoFilePath: ModelStringInput? {
    get {
      return graphQLMap["video_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video_file_path")
    }
  }

  public var annotationFilePath: ModelStringInput? {
    get {
      return graphQLMap["annotation_file_path"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "annotation_file_path")
    }
  }

  public var ratingScore: ModelStringInput? {
    get {
      return graphQLMap["rating_score"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "rating_score")
    }
  }

  public var thumbnail: ModelStringInput? {
    get {
      return graphQLMap["thumbnail"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail")
    }
  }

  public var thumbnailSmall: ModelStringInput? {
    get {
      return graphQLMap["thumbnail_small"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "thumbnail_small")
    }
  }

  public var assignedDate: ModelStringInput? {
    get {
      return graphQLMap["assigned_date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "assigned_date")
    }
  }

  public var orientation: ModelStringInput? {
    get {
      return graphQLMap["orientation"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orientation")
    }
  }

  public var and: [ModelstrReviewAssignmentFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelstrReviewAssignmentFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelstrReviewAssignmentFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelstrReviewAssignmentFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelstrReviewAssignmentFilterInput? {
    get {
      return graphQLMap["not"] as! ModelstrReviewAssignmentFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public final class CreateStrCollectionsMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrCollections($input: CreateStrCollectionsInput!, $condition: ModelstrCollectionsConditionInput) {\n  createStrCollections(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public var input: CreateStrCollectionsInput
  public var condition: ModelstrCollectionsConditionInput?

  public init(input: CreateStrCollectionsInput, condition: ModelstrCollectionsConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrCollections", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrCollections: CreateStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrCollections": createStrCollections.flatMap { $0.snapshot }])
    }

    public var createStrCollections: CreateStrCollection? {
      get {
        return (snapshot["createStrCollections"] as? Snapshot).flatMap { CreateStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrCollections")
      }
    }

    public struct CreateStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class UpdateStrCollectionsMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrCollections($input: UpdateStrCollectionsInput!, $condition: ModelstrCollectionsConditionInput) {\n  updateStrCollections(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public var input: UpdateStrCollectionsInput
  public var condition: ModelstrCollectionsConditionInput?

  public init(input: UpdateStrCollectionsInput, condition: ModelstrCollectionsConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrCollections", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrCollections: UpdateStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrCollections": updateStrCollections.flatMap { $0.snapshot }])
    }

    public var updateStrCollections: UpdateStrCollection? {
      get {
        return (snapshot["updateStrCollections"] as? Snapshot).flatMap { UpdateStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrCollections")
      }
    }

    public struct UpdateStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class DeleteStrCollectionsMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrCollections($input: DeleteStrCollectionsInput!, $condition: ModelstrCollectionsConditionInput) {\n  deleteStrCollections(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public var input: DeleteStrCollectionsInput
  public var condition: ModelstrCollectionsConditionInput?

  public init(input: DeleteStrCollectionsInput, condition: ModelstrCollectionsConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrCollections", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrCollections: DeleteStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrCollections": deleteStrCollections.flatMap { $0.snapshot }])
    }

    public var deleteStrCollections: DeleteStrCollection? {
      get {
        return (snapshot["deleteStrCollections"] as? Snapshot).flatMap { DeleteStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrCollections")
      }
    }

    public struct DeleteStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class CreateStrProjectsMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrProjects($input: CreateStrProjectsInput!, $condition: ModelstrProjectsConditionInput) {\n  createStrProjects(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public var input: CreateStrProjectsInput
  public var condition: ModelstrProjectsConditionInput?

  public init(input: CreateStrProjectsInput, condition: ModelstrProjectsConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrProjects", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrProjects: CreateStrProject? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrProjects": createStrProjects.flatMap { $0.snapshot }])
    }

    public var createStrProjects: CreateStrProject? {
      get {
        return (snapshot["createStrProjects"] as? Snapshot).flatMap { CreateStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrProjects")
      }
    }

    public struct CreateStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class UpdateStrProjectsMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrProjects($input: UpdateStrProjectsInput!, $condition: ModelstrProjectsConditionInput) {\n  updateStrProjects(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public var input: UpdateStrProjectsInput
  public var condition: ModelstrProjectsConditionInput?

  public init(input: UpdateStrProjectsInput, condition: ModelstrProjectsConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrProjects", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrProjects: UpdateStrProject? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrProjects": updateStrProjects.flatMap { $0.snapshot }])
    }

    public var updateStrProjects: UpdateStrProject? {
      get {
        return (snapshot["updateStrProjects"] as? Snapshot).flatMap { UpdateStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrProjects")
      }
    }

    public struct UpdateStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class DeleteStrProjectsMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrProjects($input: DeleteStrProjectsInput!, $condition: ModelstrProjectsConditionInput) {\n  deleteStrProjects(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public var input: DeleteStrProjectsInput
  public var condition: ModelstrProjectsConditionInput?

  public init(input: DeleteStrProjectsInput, condition: ModelstrProjectsConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrProjects", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrProjects: DeleteStrProject? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrProjects": deleteStrProjects.flatMap { $0.snapshot }])
    }

    public var deleteStrProjects: DeleteStrProject? {
      get {
        return (snapshot["deleteStrProjects"] as? Snapshot).flatMap { DeleteStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrProjects")
      }
    }

    public struct DeleteStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class CreateStrActivitiesMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrActivities($input: CreateStrActivitiesInput!, $condition: ModelstrActivitiesConditionInput) {\n  createStrActivities(input: $input, condition: $condition) {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public var input: CreateStrActivitiesInput
  public var condition: ModelstrActivitiesConditionInput?

  public init(input: CreateStrActivitiesInput, condition: ModelstrActivitiesConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrActivities", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrActivities: CreateStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrActivities": createStrActivities.flatMap { $0.snapshot }])
    }

    public var createStrActivities: CreateStrActivity? {
      get {
        return (snapshot["createStrActivities"] as? Snapshot).flatMap { CreateStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrActivities")
      }
    }

    public struct CreateStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class UpdateStrActivitiesMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrActivities($input: UpdateStrActivitiesInput!, $condition: ModelstrActivitiesConditionInput) {\n  updateStrActivities(input: $input, condition: $condition) {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public var input: UpdateStrActivitiesInput
  public var condition: ModelstrActivitiesConditionInput?

  public init(input: UpdateStrActivitiesInput, condition: ModelstrActivitiesConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrActivities", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrActivities: UpdateStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrActivities": updateStrActivities.flatMap { $0.snapshot }])
    }

    public var updateStrActivities: UpdateStrActivity? {
      get {
        return (snapshot["updateStrActivities"] as? Snapshot).flatMap { UpdateStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrActivities")
      }
    }

    public struct UpdateStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class DeleteStrActivitiesMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrActivities($input: DeleteStrActivitiesInput!, $condition: ModelstrActivitiesConditionInput) {\n  deleteStrActivities(input: $input, condition: $condition) {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public var input: DeleteStrActivitiesInput
  public var condition: ModelstrActivitiesConditionInput?

  public init(input: DeleteStrActivitiesInput, condition: ModelstrActivitiesConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrActivities", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrActivities: DeleteStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrActivities": deleteStrActivities.flatMap { $0.snapshot }])
    }

    public var deleteStrActivities: DeleteStrActivity? {
      get {
        return (snapshot["deleteStrActivities"] as? Snapshot).flatMap { DeleteStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrActivities")
      }
    }

    public struct DeleteStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class CreateStrProgramMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrProgram($input: CreateStrProgramInput!, $condition: ModelstrProgramConditionInput) {\n  createStrProgram(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public var input: CreateStrProgramInput
  public var condition: ModelstrProgramConditionInput?

  public init(input: CreateStrProgramInput, condition: ModelstrProgramConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrProgram", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrProgram: CreateStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrProgram": createStrProgram.flatMap { $0.snapshot }])
    }

    public var createStrProgram: CreateStrProgram? {
      get {
        return (snapshot["createStrProgram"] as? Snapshot).flatMap { CreateStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrProgram")
      }
    }

    public struct CreateStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class UpdateStrProgramMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrProgram($input: UpdateStrProgramInput!, $condition: ModelstrProgramConditionInput) {\n  updateStrProgram(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public var input: UpdateStrProgramInput
  public var condition: ModelstrProgramConditionInput?

  public init(input: UpdateStrProgramInput, condition: ModelstrProgramConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrProgram", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrProgram: UpdateStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrProgram": updateStrProgram.flatMap { $0.snapshot }])
    }

    public var updateStrProgram: UpdateStrProgram? {
      get {
        return (snapshot["updateStrProgram"] as? Snapshot).flatMap { UpdateStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrProgram")
      }
    }

    public struct UpdateStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class DeleteStrProgramMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrProgram($input: DeleteStrProgramInput!, $condition: ModelstrProgramConditionInput) {\n  deleteStrProgram(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public var input: DeleteStrProgramInput
  public var condition: ModelstrProgramConditionInput?

  public init(input: DeleteStrProgramInput, condition: ModelstrProgramConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrProgram", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrProgram: DeleteStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrProgram": deleteStrProgram.flatMap { $0.snapshot }])
    }

    public var deleteStrProgram: DeleteStrProgram? {
      get {
        return (snapshot["deleteStrProgram"] as? Snapshot).flatMap { DeleteStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrProgram")
      }
    }

    public struct DeleteStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class CreateStrCollectorMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrCollector($input: CreateStrCollectorInput!, $condition: ModelstrCollectorConditionInput) {\n  createStrCollector(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public var input: CreateStrCollectorInput
  public var condition: ModelstrCollectorConditionInput?

  public init(input: CreateStrCollectorInput, condition: ModelstrCollectorConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrCollector", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrCollector: CreateStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrCollector": createStrCollector.flatMap { $0.snapshot }])
    }

    public var createStrCollector: CreateStrCollector? {
      get {
        return (snapshot["createStrCollector"] as? Snapshot).flatMap { CreateStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrCollector")
      }
    }

    public struct CreateStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class UpdateStrCollectorMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrCollector($input: UpdateStrCollectorInput!, $condition: ModelstrCollectorConditionInput) {\n  updateStrCollector(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public var input: UpdateStrCollectorInput
  public var condition: ModelstrCollectorConditionInput?

  public init(input: UpdateStrCollectorInput, condition: ModelstrCollectorConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrCollector", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrCollector: UpdateStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrCollector": updateStrCollector.flatMap { $0.snapshot }])
    }

    public var updateStrCollector: UpdateStrCollector? {
      get {
        return (snapshot["updateStrCollector"] as? Snapshot).flatMap { UpdateStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrCollector")
      }
    }

    public struct UpdateStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class DeleteStrCollectorMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrCollector($input: DeleteStrCollectorInput!, $condition: ModelstrCollectorConditionInput) {\n  deleteStrCollector(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public var input: DeleteStrCollectorInput
  public var condition: ModelstrCollectorConditionInput?

  public init(input: DeleteStrCollectorInput, condition: ModelstrCollectorConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrCollector", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrCollector: DeleteStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrCollector": deleteStrCollector.flatMap { $0.snapshot }])
    }

    public var deleteStrCollector: DeleteStrCollector? {
      get {
        return (snapshot["deleteStrCollector"] as? Snapshot).flatMap { DeleteStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrCollector")
      }
    }

    public struct DeleteStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class CreateStrCollectionsAssignmentMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrCollectionsAssignment($input: CreateStrCollectionsAssignmentInput!, $condition: ModelstrCollectionsAssignmentConditionInput) {\n  createStrCollectionsAssignment(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public var input: CreateStrCollectionsAssignmentInput
  public var condition: ModelstrCollectionsAssignmentConditionInput?

  public init(input: CreateStrCollectionsAssignmentInput, condition: ModelstrCollectionsAssignmentConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrCollectionsAssignment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrCollectionsAssignment: CreateStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrCollectionsAssignment": createStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var createStrCollectionsAssignment: CreateStrCollectionsAssignment? {
      get {
        return (snapshot["createStrCollectionsAssignment"] as? Snapshot).flatMap { CreateStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrCollectionsAssignment")
      }
    }

    public struct CreateStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class UpdateStrCollectionsAssignmentMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrCollectionsAssignment($input: UpdateStrCollectionsAssignmentInput!, $condition: ModelstrCollectionsAssignmentConditionInput) {\n  updateStrCollectionsAssignment(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public var input: UpdateStrCollectionsAssignmentInput
  public var condition: ModelstrCollectionsAssignmentConditionInput?

  public init(input: UpdateStrCollectionsAssignmentInput, condition: ModelstrCollectionsAssignmentConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrCollectionsAssignment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrCollectionsAssignment: UpdateStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrCollectionsAssignment": updateStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var updateStrCollectionsAssignment: UpdateStrCollectionsAssignment? {
      get {
        return (snapshot["updateStrCollectionsAssignment"] as? Snapshot).flatMap { UpdateStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrCollectionsAssignment")
      }
    }

    public struct UpdateStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class DeleteStrCollectionsAssignmentMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrCollectionsAssignment($input: DeleteStrCollectionsAssignmentInput!, $condition: ModelstrCollectionsAssignmentConditionInput) {\n  deleteStrCollectionsAssignment(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public var input: DeleteStrCollectionsAssignmentInput
  public var condition: ModelstrCollectionsAssignmentConditionInput?

  public init(input: DeleteStrCollectionsAssignmentInput, condition: ModelstrCollectionsAssignmentConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrCollectionsAssignment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrCollectionsAssignment: DeleteStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrCollectionsAssignment": deleteStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var deleteStrCollectionsAssignment: DeleteStrCollectionsAssignment? {
      get {
        return (snapshot["deleteStrCollectionsAssignment"] as? Snapshot).flatMap { DeleteStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrCollectionsAssignment")
      }
    }

    public struct DeleteStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class CreateStrVideosMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrVideos($input: CreateStrVideosInput!, $condition: ModelstrVideosConditionInput) {\n  createStrVideos(input: $input, condition: $condition) {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public var input: CreateStrVideosInput
  public var condition: ModelstrVideosConditionInput?

  public init(input: CreateStrVideosInput, condition: ModelstrVideosConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrVideos", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrVideos: CreateStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrVideos": createStrVideos.flatMap { $0.snapshot }])
    }

    public var createStrVideos: CreateStrVideo? {
      get {
        return (snapshot["createStrVideos"] as? Snapshot).flatMap { CreateStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrVideos")
      }
    }

    public struct CreateStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class UpdateStrVideosMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrVideos($input: UpdateStrVideosInput!, $condition: ModelstrVideosConditionInput) {\n  updateStrVideos(input: $input, condition: $condition) {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public var input: UpdateStrVideosInput
  public var condition: ModelstrVideosConditionInput?

  public init(input: UpdateStrVideosInput, condition: ModelstrVideosConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrVideos", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrVideos: UpdateStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrVideos": updateStrVideos.flatMap { $0.snapshot }])
    }

    public var updateStrVideos: UpdateStrVideo? {
      get {
        return (snapshot["updateStrVideos"] as? Snapshot).flatMap { UpdateStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrVideos")
      }
    }

    public struct UpdateStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class DeleteStrVideosMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrVideos($input: DeleteStrVideosInput!, $condition: ModelstrVideosConditionInput) {\n  deleteStrVideos(input: $input, condition: $condition) {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public var input: DeleteStrVideosInput
  public var condition: ModelstrVideosConditionInput?

  public init(input: DeleteStrVideosInput, condition: ModelstrVideosConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrVideos", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrVideos: DeleteStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrVideos": deleteStrVideos.flatMap { $0.snapshot }])
    }

    public var deleteStrVideos: DeleteStrVideo? {
      get {
        return (snapshot["deleteStrVideos"] as? Snapshot).flatMap { DeleteStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrVideos")
      }
    }

    public struct DeleteStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class CreateStrInstancesMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrInstances($input: CreateStrInstancesInput!, $condition: ModelstrInstancesConditionInput) {\n  createStrInstances(input: $input, condition: $condition) {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public var input: CreateStrInstancesInput
  public var condition: ModelstrInstancesConditionInput?

  public init(input: CreateStrInstancesInput, condition: ModelstrInstancesConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrInstances", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrInstances: CreateStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrInstances": createStrInstances.flatMap { $0.snapshot }])
    }

    public var createStrInstances: CreateStrInstance? {
      get {
        return (snapshot["createStrInstances"] as? Snapshot).flatMap { CreateStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrInstances")
      }
    }

    public struct CreateStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class UpdateStrInstancesMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrInstances($input: UpdateStrInstancesInput!, $condition: ModelstrInstancesConditionInput) {\n  updateStrInstances(input: $input, condition: $condition) {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public var input: UpdateStrInstancesInput
  public var condition: ModelstrInstancesConditionInput?

  public init(input: UpdateStrInstancesInput, condition: ModelstrInstancesConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrInstances", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrInstances: UpdateStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrInstances": updateStrInstances.flatMap { $0.snapshot }])
    }

    public var updateStrInstances: UpdateStrInstance? {
      get {
        return (snapshot["updateStrInstances"] as? Snapshot).flatMap { UpdateStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrInstances")
      }
    }

    public struct UpdateStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class DeleteStrInstancesMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrInstances($input: DeleteStrInstancesInput!, $condition: ModelstrInstancesConditionInput) {\n  deleteStrInstances(input: $input, condition: $condition) {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public var input: DeleteStrInstancesInput
  public var condition: ModelstrInstancesConditionInput?

  public init(input: DeleteStrInstancesInput, condition: ModelstrInstancesConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrInstances", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrInstances: DeleteStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrInstances": deleteStrInstances.flatMap { $0.snapshot }])
    }

    public var deleteStrInstances: DeleteStrInstance? {
      get {
        return (snapshot["deleteStrInstances"] as? Snapshot).flatMap { DeleteStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrInstances")
      }
    }

    public struct DeleteStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class CreateStrSubjectMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrSubject($input: CreateStrSubjectInput!, $condition: ModelstrSubjectConditionInput) {\n  createStrSubject(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public var input: CreateStrSubjectInput
  public var condition: ModelstrSubjectConditionInput?

  public init(input: CreateStrSubjectInput, condition: ModelstrSubjectConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrSubject", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrSubject: CreateStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrSubject": createStrSubject.flatMap { $0.snapshot }])
    }

    public var createStrSubject: CreateStrSubject? {
      get {
        return (snapshot["createStrSubject"] as? Snapshot).flatMap { CreateStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrSubject")
      }
    }

    public struct CreateStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class UpdateStrSubjectMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrSubject($input: UpdateStrSubjectInput!, $condition: ModelstrSubjectConditionInput) {\n  updateStrSubject(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public var input: UpdateStrSubjectInput
  public var condition: ModelstrSubjectConditionInput?

  public init(input: UpdateStrSubjectInput, condition: ModelstrSubjectConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrSubject", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrSubject: UpdateStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrSubject": updateStrSubject.flatMap { $0.snapshot }])
    }

    public var updateStrSubject: UpdateStrSubject? {
      get {
        return (snapshot["updateStrSubject"] as? Snapshot).flatMap { UpdateStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrSubject")
      }
    }

    public struct UpdateStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class DeleteStrSubjectMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrSubject($input: DeleteStrSubjectInput!, $condition: ModelstrSubjectConditionInput) {\n  deleteStrSubject(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public var input: DeleteStrSubjectInput
  public var condition: ModelstrSubjectConditionInput?

  public init(input: DeleteStrSubjectInput, condition: ModelstrSubjectConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrSubject", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrSubject: DeleteStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrSubject": deleteStrSubject.flatMap { $0.snapshot }])
    }

    public var deleteStrSubject: DeleteStrSubject? {
      get {
        return (snapshot["deleteStrSubject"] as? Snapshot).flatMap { DeleteStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrSubject")
      }
    }

    public struct DeleteStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class CreateStrRatingMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrRating($input: CreateStrRatingInput!, $condition: ModelstrRatingConditionInput) {\n  createStrRating(input: $input, condition: $condition) {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public var input: CreateStrRatingInput
  public var condition: ModelstrRatingConditionInput?

  public init(input: CreateStrRatingInput, condition: ModelstrRatingConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrRating", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrRating: CreateStrRating? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrRating": createStrRating.flatMap { $0.snapshot }])
    }

    public var createStrRating: CreateStrRating? {
      get {
        return (snapshot["createStrRating"] as? Snapshot).flatMap { CreateStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrRating")
      }
    }

    public struct CreateStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class UpdateStrRatingMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrRating($input: UpdateStrRatingInput!, $condition: ModelstrRatingConditionInput) {\n  updateStrRating(input: $input, condition: $condition) {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public var input: UpdateStrRatingInput
  public var condition: ModelstrRatingConditionInput?

  public init(input: UpdateStrRatingInput, condition: ModelstrRatingConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrRating", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrRating: UpdateStrRating? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrRating": updateStrRating.flatMap { $0.snapshot }])
    }

    public var updateStrRating: UpdateStrRating? {
      get {
        return (snapshot["updateStrRating"] as? Snapshot).flatMap { UpdateStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrRating")
      }
    }

    public struct UpdateStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class DeleteStrRatingMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrRating($input: DeleteStrRatingInput!, $condition: ModelstrRatingConditionInput) {\n  deleteStrRating(input: $input, condition: $condition) {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public var input: DeleteStrRatingInput
  public var condition: ModelstrRatingConditionInput?

  public init(input: DeleteStrRatingInput, condition: ModelstrRatingConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrRating", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrRating: DeleteStrRating? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrRating": deleteStrRating.flatMap { $0.snapshot }])
    }

    public var deleteStrRating: DeleteStrRating? {
      get {
        return (snapshot["deleteStrRating"] as? Snapshot).flatMap { DeleteStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrRating")
      }
    }

    public struct DeleteStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class CreateStrConsentQuestionnaireMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrConsentQuestionnaire($input: CreateStrConsentQuestionnaireInput!, $condition: ModelstrConsentQuestionnaireConditionInput) {\n  createStrConsentQuestionnaire(input: $input, condition: $condition) {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public var input: CreateStrConsentQuestionnaireInput
  public var condition: ModelstrConsentQuestionnaireConditionInput?

  public init(input: CreateStrConsentQuestionnaireInput, condition: ModelstrConsentQuestionnaireConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrConsentQuestionnaire", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrConsentQuestionnaire: CreateStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrConsentQuestionnaire": createStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var createStrConsentQuestionnaire: CreateStrConsentQuestionnaire? {
      get {
        return (snapshot["createStrConsentQuestionnaire"] as? Snapshot).flatMap { CreateStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrConsentQuestionnaire")
      }
    }

    public struct CreateStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class UpdateStrConsentQuestionnaireMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrConsentQuestionnaire($input: UpdateStrConsentQuestionnaireInput!, $condition: ModelstrConsentQuestionnaireConditionInput) {\n  updateStrConsentQuestionnaire(input: $input, condition: $condition) {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public var input: UpdateStrConsentQuestionnaireInput
  public var condition: ModelstrConsentQuestionnaireConditionInput?

  public init(input: UpdateStrConsentQuestionnaireInput, condition: ModelstrConsentQuestionnaireConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrConsentQuestionnaire", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrConsentQuestionnaire: UpdateStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrConsentQuestionnaire": updateStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var updateStrConsentQuestionnaire: UpdateStrConsentQuestionnaire? {
      get {
        return (snapshot["updateStrConsentQuestionnaire"] as? Snapshot).flatMap { UpdateStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrConsentQuestionnaire")
      }
    }

    public struct UpdateStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class DeleteStrConsentQuestionnaireMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrConsentQuestionnaire($input: DeleteStrConsentQuestionnaireInput!, $condition: ModelstrConsentQuestionnaireConditionInput) {\n  deleteStrConsentQuestionnaire(input: $input, condition: $condition) {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public var input: DeleteStrConsentQuestionnaireInput
  public var condition: ModelstrConsentQuestionnaireConditionInput?

  public init(input: DeleteStrConsentQuestionnaireInput, condition: ModelstrConsentQuestionnaireConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrConsentQuestionnaire", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrConsentQuestionnaire: DeleteStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrConsentQuestionnaire": deleteStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var deleteStrConsentQuestionnaire: DeleteStrConsentQuestionnaire? {
      get {
        return (snapshot["deleteStrConsentQuestionnaire"] as? Snapshot).flatMap { DeleteStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrConsentQuestionnaire")
      }
    }

    public struct DeleteStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class CreateStrReviewAssignmentMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateStrReviewAssignment($input: CreateStrReviewAssignmentInput!, $condition: ModelstrReviewAssignmentConditionInput) {\n  createStrReviewAssignment(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public var input: CreateStrReviewAssignmentInput
  public var condition: ModelstrReviewAssignmentConditionInput?

  public init(input: CreateStrReviewAssignmentInput, condition: ModelstrReviewAssignmentConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createStrReviewAssignment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createStrReviewAssignment: CreateStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createStrReviewAssignment": createStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var createStrReviewAssignment: CreateStrReviewAssignment? {
      get {
        return (snapshot["createStrReviewAssignment"] as? Snapshot).flatMap { CreateStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createStrReviewAssignment")
      }
    }

    public struct CreateStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}

public final class UpdateStrReviewAssignmentMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStrReviewAssignment($input: UpdateStrReviewAssignmentInput!, $condition: ModelstrReviewAssignmentConditionInput) {\n  updateStrReviewAssignment(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public var input: UpdateStrReviewAssignmentInput
  public var condition: ModelstrReviewAssignmentConditionInput?

  public init(input: UpdateStrReviewAssignmentInput, condition: ModelstrReviewAssignmentConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStrReviewAssignment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStrReviewAssignment: UpdateStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStrReviewAssignment": updateStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var updateStrReviewAssignment: UpdateStrReviewAssignment? {
      get {
        return (snapshot["updateStrReviewAssignment"] as? Snapshot).flatMap { UpdateStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateStrReviewAssignment")
      }
    }

    public struct UpdateStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}

public final class DeleteStrReviewAssignmentMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteStrReviewAssignment($input: DeleteStrReviewAssignmentInput!, $condition: ModelstrReviewAssignmentConditionInput) {\n  deleteStrReviewAssignment(input: $input, condition: $condition) {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public var input: DeleteStrReviewAssignmentInput
  public var condition: ModelstrReviewAssignmentConditionInput?

  public init(input: DeleteStrReviewAssignmentInput, condition: ModelstrReviewAssignmentConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteStrReviewAssignment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteStrReviewAssignment: DeleteStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteStrReviewAssignment": deleteStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var deleteStrReviewAssignment: DeleteStrReviewAssignment? {
      get {
        return (snapshot["deleteStrReviewAssignment"] as? Snapshot).flatMap { DeleteStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteStrReviewAssignment")
      }
    }

    public struct DeleteStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}

public final class GetStrCollectionsQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrCollections($id: ID!, $name: String!) {\n  getStrCollections(id: $id, name: $name) {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public var id: GraphQLID
  public var name: String

  public init(id: GraphQLID, name: String) {
    self.id = id
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrCollections", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name")], type: .object(GetStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrCollections: GetStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrCollections": getStrCollections.flatMap { $0.snapshot }])
    }

    public var getStrCollections: GetStrCollection? {
      get {
        return (snapshot["getStrCollections"] as? Snapshot).flatMap { GetStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrCollections")
      }
    }

    public struct GetStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class ListStrCollectionssQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrCollectionss($id: ID, $name: ModelStringKeyConditionInput, $filter: ModelstrCollectionsFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrCollectionss(id: $id, name: $name, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      project_id\n      training_video_url\n      training_video_json_url\n      training_videos\n      training_videos_low\n      collection_description\n      object_id\n      objects_list\n      activities\n      activity_short_names\n      created_date\n      updated_date\n      collection_id\n      default_object\n      active\n    }\n    nextToken\n  }\n}"

  public var id: GraphQLID?
  public var name: ModelStringKeyConditionInput?
  public var filter: ModelstrCollectionsFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: GraphQLID? = nil, name: ModelStringKeyConditionInput? = nil, filter: ModelstrCollectionsFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.name = name
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrCollectionss", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrCollectionss.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrCollectionss: ListStrCollectionss? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrCollectionss": listStrCollectionss.flatMap { $0.snapshot }])
    }

    public var listStrCollectionss: ListStrCollectionss? {
      get {
        return (snapshot["listStrCollectionss"] as? Snapshot).flatMap { ListStrCollectionss(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrCollectionss")
      }
    }

    public struct ListStrCollectionss: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrCollectionsConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrCollectionsConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strCollections"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("training_video_url", type: .scalar(String.self)),
          GraphQLField("training_video_json_url", type: .scalar(String.self)),
          GraphQLField("training_videos", type: .scalar(String.self)),
          GraphQLField("training_videos_low", type: .scalar(String.self)),
          GraphQLField("collection_description", type: .scalar(String.self)),
          GraphQLField("object_id", type: .scalar(String.self)),
          GraphQLField("objects_list", type: .scalar(String.self)),
          GraphQLField("activities", type: .scalar(String.self)),
          GraphQLField("activity_short_names", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("default_object", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
          self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var trainingVideoUrl: String? {
          get {
            return snapshot["training_video_url"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_video_url")
          }
        }

        public var trainingVideoJsonUrl: String? {
          get {
            return snapshot["training_video_json_url"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_video_json_url")
          }
        }

        public var trainingVideos: String? {
          get {
            return snapshot["training_videos"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos")
          }
        }

        public var trainingVideosLow: String? {
          get {
            return snapshot["training_videos_low"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos_low")
          }
        }

        public var collectionDescription: String? {
          get {
            return snapshot["collection_description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_description")
          }
        }

        public var objectId: String? {
          get {
            return snapshot["object_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_id")
          }
        }

        public var objectsList: String? {
          get {
            return snapshot["objects_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "objects_list")
          }
        }

        public var activities: String? {
          get {
            return snapshot["activities"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities")
          }
        }

        public var activityShortNames: String? {
          get {
            return snapshot["activity_short_names"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_short_names")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var defaultObject: String? {
          get {
            return snapshot["default_object"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "default_object")
          }
        }

        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }
      }
    }
  }
}

public final class GetStrProjectsQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrProjects($id: ID!, $name: String!) {\n  getStrProjects(id: $id, name: $name) {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public var id: GraphQLID
  public var name: String

  public init(id: GraphQLID, name: String) {
    self.id = id
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrProjects", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name")], type: .object(GetStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrProjects: GetStrProject? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrProjects": getStrProjects.flatMap { $0.snapshot }])
    }

    public var getStrProjects: GetStrProject? {
      get {
        return (snapshot["getStrProjects"] as? Snapshot).flatMap { GetStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrProjects")
      }
    }

    public struct GetStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class ListStrProjectssQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrProjectss($id: ID, $name: ModelStringKeyConditionInput, $filter: ModelstrProjectsFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrProjectss(id: $id, name: $name, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      activity_count\n      created_date\n      updated_date\n      project_id\n    }\n    nextToken\n  }\n}"

  public var id: GraphQLID?
  public var name: ModelStringKeyConditionInput?
  public var filter: ModelstrProjectsFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: GraphQLID? = nil, name: ModelStringKeyConditionInput? = nil, filter: ModelstrProjectsFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.name = name
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrProjectss", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrProjectss.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrProjectss: ListStrProjectss? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrProjectss": listStrProjectss.flatMap { $0.snapshot }])
    }

    public var listStrProjectss: ListStrProjectss? {
      get {
        return (snapshot["listStrProjectss"] as? Snapshot).flatMap { ListStrProjectss(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrProjectss")
      }
    }

    public struct ListStrProjectss: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrProjectsConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrProjectsConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strProjects"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("activity_count", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
          self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var activityCount: String? {
          get {
            return snapshot["activity_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_count")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }
      }
    }
  }
}

public final class GetStrActivitiesQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrActivities($id: ID!, $name: String!) {\n  getStrActivities(id: $id, name: $name) {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public var id: GraphQLID
  public var name: String

  public init(id: GraphQLID, name: String) {
    self.id = id
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrActivities", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name")], type: .object(GetStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrActivities: GetStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrActivities": getStrActivities.flatMap { $0.snapshot }])
    }

    public var getStrActivities: GetStrActivity? {
      get {
        return (snapshot["getStrActivities"] as? Snapshot).flatMap { GetStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrActivities")
      }
    }

    public struct GetStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class ListStrActivitiessQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrActivitiess($id: ID, $name: ModelStringKeyConditionInput, $filter: ModelstrActivitiesFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrActivitiess(id: $id, name: $name, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      activity_id\n      name\n      collection_id\n      project_id\n      program_id\n      counts\n      short_name\n      created_date\n      updated_date\n    }\n    nextToken\n  }\n}"

  public var id: GraphQLID?
  public var name: ModelStringKeyConditionInput?
  public var filter: ModelstrActivitiesFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: GraphQLID? = nil, name: ModelStringKeyConditionInput? = nil, filter: ModelstrActivitiesFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.name = name
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrActivitiess", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrActivitiess.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrActivitiess: ListStrActivitiess? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrActivitiess": listStrActivitiess.flatMap { $0.snapshot }])
    }

    public var listStrActivitiess: ListStrActivitiess? {
      get {
        return (snapshot["listStrActivitiess"] as? Snapshot).flatMap { ListStrActivitiess(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrActivitiess")
      }
    }

    public struct ListStrActivitiess: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrActivitiesConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrActivitiesConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strActivities"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("activity_id", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("counts", type: .scalar(String.self)),
          GraphQLField("short_name", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
          self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var activityId: String? {
          get {
            return snapshot["activity_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var counts: String? {
          get {
            return snapshot["counts"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "counts")
          }
        }

        public var shortName: String? {
          get {
            return snapshot["short_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "short_name")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }
      }
    }
  }
}

public final class GetStrProgramQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrProgram($id: String!, $name: String!) {\n  getStrProgram(id: $id, name: $name) {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public var id: String
  public var name: String

  public init(id: String, name: String) {
    self.id = id
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrProgram", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name")], type: .object(GetStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrProgram: GetStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrProgram": getStrProgram.flatMap { $0.snapshot }])
    }

    public var getStrProgram: GetStrProgram? {
      get {
        return (snapshot["getStrProgram"] as? Snapshot).flatMap { GetStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrProgram")
      }
    }

    public struct GetStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class ListStrProgramsQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrPrograms($id: String, $name: ModelStringKeyConditionInput, $filter: ModelstrProgramFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrPrograms(id: $id, name: $name, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      program_id\n      client\n      created_date\n    }\n    nextToken\n  }\n}"

  public var id: String?
  public var name: ModelStringKeyConditionInput?
  public var filter: ModelstrProgramFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: String? = nil, name: ModelStringKeyConditionInput? = nil, filter: ModelstrProgramFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.name = name
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "name": name, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrPrograms", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrPrograms: ListStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrPrograms": listStrPrograms.flatMap { $0.snapshot }])
    }

    public var listStrPrograms: ListStrProgram? {
      get {
        return (snapshot["listStrPrograms"] as? Snapshot).flatMap { ListStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrPrograms")
      }
    }

    public struct ListStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrProgramConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strProgram"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("client", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
          self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var client: String? {
          get {
            return snapshot["client"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "client")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }
      }
    }
  }
}

public final class GetStrCollectorQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrCollector($collector_id: ID!, $collector_email: String!) {\n  getStrCollector(collector_id: $collector_id, collector_email: $collector_email) {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public var collector_id: GraphQLID
  public var collector_email: String

  public init(collector_id: GraphQLID, collector_email: String) {
    self.collector_id = collector_id
    self.collector_email = collector_email
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "collector_email": collector_email]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrCollector", arguments: ["collector_id": GraphQLVariable("collector_id"), "collector_email": GraphQLVariable("collector_email")], type: .object(GetStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrCollector: GetStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrCollector": getStrCollector.flatMap { $0.snapshot }])
    }

    public var getStrCollector: GetStrCollector? {
      get {
        return (snapshot["getStrCollector"] as? Snapshot).flatMap { GetStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrCollector")
      }
    }

    public struct GetStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class ListStrCollectorsQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrCollectors($collector_id: ID, $collector_email: ModelStringKeyConditionInput, $filter: ModelstrCollectorFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrCollectors(collector_id: $collector_id, collector_email: $collector_email, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      collector_id\n      collector_email\n      first_name\n      last_name\n      password\n      query_attribute\n      is_consented\n      is_dropbox_integrated\n      is_paypal_integrated\n      dropbox_token\n      paypal_email_id\n      uploaded_count\n      verified_count\n      not_verified_count\n      consented_count\n      authorized\n      outstanding_amount\n      collector_score\n      reviewer_score\n    }\n    nextToken\n  }\n}"

  public var collector_id: GraphQLID?
  public var collector_email: ModelStringKeyConditionInput?
  public var filter: ModelstrCollectorFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(collector_id: GraphQLID? = nil, collector_email: ModelStringKeyConditionInput? = nil, filter: ModelstrCollectorFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.collector_id = collector_id
    self.collector_email = collector_email
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "collector_email": collector_email, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrCollectors", arguments: ["collector_id": GraphQLVariable("collector_id"), "collector_email": GraphQLVariable("collector_email"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrCollectors: ListStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrCollectors": listStrCollectors.flatMap { $0.snapshot }])
    }

    public var listStrCollectors: ListStrCollector? {
      get {
        return (snapshot["listStrCollectors"] as? Snapshot).flatMap { ListStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrCollectors")
      }
    }

    public struct ListStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrCollectorConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrCollectorConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strCollector"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("is_consented", type: .scalar(Bool.self)),
          GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
          GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
          GraphQLField("dropbox_token", type: .scalar(String.self)),
          GraphQLField("paypal_email_id", type: .scalar(String.self)),
          GraphQLField("uploaded_count", type: .scalar(String.self)),
          GraphQLField("verified_count", type: .scalar(String.self)),
          GraphQLField("not_verified_count", type: .scalar(String.self)),
          GraphQLField("consented_count", type: .scalar(String.self)),
          GraphQLField("authorized", type: .scalar(String.self)),
          GraphQLField("outstanding_amount", type: .scalar(String.self)),
          GraphQLField("collector_score", type: .scalar(String.self)),
          GraphQLField("reviewer_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
          self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectorEmail: String {
          get {
            return snapshot["collector_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_email")
          }
        }

        public var firstName: String {
          get {
            return snapshot["first_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "first_name")
          }
        }

        public var lastName: String {
          get {
            return snapshot["last_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_name")
          }
        }

        public var password: String? {
          get {
            return snapshot["password"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "password")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var isConsented: Bool? {
          get {
            return snapshot["is_consented"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_consented")
          }
        }

        public var isDropboxIntegrated: Bool? {
          get {
            return snapshot["is_dropbox_integrated"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
          }
        }

        public var isPaypalIntegrated: Bool? {
          get {
            return snapshot["is_paypal_integrated"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
          }
        }

        public var dropboxToken: String? {
          get {
            return snapshot["dropbox_token"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "dropbox_token")
          }
        }

        public var paypalEmailId: String? {
          get {
            return snapshot["paypal_email_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "paypal_email_id")
          }
        }

        public var uploadedCount: String? {
          get {
            return snapshot["uploaded_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_count")
          }
        }

        public var verifiedCount: String? {
          get {
            return snapshot["verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified_count")
          }
        }

        public var notVerifiedCount: String? {
          get {
            return snapshot["not_verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "not_verified_count")
          }
        }

        public var consentedCount: String? {
          get {
            return snapshot["consented_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consented_count")
          }
        }

        public var authorized: String? {
          get {
            return snapshot["authorized"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "authorized")
          }
        }

        public var outstandingAmount: String? {
          get {
            return snapshot["outstanding_amount"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "outstanding_amount")
          }
        }

        public var collectorScore: String? {
          get {
            return snapshot["collector_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_score")
          }
        }

        public var reviewerScore: String? {
          get {
            return snapshot["reviewer_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_score")
          }
        }
      }
    }
  }
}

public final class GetStrCollectionsAssignmentQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrCollectionsAssignment($collector_id: ID!, $collection_id: String!) {\n  getStrCollectionsAssignment(collector_id: $collector_id, collection_id: $collection_id) {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public var collector_id: GraphQLID
  public var collection_id: String

  public init(collector_id: GraphQLID, collection_id: String) {
    self.collector_id = collector_id
    self.collection_id = collection_id
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "collection_id": collection_id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrCollectionsAssignment", arguments: ["collector_id": GraphQLVariable("collector_id"), "collection_id": GraphQLVariable("collection_id")], type: .object(GetStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrCollectionsAssignment: GetStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrCollectionsAssignment": getStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var getStrCollectionsAssignment: GetStrCollectionsAssignment? {
      get {
        return (snapshot["getStrCollectionsAssignment"] as? Snapshot).flatMap { GetStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrCollectionsAssignment")
      }
    }

    public struct GetStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class ListStrCollectionsAssignmentsQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrCollectionsAssignments($collector_id: ID, $collection_id: ModelStringKeyConditionInput, $filter: ModelstrCollectionsAssignmentFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrCollectionsAssignments(collector_id: $collector_id, collection_id: $collection_id, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      collector_id\n      collector_email\n      collection_name\n      project_id\n      project_name\n      program_id\n      program_name\n      training_video_url\n      training_video_json_url\n      training_videos\n      training_videos_low\n      collection_description\n      objects_list\n      collection_id\n      default_object\n      activities\n      training_videos_overlay\n      activity_short_names\n      active\n      isTrainingVideoEnabled\n      isConsentRequired\n      consent_overlay_text\n    }\n    nextToken\n  }\n}"

  public var collector_id: GraphQLID?
  public var collection_id: ModelStringKeyConditionInput?
  public var filter: ModelstrCollectionsAssignmentFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(collector_id: GraphQLID? = nil, collection_id: ModelStringKeyConditionInput? = nil, filter: ModelstrCollectionsAssignmentFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.collector_id = collector_id
    self.collection_id = collection_id
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "collection_id": collection_id, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrCollectionsAssignments", arguments: ["collector_id": GraphQLVariable("collector_id"), "collection_id": GraphQLVariable("collection_id"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrCollectionsAssignments: ListStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrCollectionsAssignments": listStrCollectionsAssignments.flatMap { $0.snapshot }])
    }

    public var listStrCollectionsAssignments: ListStrCollectionsAssignment? {
      get {
        return (snapshot["listStrCollectionsAssignments"] as? Snapshot).flatMap { ListStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrCollectionsAssignments")
      }
    }

    public struct ListStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrCollectionsAssignmentConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrCollectionsAssignmentConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strCollectionsAssignment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("collector_email", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("training_video_url", type: .scalar(String.self)),
          GraphQLField("training_video_json_url", type: .scalar(String.self)),
          GraphQLField("training_videos", type: .scalar(String.self)),
          GraphQLField("training_videos_low", type: .scalar(String.self)),
          GraphQLField("collection_description", type: .scalar(String.self)),
          GraphQLField("objects_list", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("default_object", type: .scalar(String.self)),
          GraphQLField("activities", type: .scalar(String.self)),
          GraphQLField("training_videos_overlay", type: .scalar(String.self)),
          GraphQLField("activity_short_names", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
          GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
          GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
          GraphQLField("consent_overlay_text", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
          self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectorEmail: String? {
          get {
            return snapshot["collector_email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_email")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var trainingVideoUrl: String? {
          get {
            return snapshot["training_video_url"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_video_url")
          }
        }

        public var trainingVideoJsonUrl: String? {
          get {
            return snapshot["training_video_json_url"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_video_json_url")
          }
        }

        public var trainingVideos: String? {
          get {
            return snapshot["training_videos"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos")
          }
        }

        public var trainingVideosLow: String? {
          get {
            return snapshot["training_videos_low"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos_low")
          }
        }

        public var collectionDescription: String? {
          get {
            return snapshot["collection_description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_description")
          }
        }

        public var objectsList: String? {
          get {
            return snapshot["objects_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "objects_list")
          }
        }

        public var collectionId: String {
          get {
            return snapshot["collection_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var defaultObject: String? {
          get {
            return snapshot["default_object"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "default_object")
          }
        }

        public var activities: String? {
          get {
            return snapshot["activities"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities")
          }
        }

        public var trainingVideosOverlay: String? {
          get {
            return snapshot["training_videos_overlay"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos_overlay")
          }
        }

        public var activityShortNames: String? {
          get {
            return snapshot["activity_short_names"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_short_names")
          }
        }

        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }

        public var isTrainingVideoEnabled: Bool? {
          get {
            return snapshot["isTrainingVideoEnabled"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
          }
        }

        public var isConsentRequired: Bool? {
          get {
            return snapshot["isConsentRequired"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isConsentRequired")
          }
        }

        public var consentOverlayText: String? {
          get {
            return snapshot["consent_overlay_text"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_overlay_text")
          }
        }
      }
    }
  }
}

public final class GetStrVideosQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrVideos($id: ID!, $uploaded_date: String!) {\n  getStrVideos(id: $id, uploaded_date: $uploaded_date) {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public var id: GraphQLID
  public var uploaded_date: String

  public init(id: GraphQLID, uploaded_date: String) {
    self.id = id
    self.uploaded_date = uploaded_date
  }

  public var variables: GraphQLMap? {
    return ["id": id, "uploaded_date": uploaded_date]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrVideos", arguments: ["id": GraphQLVariable("id"), "uploaded_date": GraphQLVariable("uploaded_date")], type: .object(GetStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrVideos: GetStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrVideos": getStrVideos.flatMap { $0.snapshot }])
    }

    public var getStrVideos: GetStrVideo? {
      get {
        return (snapshot["getStrVideos"] as? Snapshot).flatMap { GetStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrVideos")
      }
    }

    public struct GetStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class ListStrVideossQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrVideoss($id: ID, $uploaded_date: ModelStringKeyConditionInput, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrVideoss(id: $id, uploaded_date: $uploaded_date, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var id: GraphQLID?
  public var uploaded_date: ModelStringKeyConditionInput?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: GraphQLID? = nil, uploaded_date: ModelStringKeyConditionInput? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.uploaded_date = uploaded_date
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "uploaded_date": uploaded_date, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrVideoss", arguments: ["id": GraphQLVariable("id"), "uploaded_date": GraphQLVariable("uploaded_date"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrVideoss.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrVideoss: ListStrVideoss? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrVideoss": listStrVideoss.flatMap { $0.snapshot }])
    }

    public var listStrVideoss: ListStrVideoss? {
      get {
        return (snapshot["listStrVideoss"] as? Snapshot).flatMap { ListStrVideoss(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrVideoss")
      }
    }

    public struct ListStrVideoss: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class GetStrInstancesQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrInstances($id: String!, $instance_id: String!) {\n  getStrInstances(id: $id, instance_id: $instance_id) {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public var id: String
  public var instance_id: String

  public init(id: String, instance_id: String) {
    self.id = id
    self.instance_id = instance_id
  }

  public var variables: GraphQLMap? {
    return ["id": id, "instance_id": instance_id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrInstances", arguments: ["id": GraphQLVariable("id"), "instance_id": GraphQLVariable("instance_id")], type: .object(GetStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrInstances: GetStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrInstances": getStrInstances.flatMap { $0.snapshot }])
    }

    public var getStrInstances: GetStrInstance? {
      get {
        return (snapshot["getStrInstances"] as? Snapshot).flatMap { GetStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrInstances")
      }
    }

    public struct GetStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class ListStrInstancessQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrInstancess($id: String, $instance_id: ModelStringKeyConditionInput, $filter: ModelstrInstancesFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrInstancess(id: $id, instance_id: $instance_id, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      instance_id\n      activity_name\n      avg_bbox_height\n      avg_bbox_size\n      avg_bbox_width\n      bad_alignament_score\n      bad_box_big_score\n      bad_box_score\n      bad_box_small_score\n      bad_label_score\n      bad_timing_score\n      bad_video_score\n      bad_viewpoint_score\n      collector_id\n      collection_id\n      end_frame\n      program_id\n      project_id\n      rating_score\n      review_reason\n      s3_path\n      start_frame\n      subject_id\n      created_date\n      updated_date\n      uploaded_date\n      verified\n      video_id\n      week\n      need_review_score\n    }\n    nextToken\n  }\n}"

  public var id: String?
  public var instance_id: ModelStringKeyConditionInput?
  public var filter: ModelstrInstancesFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: String? = nil, instance_id: ModelStringKeyConditionInput? = nil, filter: ModelstrInstancesFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.instance_id = instance_id
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "instance_id": instance_id, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrInstancess", arguments: ["id": GraphQLVariable("id"), "instance_id": GraphQLVariable("instance_id"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrInstancess.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrInstancess: ListStrInstancess? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrInstancess": listStrInstancess.flatMap { $0.snapshot }])
    }

    public var listStrInstancess: ListStrInstancess? {
      get {
        return (snapshot["listStrInstancess"] as? Snapshot).flatMap { ListStrInstancess(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrInstancess")
      }
    }

    public struct ListStrInstancess: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrInstancesConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrInstancesConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strInstances"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("avg_bbox_height", type: .scalar(String.self)),
          GraphQLField("avg_bbox_size", type: .scalar(String.self)),
          GraphQLField("avg_bbox_width", type: .scalar(String.self)),
          GraphQLField("bad_alignament_score", type: .scalar(String.self)),
          GraphQLField("bad_box_big_score", type: .scalar(String.self)),
          GraphQLField("bad_box_score", type: .scalar(String.self)),
          GraphQLField("bad_box_small_score", type: .scalar(String.self)),
          GraphQLField("bad_label_score", type: .scalar(String.self)),
          GraphQLField("bad_timing_score", type: .scalar(String.self)),
          GraphQLField("bad_video_score", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
          GraphQLField("collector_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("end_frame", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("review_reason", type: .scalar(String.self)),
          GraphQLField("s3_path", type: .scalar(String.self)),
          GraphQLField("start_frame", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("need_review_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
          self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var instanceId: String {
          get {
            return snapshot["instance_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_id")
          }
        }

        public var activityName: String {
          get {
            return snapshot["activity_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_name")
          }
        }

        public var avgBboxHeight: String? {
          get {
            return snapshot["avg_bbox_height"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_height")
          }
        }

        public var avgBboxSize: String? {
          get {
            return snapshot["avg_bbox_size"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_size")
          }
        }

        public var avgBboxWidth: String? {
          get {
            return snapshot["avg_bbox_width"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_width")
          }
        }

        public var badAlignamentScore: String? {
          get {
            return snapshot["bad_alignament_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignament_score")
          }
        }

        public var badBoxBigScore: String? {
          get {
            return snapshot["bad_box_big_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big_score")
          }
        }

        public var badBoxScore: String? {
          get {
            return snapshot["bad_box_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_score")
          }
        }

        public var badBoxSmallScore: String? {
          get {
            return snapshot["bad_box_small_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small_score")
          }
        }

        public var badLabelScore: String? {
          get {
            return snapshot["bad_label_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label_score")
          }
        }

        public var badTimingScore: String? {
          get {
            return snapshot["bad_timing_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing_score")
          }
        }

        public var badVideoScore: String? {
          get {
            return snapshot["bad_video_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video_score")
          }
        }

        public var badViewpointScore: String? {
          get {
            return snapshot["bad_viewpoint_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
          }
        }

        public var collectorId: String? {
          get {
            return snapshot["collector_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var endFrame: String? {
          get {
            return snapshot["end_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "end_frame")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var reviewReason: String? {
          get {
            return snapshot["review_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_reason")
          }
        }

        public var s3Path: String? {
          get {
            return snapshot["s3_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3_path")
          }
        }

        public var startFrame: String? {
          get {
            return snapshot["start_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "start_frame")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var needReviewScore: String? {
          get {
            return snapshot["need_review_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "need_review_score")
          }
        }
      }
    }
  }
}

public final class GetStrSubjectQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrSubject($collector_email: String!, $subject_email: String!) {\n  getStrSubject(collector_email: $collector_email, subject_email: $subject_email) {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public var collector_email: String
  public var subject_email: String

  public init(collector_email: String, subject_email: String) {
    self.collector_email = collector_email
    self.subject_email = subject_email
  }

  public var variables: GraphQLMap? {
    return ["collector_email": collector_email, "subject_email": subject_email]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrSubject", arguments: ["collector_email": GraphQLVariable("collector_email"), "subject_email": GraphQLVariable("subject_email")], type: .object(GetStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrSubject: GetStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrSubject": getStrSubject.flatMap { $0.snapshot }])
    }

    public var getStrSubject: GetStrSubject? {
      get {
        return (snapshot["getStrSubject"] as? Snapshot).flatMap { GetStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrSubject")
      }
    }

    public struct GetStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class ListStrSubjectsQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrSubjects($collector_email: String, $subject_email: ModelStringKeyConditionInput, $filter: ModelstrSubjectFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrSubjects(collector_email: $collector_email, subject_email: $subject_email, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      collector_id\n      uuid\n      subject_email\n      collector_email\n      last_activity_date\n      consent_response\n      consent_video_id\n      beard\n      ethnicity\n      eye_glasses\n      first_name\n      last_name\n      gender\n      hair_color\n      hair_length\n      uploaded_count\n      verified_count\n      created_date\n      updated_date\n      status\n      count\n      program_id\n      program_name\n      project_id\n      project_name\n    }\n    nextToken\n  }\n}"

  public var collector_email: String?
  public var subject_email: ModelStringKeyConditionInput?
  public var filter: ModelstrSubjectFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(collector_email: String? = nil, subject_email: ModelStringKeyConditionInput? = nil, filter: ModelstrSubjectFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.collector_email = collector_email
    self.subject_email = subject_email
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["collector_email": collector_email, "subject_email": subject_email, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrSubjects", arguments: ["collector_email": GraphQLVariable("collector_email"), "subject_email": GraphQLVariable("subject_email"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrSubjects: ListStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrSubjects": listStrSubjects.flatMap { $0.snapshot }])
    }

    public var listStrSubjects: ListStrSubject? {
      get {
        return (snapshot["listStrSubjects"] as? Snapshot).flatMap { ListStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrSubjects")
      }
    }

    public struct ListStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrSubjectConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrSubjectConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strSubject"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("uuid", type: .scalar(String.self)),
          GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("last_activity_date", type: .scalar(String.self)),
          GraphQLField("consent_response", type: .scalar(String.self)),
          GraphQLField("consent_video_id", type: .scalar(String.self)),
          GraphQLField("beard", type: .scalar(String.self)),
          GraphQLField("ethnicity", type: .scalar(String.self)),
          GraphQLField("eye_glasses", type: .scalar(String.self)),
          GraphQLField("first_name", type: .scalar(String.self)),
          GraphQLField("last_name", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("hair_color", type: .scalar(String.self)),
          GraphQLField("hair_length", type: .scalar(String.self)),
          GraphQLField("uploaded_count", type: .scalar(String.self)),
          GraphQLField("verified_count", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("status", type: .nonNull(.scalar(String.self))),
          GraphQLField("count", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
          self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var uuid: String? {
          get {
            return snapshot["uuid"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uuid")
          }
        }

        public var subjectEmail: String {
          get {
            return snapshot["subject_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_email")
          }
        }

        public var collectorEmail: String {
          get {
            return snapshot["collector_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_email")
          }
        }

        public var lastActivityDate: String? {
          get {
            return snapshot["last_activity_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_activity_date")
          }
        }

        public var consentResponse: String? {
          get {
            return snapshot["consent_response"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_response")
          }
        }

        public var consentVideoId: String? {
          get {
            return snapshot["consent_video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_video_id")
          }
        }

        public var beard: String? {
          get {
            return snapshot["beard"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "beard")
          }
        }

        public var ethnicity: String? {
          get {
            return snapshot["ethnicity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ethnicity")
          }
        }

        public var eyeGlasses: String? {
          get {
            return snapshot["eye_glasses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "eye_glasses")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["first_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "first_name")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["last_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_name")
          }
        }

        public var gender: String? {
          get {
            return snapshot["gender"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var hairColor: String? {
          get {
            return snapshot["hair_color"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hair_color")
          }
        }

        public var hairLength: String? {
          get {
            return snapshot["hair_length"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hair_length")
          }
        }

        public var uploadedCount: String? {
          get {
            return snapshot["uploaded_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_count")
          }
        }

        public var verifiedCount: String? {
          get {
            return snapshot["verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified_count")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var status: String {
          get {
            return snapshot["status"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var count: String? {
          get {
            return snapshot["count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "count")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }
      }
    }
  }
}

public final class GetStrRatingQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrRating($id: String!, $reviewer_id: String!) {\n  getStrRating(id: $id, reviewer_id: $reviewer_id) {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public var id: String
  public var reviewer_id: String

  public init(id: String, reviewer_id: String) {
    self.id = id
    self.reviewer_id = reviewer_id
  }

  public var variables: GraphQLMap? {
    return ["id": id, "reviewer_id": reviewer_id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrRating", arguments: ["id": GraphQLVariable("id"), "reviewer_id": GraphQLVariable("reviewer_id")], type: .object(GetStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrRating: GetStrRating? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrRating": getStrRating.flatMap { $0.snapshot }])
    }

    public var getStrRating: GetStrRating? {
      get {
        return (snapshot["getStrRating"] as? Snapshot).flatMap { GetStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrRating")
      }
    }

    public struct GetStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class ListStrRatingsQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrRatings($id: String, $reviewer_id: ModelStringKeyConditionInput, $filter: ModelstrRatingFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrRatings(id: $id, reviewer_id: $reviewer_id, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      reviewer_id\n      up\n      video_id\n      week\n      bad_alignment\n      bad_box_big\n      bad_box_small\n      bad_label\n      bad_timing\n      bad_video\n      bad_viewpoint\n      awkward_scene\n      bad_visibility\n      project_id\n      program_id\n      project_name\n      program_name\n      collection_name\n      collection_id\n      rating_responses\n      bad_diversity\n      submitted_time\n      video_uploaded_date\n    }\n    nextToken\n  }\n}"

  public var id: String?
  public var reviewer_id: ModelStringKeyConditionInput?
  public var filter: ModelstrRatingFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(id: String? = nil, reviewer_id: ModelStringKeyConditionInput? = nil, filter: ModelstrRatingFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.id = id
    self.reviewer_id = reviewer_id
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["id": id, "reviewer_id": reviewer_id, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrRatings", arguments: ["id": GraphQLVariable("id"), "reviewer_id": GraphQLVariable("reviewer_id"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrRatings: ListStrRating? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrRatings": listStrRatings.flatMap { $0.snapshot }])
    }

    public var listStrRatings: ListStrRating? {
      get {
        return (snapshot["listStrRatings"] as? Snapshot).flatMap { ListStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrRatings")
      }
    }

    public struct ListStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrRatingConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrRatingConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strRating"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("up", type: .scalar(Int.self)),
          GraphQLField("video_id", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("bad_alignment", type: .scalar(String.self)),
          GraphQLField("bad_box_big", type: .scalar(String.self)),
          GraphQLField("bad_box_small", type: .scalar(String.self)),
          GraphQLField("bad_label", type: .scalar(String.self)),
          GraphQLField("bad_timing", type: .scalar(String.self)),
          GraphQLField("bad_video", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint", type: .scalar(String.self)),
          GraphQLField("awkward_scene", type: .scalar(String.self)),
          GraphQLField("bad_visibility", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("rating_responses", type: .scalar(String.self)),
          GraphQLField("bad_diversity", type: .scalar(String.self)),
          GraphQLField("submitted_time", type: .scalar(String.self)),
          GraphQLField("video_uploaded_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
          self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reviewerId: String {
          get {
            return snapshot["reviewer_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_id")
          }
        }

        public var up: Int? {
          get {
            return snapshot["up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "up")
          }
        }

        public var videoId: String? {
          get {
            return snapshot["video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var badAlignment: String? {
          get {
            return snapshot["bad_alignment"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignment")
          }
        }

        public var badBoxBig: String? {
          get {
            return snapshot["bad_box_big"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big")
          }
        }

        public var badBoxSmall: String? {
          get {
            return snapshot["bad_box_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small")
          }
        }

        public var badLabel: String? {
          get {
            return snapshot["bad_label"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label")
          }
        }

        public var badTiming: String? {
          get {
            return snapshot["bad_timing"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing")
          }
        }

        public var badVideo: String? {
          get {
            return snapshot["bad_video"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video")
          }
        }

        public var badViewpoint: String? {
          get {
            return snapshot["bad_viewpoint"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint")
          }
        }

        public var awkwardScene: String? {
          get {
            return snapshot["awkward_scene"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "awkward_scene")
          }
        }

        public var badVisibility: String? {
          get {
            return snapshot["bad_visibility"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_visibility")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var ratingResponses: String? {
          get {
            return snapshot["rating_responses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_responses")
          }
        }

        public var badDiversity: String? {
          get {
            return snapshot["bad_diversity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_diversity")
          }
        }

        public var submittedTime: String? {
          get {
            return snapshot["submitted_time"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "submitted_time")
          }
        }

        public var videoUploadedDate: String? {
          get {
            return snapshot["video_uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_uploaded_date")
          }
        }
      }
    }
  }
}

public final class GetStrConsentQuestionnaireQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrConsentQuestionnaire($project_id: String!, $id: ID!) {\n  getStrConsentQuestionnaire(project_id: $project_id, id: $id) {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public var project_id: String
  public var id: GraphQLID

  public init(project_id: String, id: GraphQLID) {
    self.project_id = project_id
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["project_id": project_id, "id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrConsentQuestionnaire", arguments: ["project_id": GraphQLVariable("project_id"), "id": GraphQLVariable("id")], type: .object(GetStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrConsentQuestionnaire: GetStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrConsentQuestionnaire": getStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var getStrConsentQuestionnaire: GetStrConsentQuestionnaire? {
      get {
        return (snapshot["getStrConsentQuestionnaire"] as? Snapshot).flatMap { GetStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrConsentQuestionnaire")
      }
    }

    public struct GetStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class ListStrConsentQuestionnairesQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrConsentQuestionnaires($project_id: String, $id: ModelIDKeyConditionInput, $filter: ModelstrConsentQuestionnaireFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrConsentQuestionnaires(project_id: $project_id, id: $id, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      id\n      consent_id\n      short_description\n      long_description\n      agree_question_id\n      disagree_question_id\n      category\n      category_response\n      created_date\n      updated_date\n      program_id\n      project_id\n      collection_id\n      collection_name\n      more_info\n      consent_question_type\n    }\n    nextToken\n  }\n}"

  public var project_id: String?
  public var id: ModelIDKeyConditionInput?
  public var filter: ModelstrConsentQuestionnaireFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(project_id: String? = nil, id: ModelIDKeyConditionInput? = nil, filter: ModelstrConsentQuestionnaireFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.project_id = project_id
    self.id = id
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["project_id": project_id, "id": id, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrConsentQuestionnaires", arguments: ["project_id": GraphQLVariable("project_id"), "id": GraphQLVariable("id"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrConsentQuestionnaires: ListStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrConsentQuestionnaires": listStrConsentQuestionnaires.flatMap { $0.snapshot }])
    }

    public var listStrConsentQuestionnaires: ListStrConsentQuestionnaire? {
      get {
        return (snapshot["listStrConsentQuestionnaires"] as? Snapshot).flatMap { ListStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrConsentQuestionnaires")
      }
    }

    public struct ListStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrConsentQuestionnaireConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrConsentQuestionnaireConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strConsentQuestionnaire"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("consent_id", type: .scalar(String.self)),
          GraphQLField("short_description", type: .scalar(String.self)),
          GraphQLField("long_description", type: .scalar(String.self)),
          GraphQLField("agree_question_id", type: .scalar(String.self)),
          GraphQLField("disagree_question_id", type: .scalar(String.self)),
          GraphQLField("category", type: .scalar(String.self)),
          GraphQLField("category_response", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("more_info", type: .scalar(String.self)),
          GraphQLField("consent_question_type", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
          self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var consentId: String? {
          get {
            return snapshot["consent_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_id")
          }
        }

        public var shortDescription: String? {
          get {
            return snapshot["short_description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "short_description")
          }
        }

        public var longDescription: String? {
          get {
            return snapshot["long_description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "long_description")
          }
        }

        public var agreeQuestionId: String? {
          get {
            return snapshot["agree_question_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "agree_question_id")
          }
        }

        public var disagreeQuestionId: String? {
          get {
            return snapshot["disagree_question_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "disagree_question_id")
          }
        }

        public var category: String? {
          get {
            return snapshot["category"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "category")
          }
        }

        public var categoryResponse: String? {
          get {
            return snapshot["category_response"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "category_response")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String {
          get {
            return snapshot["project_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var moreInfo: String? {
          get {
            return snapshot["more_info"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "more_info")
          }
        }

        public var consentQuestionType: String? {
          get {
            return snapshot["consent_question_type"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_question_type")
          }
        }
      }
    }
  }
}

public final class GetStrReviewAssignmentQuery: GraphQLQuery {
  public static let operationString =
    "query GetStrReviewAssignment($collector_id: ID!, $video_id: String!) {\n  getStrReviewAssignment(collector_id: $collector_id, video_id: $video_id) {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public var collector_id: GraphQLID
  public var video_id: String

  public init(collector_id: GraphQLID, video_id: String) {
    self.collector_id = collector_id
    self.video_id = video_id
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "video_id": video_id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getStrReviewAssignment", arguments: ["collector_id": GraphQLVariable("collector_id"), "video_id": GraphQLVariable("video_id")], type: .object(GetStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getStrReviewAssignment: GetStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Query", "getStrReviewAssignment": getStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var getStrReviewAssignment: GetStrReviewAssignment? {
      get {
        return (snapshot["getStrReviewAssignment"] as? Snapshot).flatMap { GetStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getStrReviewAssignment")
      }
    }

    public struct GetStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}

public final class ListStrReviewAssignmentsQuery: GraphQLQuery {
  public static let operationString =
    "query ListStrReviewAssignments($collector_id: ID, $video_id: ModelStringKeyConditionInput, $filter: ModelstrReviewAssignmentFilterInput, $limit: Int, $nextToken: String, $sortDirection: ModelSortDirection) {\n  listStrReviewAssignments(collector_id: $collector_id, video_id: $video_id, filter: $filter, limit: $limit, nextToken: $nextToken, sortDirection: $sortDirection) {\n    __typename\n    items {\n      __typename\n      collector_id\n      video_id\n      collection_id\n      collection_name\n      program_name\n      program_id\n      project_id\n      project_name\n      duration\n      review_status\n      uploaded_date\n      week\n      instance_ids\n      video_file_path\n      annotation_file_path\n      rating_score\n      thumbnail\n      thumbnail_small\n      assigned_date\n      orientation\n    }\n    nextToken\n  }\n}"

  public var collector_id: GraphQLID?
  public var video_id: ModelStringKeyConditionInput?
  public var filter: ModelstrReviewAssignmentFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var sortDirection: ModelSortDirection?

  public init(collector_id: GraphQLID? = nil, video_id: ModelStringKeyConditionInput? = nil, filter: ModelstrReviewAssignmentFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, sortDirection: ModelSortDirection? = nil) {
    self.collector_id = collector_id
    self.video_id = video_id
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.sortDirection = sortDirection
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "video_id": video_id, "filter": filter, "limit": limit, "nextToken": nextToken, "sortDirection": sortDirection]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listStrReviewAssignments", arguments: ["collector_id": GraphQLVariable("collector_id"), "video_id": GraphQLVariable("video_id"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "sortDirection": GraphQLVariable("sortDirection")], type: .object(ListStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listStrReviewAssignments: ListStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Query", "listStrReviewAssignments": listStrReviewAssignments.flatMap { $0.snapshot }])
    }

    public var listStrReviewAssignments: ListStrReviewAssignment? {
      get {
        return (snapshot["listStrReviewAssignments"] as? Snapshot).flatMap { ListStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listStrReviewAssignments")
      }
    }

    public struct ListStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrReviewAssignmentConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrReviewAssignmentConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strReviewAssignment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("review_status", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("instance_ids", type: .scalar(String.self)),
          GraphQLField("video_file_path", type: .scalar(String.self)),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("orientation", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
          self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var reviewStatus: String? {
          get {
            return snapshot["review_status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_status")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var instanceIds: String? {
          get {
            return snapshot["instance_ids"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_ids")
          }
        }

        public var videoFilePath: String? {
          get {
            return snapshot["video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var assignedDate: String {
          get {
            return snapshot["assigned_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "assigned_date")
          }
        }

        public var orientation: String? {
          get {
            return snapshot["orientation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "orientation")
          }
        }
      }
    }
  }
}

public final class StrCollectionsByCollectionIdQuery: GraphQLQuery {
  public static let operationString =
    "query StrCollectionsByCollectionId($collection_id: String, $id: ModelIDKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrCollectionsFilterInput, $limit: Int, $nextToken: String) {\n  strCollectionsByCollectionId(collection_id: $collection_id, id: $id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      project_id\n      training_video_url\n      training_video_json_url\n      training_videos\n      training_videos_low\n      collection_description\n      object_id\n      objects_list\n      activities\n      activity_short_names\n      created_date\n      updated_date\n      collection_id\n      default_object\n      active\n    }\n    nextToken\n  }\n}"

  public var collection_id: String?
  public var id: ModelIDKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrCollectionsFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collection_id: String? = nil, id: ModelIDKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrCollectionsFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collection_id = collection_id
    self.id = id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collection_id": collection_id, "id": id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("strCollectionsByCollectionId", arguments: ["collection_id": GraphQLVariable("collection_id"), "id": GraphQLVariable("id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrCollectionsByCollectionId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strCollectionsByCollectionId: StrCollectionsByCollectionId? = nil) {
      self.init(snapshot: ["__typename": "Query", "strCollectionsByCollectionId": strCollectionsByCollectionId.flatMap { $0.snapshot }])
    }

    public var strCollectionsByCollectionId: StrCollectionsByCollectionId? {
      get {
        return (snapshot["strCollectionsByCollectionId"] as? Snapshot).flatMap { StrCollectionsByCollectionId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "strCollectionsByCollectionId")
      }
    }

    public struct StrCollectionsByCollectionId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrCollectionsConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrCollectionsConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strCollections"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("training_video_url", type: .scalar(String.self)),
          GraphQLField("training_video_json_url", type: .scalar(String.self)),
          GraphQLField("training_videos", type: .scalar(String.self)),
          GraphQLField("training_videos_low", type: .scalar(String.self)),
          GraphQLField("collection_description", type: .scalar(String.self)),
          GraphQLField("object_id", type: .scalar(String.self)),
          GraphQLField("objects_list", type: .scalar(String.self)),
          GraphQLField("activities", type: .scalar(String.self)),
          GraphQLField("activity_short_names", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("default_object", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
          self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var trainingVideoUrl: String? {
          get {
            return snapshot["training_video_url"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_video_url")
          }
        }

        public var trainingVideoJsonUrl: String? {
          get {
            return snapshot["training_video_json_url"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_video_json_url")
          }
        }

        public var trainingVideos: String? {
          get {
            return snapshot["training_videos"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos")
          }
        }

        public var trainingVideosLow: String? {
          get {
            return snapshot["training_videos_low"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "training_videos_low")
          }
        }

        public var collectionDescription: String? {
          get {
            return snapshot["collection_description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_description")
          }
        }

        public var objectId: String? {
          get {
            return snapshot["object_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_id")
          }
        }

        public var objectsList: String? {
          get {
            return snapshot["objects_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "objects_list")
          }
        }

        public var activities: String? {
          get {
            return snapshot["activities"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities")
          }
        }

        public var activityShortNames: String? {
          get {
            return snapshot["activity_short_names"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_short_names")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var defaultObject: String? {
          get {
            return snapshot["default_object"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "default_object")
          }
        }

        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }
      }
    }
  }
}

public final class StrCollectorByIdQuery: GraphQLQuery {
  public static let operationString =
    "query StrCollectorById($collector_id: ID, $query_attribute: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrCollectorFilterInput, $limit: Int, $nextToken: String) {\n  StrCollectorById(collector_id: $collector_id, query_attribute: $query_attribute, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      collector_id\n      collector_email\n      first_name\n      last_name\n      password\n      query_attribute\n      is_consented\n      is_dropbox_integrated\n      is_paypal_integrated\n      dropbox_token\n      paypal_email_id\n      uploaded_count\n      verified_count\n      not_verified_count\n      consented_count\n      authorized\n      outstanding_amount\n      collector_score\n      reviewer_score\n    }\n    nextToken\n  }\n}"

  public var collector_id: GraphQLID?
  public var query_attribute: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrCollectorFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collector_id: GraphQLID? = nil, query_attribute: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrCollectorFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collector_id = collector_id
    self.query_attribute = query_attribute
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "query_attribute": query_attribute, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrCollectorById", arguments: ["collector_id": GraphQLVariable("collector_id"), "query_attribute": GraphQLVariable("query_attribute"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrCollectorById.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strCollectorById: StrCollectorById? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrCollectorById": strCollectorById.flatMap { $0.snapshot }])
    }

    public var strCollectorById: StrCollectorById? {
      get {
        return (snapshot["StrCollectorById"] as? Snapshot).flatMap { StrCollectorById(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrCollectorById")
      }
    }

    public struct StrCollectorById: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrCollectorConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrCollectorConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strCollector"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("is_consented", type: .scalar(Bool.self)),
          GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
          GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
          GraphQLField("dropbox_token", type: .scalar(String.self)),
          GraphQLField("paypal_email_id", type: .scalar(String.self)),
          GraphQLField("uploaded_count", type: .scalar(String.self)),
          GraphQLField("verified_count", type: .scalar(String.self)),
          GraphQLField("not_verified_count", type: .scalar(String.self)),
          GraphQLField("consented_count", type: .scalar(String.self)),
          GraphQLField("authorized", type: .scalar(String.self)),
          GraphQLField("outstanding_amount", type: .scalar(String.self)),
          GraphQLField("collector_score", type: .scalar(String.self)),
          GraphQLField("reviewer_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
          self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectorEmail: String {
          get {
            return snapshot["collector_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_email")
          }
        }

        public var firstName: String {
          get {
            return snapshot["first_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "first_name")
          }
        }

        public var lastName: String {
          get {
            return snapshot["last_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_name")
          }
        }

        public var password: String? {
          get {
            return snapshot["password"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "password")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var isConsented: Bool? {
          get {
            return snapshot["is_consented"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_consented")
          }
        }

        public var isDropboxIntegrated: Bool? {
          get {
            return snapshot["is_dropbox_integrated"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
          }
        }

        public var isPaypalIntegrated: Bool? {
          get {
            return snapshot["is_paypal_integrated"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
          }
        }

        public var dropboxToken: String? {
          get {
            return snapshot["dropbox_token"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "dropbox_token")
          }
        }

        public var paypalEmailId: String? {
          get {
            return snapshot["paypal_email_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "paypal_email_id")
          }
        }

        public var uploadedCount: String? {
          get {
            return snapshot["uploaded_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_count")
          }
        }

        public var verifiedCount: String? {
          get {
            return snapshot["verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified_count")
          }
        }

        public var notVerifiedCount: String? {
          get {
            return snapshot["not_verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "not_verified_count")
          }
        }

        public var consentedCount: String? {
          get {
            return snapshot["consented_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consented_count")
          }
        }

        public var authorized: String? {
          get {
            return snapshot["authorized"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "authorized")
          }
        }

        public var outstandingAmount: String? {
          get {
            return snapshot["outstanding_amount"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "outstanding_amount")
          }
        }

        public var collectorScore: String? {
          get {
            return snapshot["collector_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_score")
          }
        }

        public var reviewerScore: String? {
          get {
            return snapshot["reviewer_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_score")
          }
        }
      }
    }
  }
}

public final class StrCollectorByEmailQuery: GraphQLQuery {
  public static let operationString =
    "query StrCollectorByEmail($collector_email: String, $collector_id: ModelIDKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrCollectorFilterInput, $limit: Int, $nextToken: String) {\n  StrCollectorByEmail(collector_email: $collector_email, collector_id: $collector_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      collector_id\n      collector_email\n      first_name\n      last_name\n      password\n      query_attribute\n      is_consented\n      is_dropbox_integrated\n      is_paypal_integrated\n      dropbox_token\n      paypal_email_id\n      uploaded_count\n      verified_count\n      not_verified_count\n      consented_count\n      authorized\n      outstanding_amount\n      collector_score\n      reviewer_score\n    }\n    nextToken\n  }\n}"

  public var collector_email: String?
  public var collector_id: ModelIDKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrCollectorFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collector_email: String? = nil, collector_id: ModelIDKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrCollectorFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collector_email = collector_email
    self.collector_id = collector_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collector_email": collector_email, "collector_id": collector_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrCollectorByEmail", arguments: ["collector_email": GraphQLVariable("collector_email"), "collector_id": GraphQLVariable("collector_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrCollectorByEmail.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strCollectorByEmail: StrCollectorByEmail? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrCollectorByEmail": strCollectorByEmail.flatMap { $0.snapshot }])
    }

    public var strCollectorByEmail: StrCollectorByEmail? {
      get {
        return (snapshot["StrCollectorByEmail"] as? Snapshot).flatMap { StrCollectorByEmail(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrCollectorByEmail")
      }
    }

    public struct StrCollectorByEmail: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrCollectorConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrCollectorConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strCollector"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("is_consented", type: .scalar(Bool.self)),
          GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
          GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
          GraphQLField("dropbox_token", type: .scalar(String.self)),
          GraphQLField("paypal_email_id", type: .scalar(String.self)),
          GraphQLField("uploaded_count", type: .scalar(String.self)),
          GraphQLField("verified_count", type: .scalar(String.self)),
          GraphQLField("not_verified_count", type: .scalar(String.self)),
          GraphQLField("consented_count", type: .scalar(String.self)),
          GraphQLField("authorized", type: .scalar(String.self)),
          GraphQLField("outstanding_amount", type: .scalar(String.self)),
          GraphQLField("collector_score", type: .scalar(String.self)),
          GraphQLField("reviewer_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
          self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectorEmail: String {
          get {
            return snapshot["collector_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_email")
          }
        }

        public var firstName: String {
          get {
            return snapshot["first_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "first_name")
          }
        }

        public var lastName: String {
          get {
            return snapshot["last_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_name")
          }
        }

        public var password: String? {
          get {
            return snapshot["password"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "password")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var isConsented: Bool? {
          get {
            return snapshot["is_consented"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_consented")
          }
        }

        public var isDropboxIntegrated: Bool? {
          get {
            return snapshot["is_dropbox_integrated"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
          }
        }

        public var isPaypalIntegrated: Bool? {
          get {
            return snapshot["is_paypal_integrated"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
          }
        }

        public var dropboxToken: String? {
          get {
            return snapshot["dropbox_token"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "dropbox_token")
          }
        }

        public var paypalEmailId: String? {
          get {
            return snapshot["paypal_email_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "paypal_email_id")
          }
        }

        public var uploadedCount: String? {
          get {
            return snapshot["uploaded_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_count")
          }
        }

        public var verifiedCount: String? {
          get {
            return snapshot["verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified_count")
          }
        }

        public var notVerifiedCount: String? {
          get {
            return snapshot["not_verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "not_verified_count")
          }
        }

        public var consentedCount: String? {
          get {
            return snapshot["consented_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consented_count")
          }
        }

        public var authorized: String? {
          get {
            return snapshot["authorized"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "authorized")
          }
        }

        public var outstandingAmount: String? {
          get {
            return snapshot["outstanding_amount"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "outstanding_amount")
          }
        }

        public var collectorScore: String? {
          get {
            return snapshot["collector_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_score")
          }
        }

        public var reviewerScore: String? {
          get {
            return snapshot["reviewer_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_score")
          }
        }
      }
    }
  }
}

public final class StrVideosByVideoIdQuery: GraphQLQuery {
  public static let operationString =
    "query StrVideosByVideoId($video_id: String, $sortDirection: ModelSortDirection, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String) {\n  StrVideosByVideoID(video_id: $video_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var video_id: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(video_id: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.video_id = video_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["video_id": video_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrVideosByVideoID", arguments: ["video_id": GraphQLVariable("video_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrVideosByVideoId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strVideosByVideoId: StrVideosByVideoId? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrVideosByVideoID": strVideosByVideoId.flatMap { $0.snapshot }])
    }

    public var strVideosByVideoId: StrVideosByVideoId? {
      get {
        return (snapshot["StrVideosByVideoID"] as? Snapshot).flatMap { StrVideosByVideoId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrVideosByVideoID")
      }
    }

    public struct StrVideosByVideoId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class StrVideosByWeekUploadedQuery: GraphQLQuery {
  public static let operationString =
    "query StrVideosByWeekUploaded($week: String, $uploaded_date: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String) {\n  StrVideosByWeekUploaded(week: $week, uploaded_date: $uploaded_date, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var week: String?
  public var uploaded_date: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(week: String? = nil, uploaded_date: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.week = week
    self.uploaded_date = uploaded_date
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["week": week, "uploaded_date": uploaded_date, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrVideosByWeekUploaded", arguments: ["week": GraphQLVariable("week"), "uploaded_date": GraphQLVariable("uploaded_date"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrVideosByWeekUploaded.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strVideosByWeekUploaded: StrVideosByWeekUploaded? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrVideosByWeekUploaded": strVideosByWeekUploaded.flatMap { $0.snapshot }])
    }

    public var strVideosByWeekUploaded: StrVideosByWeekUploaded? {
      get {
        return (snapshot["StrVideosByWeekUploaded"] as? Snapshot).flatMap { StrVideosByWeekUploaded(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrVideosByWeekUploaded")
      }
    }

    public struct StrVideosByWeekUploaded: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class StrVideosByQueryAttributeQuery: GraphQLQuery {
  public static let operationString =
    "query StrVideosByQueryAttribute($query_attribute: String, $uploaded_date: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String) {\n  StrVideosByQueryAttribute(query_attribute: $query_attribute, uploaded_date: $uploaded_date, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var query_attribute: String?
  public var uploaded_date: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(query_attribute: String? = nil, uploaded_date: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.query_attribute = query_attribute
    self.uploaded_date = uploaded_date
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["query_attribute": query_attribute, "uploaded_date": uploaded_date, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrVideosByQueryAttribute", arguments: ["query_attribute": GraphQLVariable("query_attribute"), "uploaded_date": GraphQLVariable("uploaded_date"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrVideosByQueryAttribute.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strVideosByQueryAttribute: StrVideosByQueryAttribute? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrVideosByQueryAttribute": strVideosByQueryAttribute.flatMap { $0.snapshot }])
    }

    public var strVideosByQueryAttribute: StrVideosByQueryAttribute? {
      get {
        return (snapshot["StrVideosByQueryAttribute"] as? Snapshot).flatMap { StrVideosByQueryAttribute(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrVideosByQueryAttribute")
      }
    }

    public struct StrVideosByQueryAttribute: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class StrVideosByCollectorIdQuery: GraphQLQuery {
  public static let operationString =
    "query StrVideosByCollectorId($collector_id: String, $id: ModelIDKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String) {\n  StrVideosByCollectorID(collector_id: $collector_id, id: $id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var collector_id: String?
  public var id: ModelIDKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collector_id: String? = nil, id: ModelIDKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collector_id = collector_id
    self.id = id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "id": id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrVideosByCollectorID", arguments: ["collector_id": GraphQLVariable("collector_id"), "id": GraphQLVariable("id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrVideosByCollectorId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strVideosByCollectorId: StrVideosByCollectorId? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrVideosByCollectorID": strVideosByCollectorId.flatMap { $0.snapshot }])
    }

    public var strVideosByCollectorId: StrVideosByCollectorId? {
      get {
        return (snapshot["StrVideosByCollectorID"] as? Snapshot).flatMap { StrVideosByCollectorId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrVideosByCollectorID")
      }
    }

    public struct StrVideosByCollectorId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class StrVideoByUploaedDateQuery: GraphQLQuery {
  public static let operationString =
    "query StrVideoByUploaedDate($collector_id: String, $query_attribute: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String) {\n  StrVideoByUploaedDate(collector_id: $collector_id, query_attribute: $query_attribute, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var collector_id: String?
  public var query_attribute: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collector_id: String? = nil, query_attribute: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collector_id = collector_id
    self.query_attribute = query_attribute
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "query_attribute": query_attribute, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrVideoByUploaedDate", arguments: ["collector_id": GraphQLVariable("collector_id"), "query_attribute": GraphQLVariable("query_attribute"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrVideoByUploaedDate.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strVideoByUploaedDate: StrVideoByUploaedDate? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrVideoByUploaedDate": strVideoByUploaedDate.flatMap { $0.snapshot }])
    }

    public var strVideoByUploaedDate: StrVideoByUploaedDate? {
      get {
        return (snapshot["StrVideoByUploaedDate"] as? Snapshot).flatMap { StrVideoByUploaedDate(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrVideoByUploaedDate")
      }
    }

    public struct StrVideoByUploaedDate: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class StrVideoByUploaedDateQQuery: GraphQLQuery {
  public static let operationString =
    "query StrVideoByUploaedDateQ($collector_id: String, $uploaded_date: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrVideosFilterInput, $limit: Int, $nextToken: String) {\n  StrVideoByUploaedDateQ(collector_id: $collector_id, uploaded_date: $uploaded_date, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      raw_video_file_path\n      annotation_file_path\n      video_id\n      collector_id\n      project_id\n      collection_id\n      collection_name\n      activities_list\n      object_label_list\n      thumbs_up\n      thumbs_down\n      created_date\n      updated_date\n      collected_date\n      latitude\n      longitude\n      processed_video_file_path\n      rating\n      subject_id\n      verified\n      video_sharing_link\n      json_sharing_link\n      rating_score\n      status\n      status_reason\n      thumbnail\n      thumbnail_small\n      duration\n      display_duration\n      uploaded_date\n      query_attribute\n      video_state\n      week\n    }\n    nextToken\n  }\n}"

  public var collector_id: String?
  public var uploaded_date: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrVideosFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collector_id: String? = nil, uploaded_date: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrVideosFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collector_id = collector_id
    self.uploaded_date = uploaded_date
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "uploaded_date": uploaded_date, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("StrVideoByUploaedDateQ", arguments: ["collector_id": GraphQLVariable("collector_id"), "uploaded_date": GraphQLVariable("uploaded_date"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrVideoByUploaedDateQ.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strVideoByUploaedDateQ: StrVideoByUploaedDateQ? = nil) {
      self.init(snapshot: ["__typename": "Query", "StrVideoByUploaedDateQ": strVideoByUploaedDateQ.flatMap { $0.snapshot }])
    }

    public var strVideoByUploaedDateQ: StrVideoByUploaedDateQ? {
      get {
        return (snapshot["StrVideoByUploaedDateQ"] as? Snapshot).flatMap { StrVideoByUploaedDateQ(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "StrVideoByUploaedDateQ")
      }
    }

    public struct StrVideoByUploaedDateQ: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrVideosConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrVideosConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strVideos"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("activities_list", type: .scalar(String.self)),
          GraphQLField("object_label_list", type: .scalar(String.self)),
          GraphQLField("thumbs_up", type: .scalar(Int.self)),
          GraphQLField("thumbs_down", type: .scalar(Int.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("collected_date", type: .scalar(String.self)),
          GraphQLField("latitude", type: .scalar(String.self)),
          GraphQLField("longitude", type: .scalar(String.self)),
          GraphQLField("processed_video_file_path", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_sharing_link", type: .scalar(String.self)),
          GraphQLField("json_sharing_link", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("status_reason", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("display_duration", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
          GraphQLField("video_state", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
          self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var rawVideoFilePath: String {
          get {
            return snapshot["raw_video_file_path"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "raw_video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectorId: String {
          get {
            return snapshot["collector_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var activitiesList: String? {
          get {
            return snapshot["activities_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activities_list")
          }
        }

        public var objectLabelList: String? {
          get {
            return snapshot["object_label_list"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "object_label_list")
          }
        }

        public var thumbsUp: Int? {
          get {
            return snapshot["thumbs_up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_up")
          }
        }

        public var thumbsDown: Int? {
          get {
            return snapshot["thumbs_down"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbs_down")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var collectedDate: String? {
          get {
            return snapshot["collected_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collected_date")
          }
        }

        public var latitude: String? {
          get {
            return snapshot["latitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        public var longitude: String? {
          get {
            return snapshot["longitude"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        public var processedVideoFilePath: String? {
          get {
            return snapshot["processed_video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "processed_video_file_path")
          }
        }

        public var rating: String? {
          get {
            return snapshot["rating"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoSharingLink: String? {
          get {
            return snapshot["video_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_sharing_link")
          }
        }

        public var jsonSharingLink: String? {
          get {
            return snapshot["json_sharing_link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "json_sharing_link")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var statusReason: String? {
          get {
            return snapshot["status_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status_reason")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var displayDuration: String? {
          get {
            return snapshot["display_duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "display_duration")
          }
        }

        public var uploadedDate: String {
          get {
            return snapshot["uploaded_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var queryAttribute: String {
          get {
            return snapshot["query_attribute"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "query_attribute")
          }
        }

        public var videoState: String? {
          get {
            return snapshot["video_state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_state")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }
      }
    }
  }
}

public final class InstanceByStrVideoIdQuery: GraphQLQuery {
  public static let operationString =
    "query InstanceByStrVideoId($video_id: String, $activity_name: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrInstancesFilterInput, $limit: Int, $nextToken: String) {\n  instanceByStrVideoId(video_id: $video_id, activity_name: $activity_name, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      instance_id\n      activity_name\n      avg_bbox_height\n      avg_bbox_size\n      avg_bbox_width\n      bad_alignament_score\n      bad_box_big_score\n      bad_box_score\n      bad_box_small_score\n      bad_label_score\n      bad_timing_score\n      bad_video_score\n      bad_viewpoint_score\n      collector_id\n      collection_id\n      end_frame\n      program_id\n      project_id\n      rating_score\n      review_reason\n      s3_path\n      start_frame\n      subject_id\n      created_date\n      updated_date\n      uploaded_date\n      verified\n      video_id\n      week\n      need_review_score\n    }\n    nextToken\n  }\n}"

  public var video_id: String?
  public var activity_name: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrInstancesFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(video_id: String? = nil, activity_name: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrInstancesFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.video_id = video_id
    self.activity_name = activity_name
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["video_id": video_id, "activity_name": activity_name, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("instanceByStrVideoId", arguments: ["video_id": GraphQLVariable("video_id"), "activity_name": GraphQLVariable("activity_name"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(InstanceByStrVideoId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(instanceByStrVideoId: InstanceByStrVideoId? = nil) {
      self.init(snapshot: ["__typename": "Query", "instanceByStrVideoId": instanceByStrVideoId.flatMap { $0.snapshot }])
    }

    public var instanceByStrVideoId: InstanceByStrVideoId? {
      get {
        return (snapshot["instanceByStrVideoId"] as? Snapshot).flatMap { InstanceByStrVideoId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "instanceByStrVideoId")
      }
    }

    public struct InstanceByStrVideoId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrInstancesConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrInstancesConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strInstances"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("avg_bbox_height", type: .scalar(String.self)),
          GraphQLField("avg_bbox_size", type: .scalar(String.self)),
          GraphQLField("avg_bbox_width", type: .scalar(String.self)),
          GraphQLField("bad_alignament_score", type: .scalar(String.self)),
          GraphQLField("bad_box_big_score", type: .scalar(String.self)),
          GraphQLField("bad_box_score", type: .scalar(String.self)),
          GraphQLField("bad_box_small_score", type: .scalar(String.self)),
          GraphQLField("bad_label_score", type: .scalar(String.self)),
          GraphQLField("bad_timing_score", type: .scalar(String.self)),
          GraphQLField("bad_video_score", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
          GraphQLField("collector_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("end_frame", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("review_reason", type: .scalar(String.self)),
          GraphQLField("s3_path", type: .scalar(String.self)),
          GraphQLField("start_frame", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("need_review_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
          self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var instanceId: String {
          get {
            return snapshot["instance_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_id")
          }
        }

        public var activityName: String {
          get {
            return snapshot["activity_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_name")
          }
        }

        public var avgBboxHeight: String? {
          get {
            return snapshot["avg_bbox_height"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_height")
          }
        }

        public var avgBboxSize: String? {
          get {
            return snapshot["avg_bbox_size"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_size")
          }
        }

        public var avgBboxWidth: String? {
          get {
            return snapshot["avg_bbox_width"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_width")
          }
        }

        public var badAlignamentScore: String? {
          get {
            return snapshot["bad_alignament_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignament_score")
          }
        }

        public var badBoxBigScore: String? {
          get {
            return snapshot["bad_box_big_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big_score")
          }
        }

        public var badBoxScore: String? {
          get {
            return snapshot["bad_box_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_score")
          }
        }

        public var badBoxSmallScore: String? {
          get {
            return snapshot["bad_box_small_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small_score")
          }
        }

        public var badLabelScore: String? {
          get {
            return snapshot["bad_label_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label_score")
          }
        }

        public var badTimingScore: String? {
          get {
            return snapshot["bad_timing_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing_score")
          }
        }

        public var badVideoScore: String? {
          get {
            return snapshot["bad_video_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video_score")
          }
        }

        public var badViewpointScore: String? {
          get {
            return snapshot["bad_viewpoint_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
          }
        }

        public var collectorId: String? {
          get {
            return snapshot["collector_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var endFrame: String? {
          get {
            return snapshot["end_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "end_frame")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var reviewReason: String? {
          get {
            return snapshot["review_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_reason")
          }
        }

        public var s3Path: String? {
          get {
            return snapshot["s3_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3_path")
          }
        }

        public var startFrame: String? {
          get {
            return snapshot["start_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "start_frame")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var needReviewScore: String? {
          get {
            return snapshot["need_review_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "need_review_score")
          }
        }
      }
    }
  }
}

public final class InstanceByIntanceIdQuery: GraphQLQuery {
  public static let operationString =
    "query InstanceByIntanceId($instance_id: String, $sortDirection: ModelSortDirection, $filter: ModelstrInstancesFilterInput, $limit: Int, $nextToken: String) {\n  instanceByIntanceId(instance_id: $instance_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      instance_id\n      activity_name\n      avg_bbox_height\n      avg_bbox_size\n      avg_bbox_width\n      bad_alignament_score\n      bad_box_big_score\n      bad_box_score\n      bad_box_small_score\n      bad_label_score\n      bad_timing_score\n      bad_video_score\n      bad_viewpoint_score\n      collector_id\n      collection_id\n      end_frame\n      program_id\n      project_id\n      rating_score\n      review_reason\n      s3_path\n      start_frame\n      subject_id\n      created_date\n      updated_date\n      uploaded_date\n      verified\n      video_id\n      week\n      need_review_score\n    }\n    nextToken\n  }\n}"

  public var instance_id: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrInstancesFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(instance_id: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrInstancesFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.instance_id = instance_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["instance_id": instance_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("instanceByIntanceId", arguments: ["instance_id": GraphQLVariable("instance_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(InstanceByIntanceId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(instanceByIntanceId: InstanceByIntanceId? = nil) {
      self.init(snapshot: ["__typename": "Query", "instanceByIntanceId": instanceByIntanceId.flatMap { $0.snapshot }])
    }

    public var instanceByIntanceId: InstanceByIntanceId? {
      get {
        return (snapshot["instanceByIntanceId"] as? Snapshot).flatMap { InstanceByIntanceId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "instanceByIntanceId")
      }
    }

    public struct InstanceByIntanceId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrInstancesConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrInstancesConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strInstances"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("avg_bbox_height", type: .scalar(String.self)),
          GraphQLField("avg_bbox_size", type: .scalar(String.self)),
          GraphQLField("avg_bbox_width", type: .scalar(String.self)),
          GraphQLField("bad_alignament_score", type: .scalar(String.self)),
          GraphQLField("bad_box_big_score", type: .scalar(String.self)),
          GraphQLField("bad_box_score", type: .scalar(String.self)),
          GraphQLField("bad_box_small_score", type: .scalar(String.self)),
          GraphQLField("bad_label_score", type: .scalar(String.self)),
          GraphQLField("bad_timing_score", type: .scalar(String.self)),
          GraphQLField("bad_video_score", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
          GraphQLField("collector_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("end_frame", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("review_reason", type: .scalar(String.self)),
          GraphQLField("s3_path", type: .scalar(String.self)),
          GraphQLField("start_frame", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("need_review_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
          self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var instanceId: String {
          get {
            return snapshot["instance_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_id")
          }
        }

        public var activityName: String {
          get {
            return snapshot["activity_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_name")
          }
        }

        public var avgBboxHeight: String? {
          get {
            return snapshot["avg_bbox_height"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_height")
          }
        }

        public var avgBboxSize: String? {
          get {
            return snapshot["avg_bbox_size"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_size")
          }
        }

        public var avgBboxWidth: String? {
          get {
            return snapshot["avg_bbox_width"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_width")
          }
        }

        public var badAlignamentScore: String? {
          get {
            return snapshot["bad_alignament_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignament_score")
          }
        }

        public var badBoxBigScore: String? {
          get {
            return snapshot["bad_box_big_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big_score")
          }
        }

        public var badBoxScore: String? {
          get {
            return snapshot["bad_box_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_score")
          }
        }

        public var badBoxSmallScore: String? {
          get {
            return snapshot["bad_box_small_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small_score")
          }
        }

        public var badLabelScore: String? {
          get {
            return snapshot["bad_label_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label_score")
          }
        }

        public var badTimingScore: String? {
          get {
            return snapshot["bad_timing_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing_score")
          }
        }

        public var badVideoScore: String? {
          get {
            return snapshot["bad_video_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video_score")
          }
        }

        public var badViewpointScore: String? {
          get {
            return snapshot["bad_viewpoint_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
          }
        }

        public var collectorId: String? {
          get {
            return snapshot["collector_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var endFrame: String? {
          get {
            return snapshot["end_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "end_frame")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var reviewReason: String? {
          get {
            return snapshot["review_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_reason")
          }
        }

        public var s3Path: String? {
          get {
            return snapshot["s3_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3_path")
          }
        }

        public var startFrame: String? {
          get {
            return snapshot["start_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "start_frame")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var needReviewScore: String? {
          get {
            return snapshot["need_review_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "need_review_score")
          }
        }
      }
    }
  }
}

public final class InstanceByWeekUploadedDateQuery: GraphQLQuery {
  public static let operationString =
    "query InstanceByWeekUploadedDate($week: String, $uploaded_date: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrInstancesFilterInput, $limit: Int, $nextToken: String) {\n  instanceByWeekUploadedDate(week: $week, uploaded_date: $uploaded_date, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      instance_id\n      activity_name\n      avg_bbox_height\n      avg_bbox_size\n      avg_bbox_width\n      bad_alignament_score\n      bad_box_big_score\n      bad_box_score\n      bad_box_small_score\n      bad_label_score\n      bad_timing_score\n      bad_video_score\n      bad_viewpoint_score\n      collector_id\n      collection_id\n      end_frame\n      program_id\n      project_id\n      rating_score\n      review_reason\n      s3_path\n      start_frame\n      subject_id\n      created_date\n      updated_date\n      uploaded_date\n      verified\n      video_id\n      week\n      need_review_score\n    }\n    nextToken\n  }\n}"

  public var week: String?
  public var uploaded_date: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrInstancesFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(week: String? = nil, uploaded_date: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrInstancesFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.week = week
    self.uploaded_date = uploaded_date
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["week": week, "uploaded_date": uploaded_date, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("instanceByWeekUploadedDate", arguments: ["week": GraphQLVariable("week"), "uploaded_date": GraphQLVariable("uploaded_date"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(InstanceByWeekUploadedDate.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(instanceByWeekUploadedDate: InstanceByWeekUploadedDate? = nil) {
      self.init(snapshot: ["__typename": "Query", "instanceByWeekUploadedDate": instanceByWeekUploadedDate.flatMap { $0.snapshot }])
    }

    public var instanceByWeekUploadedDate: InstanceByWeekUploadedDate? {
      get {
        return (snapshot["instanceByWeekUploadedDate"] as? Snapshot).flatMap { InstanceByWeekUploadedDate(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "instanceByWeekUploadedDate")
      }
    }

    public struct InstanceByWeekUploadedDate: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrInstancesConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrInstancesConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strInstances"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("avg_bbox_height", type: .scalar(String.self)),
          GraphQLField("avg_bbox_size", type: .scalar(String.self)),
          GraphQLField("avg_bbox_width", type: .scalar(String.self)),
          GraphQLField("bad_alignament_score", type: .scalar(String.self)),
          GraphQLField("bad_box_big_score", type: .scalar(String.self)),
          GraphQLField("bad_box_score", type: .scalar(String.self)),
          GraphQLField("bad_box_small_score", type: .scalar(String.self)),
          GraphQLField("bad_label_score", type: .scalar(String.self)),
          GraphQLField("bad_timing_score", type: .scalar(String.self)),
          GraphQLField("bad_video_score", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
          GraphQLField("collector_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("end_frame", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("review_reason", type: .scalar(String.self)),
          GraphQLField("s3_path", type: .scalar(String.self)),
          GraphQLField("start_frame", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("need_review_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
          self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var instanceId: String {
          get {
            return snapshot["instance_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_id")
          }
        }

        public var activityName: String {
          get {
            return snapshot["activity_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_name")
          }
        }

        public var avgBboxHeight: String? {
          get {
            return snapshot["avg_bbox_height"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_height")
          }
        }

        public var avgBboxSize: String? {
          get {
            return snapshot["avg_bbox_size"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_size")
          }
        }

        public var avgBboxWidth: String? {
          get {
            return snapshot["avg_bbox_width"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_width")
          }
        }

        public var badAlignamentScore: String? {
          get {
            return snapshot["bad_alignament_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignament_score")
          }
        }

        public var badBoxBigScore: String? {
          get {
            return snapshot["bad_box_big_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big_score")
          }
        }

        public var badBoxScore: String? {
          get {
            return snapshot["bad_box_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_score")
          }
        }

        public var badBoxSmallScore: String? {
          get {
            return snapshot["bad_box_small_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small_score")
          }
        }

        public var badLabelScore: String? {
          get {
            return snapshot["bad_label_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label_score")
          }
        }

        public var badTimingScore: String? {
          get {
            return snapshot["bad_timing_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing_score")
          }
        }

        public var badVideoScore: String? {
          get {
            return snapshot["bad_video_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video_score")
          }
        }

        public var badViewpointScore: String? {
          get {
            return snapshot["bad_viewpoint_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
          }
        }

        public var collectorId: String? {
          get {
            return snapshot["collector_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var endFrame: String? {
          get {
            return snapshot["end_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "end_frame")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var reviewReason: String? {
          get {
            return snapshot["review_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_reason")
          }
        }

        public var s3Path: String? {
          get {
            return snapshot["s3_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3_path")
          }
        }

        public var startFrame: String? {
          get {
            return snapshot["start_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "start_frame")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var needReviewScore: String? {
          get {
            return snapshot["need_review_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "need_review_score")
          }
        }
      }
    }
  }
}

public final class InstanceByVideoIdQuery: GraphQLQuery {
  public static let operationString =
    "query InstanceByVideoId($video_id: String, $sortDirection: ModelSortDirection, $filter: ModelstrInstancesFilterInput, $limit: Int, $nextToken: String) {\n  instanceByVideoId(video_id: $video_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      instance_id\n      activity_name\n      avg_bbox_height\n      avg_bbox_size\n      avg_bbox_width\n      bad_alignament_score\n      bad_box_big_score\n      bad_box_score\n      bad_box_small_score\n      bad_label_score\n      bad_timing_score\n      bad_video_score\n      bad_viewpoint_score\n      collector_id\n      collection_id\n      end_frame\n      program_id\n      project_id\n      rating_score\n      review_reason\n      s3_path\n      start_frame\n      subject_id\n      created_date\n      updated_date\n      uploaded_date\n      verified\n      video_id\n      week\n      need_review_score\n    }\n    nextToken\n  }\n}"

  public var video_id: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrInstancesFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(video_id: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrInstancesFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.video_id = video_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["video_id": video_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("instanceByVideoId", arguments: ["video_id": GraphQLVariable("video_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(InstanceByVideoId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(instanceByVideoId: InstanceByVideoId? = nil) {
      self.init(snapshot: ["__typename": "Query", "instanceByVideoId": instanceByVideoId.flatMap { $0.snapshot }])
    }

    public var instanceByVideoId: InstanceByVideoId? {
      get {
        return (snapshot["instanceByVideoId"] as? Snapshot).flatMap { InstanceByVideoId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "instanceByVideoId")
      }
    }

    public struct InstanceByVideoId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrInstancesConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrInstancesConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strInstances"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
          GraphQLField("avg_bbox_height", type: .scalar(String.self)),
          GraphQLField("avg_bbox_size", type: .scalar(String.self)),
          GraphQLField("avg_bbox_width", type: .scalar(String.self)),
          GraphQLField("bad_alignament_score", type: .scalar(String.self)),
          GraphQLField("bad_box_big_score", type: .scalar(String.self)),
          GraphQLField("bad_box_score", type: .scalar(String.self)),
          GraphQLField("bad_box_small_score", type: .scalar(String.self)),
          GraphQLField("bad_label_score", type: .scalar(String.self)),
          GraphQLField("bad_timing_score", type: .scalar(String.self)),
          GraphQLField("bad_video_score", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
          GraphQLField("collector_id", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("end_frame", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("review_reason", type: .scalar(String.self)),
          GraphQLField("s3_path", type: .scalar(String.self)),
          GraphQLField("start_frame", type: .scalar(String.self)),
          GraphQLField("subject_id", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("verified", type: .scalar(Bool.self)),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("need_review_score", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
          self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var instanceId: String {
          get {
            return snapshot["instance_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_id")
          }
        }

        public var activityName: String {
          get {
            return snapshot["activity_name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "activity_name")
          }
        }

        public var avgBboxHeight: String? {
          get {
            return snapshot["avg_bbox_height"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_height")
          }
        }

        public var avgBboxSize: String? {
          get {
            return snapshot["avg_bbox_size"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_size")
          }
        }

        public var avgBboxWidth: String? {
          get {
            return snapshot["avg_bbox_width"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "avg_bbox_width")
          }
        }

        public var badAlignamentScore: String? {
          get {
            return snapshot["bad_alignament_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignament_score")
          }
        }

        public var badBoxBigScore: String? {
          get {
            return snapshot["bad_box_big_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big_score")
          }
        }

        public var badBoxScore: String? {
          get {
            return snapshot["bad_box_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_score")
          }
        }

        public var badBoxSmallScore: String? {
          get {
            return snapshot["bad_box_small_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small_score")
          }
        }

        public var badLabelScore: String? {
          get {
            return snapshot["bad_label_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label_score")
          }
        }

        public var badTimingScore: String? {
          get {
            return snapshot["bad_timing_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing_score")
          }
        }

        public var badVideoScore: String? {
          get {
            return snapshot["bad_video_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video_score")
          }
        }

        public var badViewpointScore: String? {
          get {
            return snapshot["bad_viewpoint_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
          }
        }

        public var collectorId: String? {
          get {
            return snapshot["collector_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var endFrame: String? {
          get {
            return snapshot["end_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "end_frame")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var reviewReason: String? {
          get {
            return snapshot["review_reason"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_reason")
          }
        }

        public var s3Path: String? {
          get {
            return snapshot["s3_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3_path")
          }
        }

        public var startFrame: String? {
          get {
            return snapshot["start_frame"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "start_frame")
          }
        }

        public var subjectId: String? {
          get {
            return snapshot["subject_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_id")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var verified: Bool? {
          get {
            return snapshot["verified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var needReviewScore: String? {
          get {
            return snapshot["need_review_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "need_review_score")
          }
        }
      }
    }
  }
}

public final class SubjectByStrSubjectEmailQuery: GraphQLQuery {
  public static let operationString =
    "query SubjectByStrSubjectEmail($subject_email: String, $status: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrSubjectFilterInput, $limit: Int, $nextToken: String) {\n  subjectByStrSubjectEmail(subject_email: $subject_email, status: $status, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      collector_id\n      uuid\n      subject_email\n      collector_email\n      last_activity_date\n      consent_response\n      consent_video_id\n      beard\n      ethnicity\n      eye_glasses\n      first_name\n      last_name\n      gender\n      hair_color\n      hair_length\n      uploaded_count\n      verified_count\n      created_date\n      updated_date\n      status\n      count\n      program_id\n      program_name\n      project_id\n      project_name\n    }\n    nextToken\n  }\n}"

  public var subject_email: String?
  public var status: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrSubjectFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(subject_email: String? = nil, status: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrSubjectFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.subject_email = subject_email
    self.status = status
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["subject_email": subject_email, "status": status, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("subjectByStrSubjectEmail", arguments: ["subject_email": GraphQLVariable("subject_email"), "status": GraphQLVariable("status"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(SubjectByStrSubjectEmail.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(subjectByStrSubjectEmail: SubjectByStrSubjectEmail? = nil) {
      self.init(snapshot: ["__typename": "Query", "subjectByStrSubjectEmail": subjectByStrSubjectEmail.flatMap { $0.snapshot }])
    }

    public var subjectByStrSubjectEmail: SubjectByStrSubjectEmail? {
      get {
        return (snapshot["subjectByStrSubjectEmail"] as? Snapshot).flatMap { SubjectByStrSubjectEmail(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "subjectByStrSubjectEmail")
      }
    }

    public struct SubjectByStrSubjectEmail: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrSubjectConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrSubjectConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strSubject"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("uuid", type: .scalar(String.self)),
          GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
          GraphQLField("last_activity_date", type: .scalar(String.self)),
          GraphQLField("consent_response", type: .scalar(String.self)),
          GraphQLField("consent_video_id", type: .scalar(String.self)),
          GraphQLField("beard", type: .scalar(String.self)),
          GraphQLField("ethnicity", type: .scalar(String.self)),
          GraphQLField("eye_glasses", type: .scalar(String.self)),
          GraphQLField("first_name", type: .scalar(String.self)),
          GraphQLField("last_name", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("hair_color", type: .scalar(String.self)),
          GraphQLField("hair_length", type: .scalar(String.self)),
          GraphQLField("uploaded_count", type: .scalar(String.self)),
          GraphQLField("verified_count", type: .scalar(String.self)),
          GraphQLField("created_date", type: .scalar(String.self)),
          GraphQLField("updated_date", type: .scalar(String.self)),
          GraphQLField("status", type: .nonNull(.scalar(String.self))),
          GraphQLField("count", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
          self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var uuid: String? {
          get {
            return snapshot["uuid"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uuid")
          }
        }

        public var subjectEmail: String {
          get {
            return snapshot["subject_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "subject_email")
          }
        }

        public var collectorEmail: String {
          get {
            return snapshot["collector_email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_email")
          }
        }

        public var lastActivityDate: String? {
          get {
            return snapshot["last_activity_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_activity_date")
          }
        }

        public var consentResponse: String? {
          get {
            return snapshot["consent_response"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_response")
          }
        }

        public var consentVideoId: String? {
          get {
            return snapshot["consent_video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "consent_video_id")
          }
        }

        public var beard: String? {
          get {
            return snapshot["beard"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "beard")
          }
        }

        public var ethnicity: String? {
          get {
            return snapshot["ethnicity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ethnicity")
          }
        }

        public var eyeGlasses: String? {
          get {
            return snapshot["eye_glasses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "eye_glasses")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["first_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "first_name")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["last_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "last_name")
          }
        }

        public var gender: String? {
          get {
            return snapshot["gender"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var hairColor: String? {
          get {
            return snapshot["hair_color"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hair_color")
          }
        }

        public var hairLength: String? {
          get {
            return snapshot["hair_length"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hair_length")
          }
        }

        public var uploadedCount: String? {
          get {
            return snapshot["uploaded_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_count")
          }
        }

        public var verifiedCount: String? {
          get {
            return snapshot["verified_count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "verified_count")
          }
        }

        public var createdDate: String? {
          get {
            return snapshot["created_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "created_date")
          }
        }

        public var updatedDate: String? {
          get {
            return snapshot["updated_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updated_date")
          }
        }

        public var status: String {
          get {
            return snapshot["status"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var count: String? {
          get {
            return snapshot["count"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "count")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }
      }
    }
  }
}

public final class RatingByStrCollectorIdQuery: GraphQLQuery {
  public static let operationString =
    "query RatingByStrCollectorId($reviewer_id: String, $video_id: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrRatingFilterInput, $limit: Int, $nextToken: String) {\n  ratingByStrCollectorId(reviewer_id: $reviewer_id, video_id: $video_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      reviewer_id\n      up\n      video_id\n      week\n      bad_alignment\n      bad_box_big\n      bad_box_small\n      bad_label\n      bad_timing\n      bad_video\n      bad_viewpoint\n      awkward_scene\n      bad_visibility\n      project_id\n      program_id\n      project_name\n      program_name\n      collection_name\n      collection_id\n      rating_responses\n      bad_diversity\n      submitted_time\n      video_uploaded_date\n    }\n    nextToken\n  }\n}"

  public var reviewer_id: String?
  public var video_id: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrRatingFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(reviewer_id: String? = nil, video_id: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrRatingFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.reviewer_id = reviewer_id
    self.video_id = video_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["reviewer_id": reviewer_id, "video_id": video_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("ratingByStrCollectorId", arguments: ["reviewer_id": GraphQLVariable("reviewer_id"), "video_id": GraphQLVariable("video_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(RatingByStrCollectorId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(ratingByStrCollectorId: RatingByStrCollectorId? = nil) {
      self.init(snapshot: ["__typename": "Query", "ratingByStrCollectorId": ratingByStrCollectorId.flatMap { $0.snapshot }])
    }

    public var ratingByStrCollectorId: RatingByStrCollectorId? {
      get {
        return (snapshot["ratingByStrCollectorId"] as? Snapshot).flatMap { RatingByStrCollectorId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "ratingByStrCollectorId")
      }
    }

    public struct RatingByStrCollectorId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrRatingConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrRatingConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strRating"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("up", type: .scalar(Int.self)),
          GraphQLField("video_id", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("bad_alignment", type: .scalar(String.self)),
          GraphQLField("bad_box_big", type: .scalar(String.self)),
          GraphQLField("bad_box_small", type: .scalar(String.self)),
          GraphQLField("bad_label", type: .scalar(String.self)),
          GraphQLField("bad_timing", type: .scalar(String.self)),
          GraphQLField("bad_video", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint", type: .scalar(String.self)),
          GraphQLField("awkward_scene", type: .scalar(String.self)),
          GraphQLField("bad_visibility", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("rating_responses", type: .scalar(String.self)),
          GraphQLField("bad_diversity", type: .scalar(String.self)),
          GraphQLField("submitted_time", type: .scalar(String.self)),
          GraphQLField("video_uploaded_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
          self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reviewerId: String {
          get {
            return snapshot["reviewer_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_id")
          }
        }

        public var up: Int? {
          get {
            return snapshot["up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "up")
          }
        }

        public var videoId: String? {
          get {
            return snapshot["video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var badAlignment: String? {
          get {
            return snapshot["bad_alignment"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignment")
          }
        }

        public var badBoxBig: String? {
          get {
            return snapshot["bad_box_big"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big")
          }
        }

        public var badBoxSmall: String? {
          get {
            return snapshot["bad_box_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small")
          }
        }

        public var badLabel: String? {
          get {
            return snapshot["bad_label"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label")
          }
        }

        public var badTiming: String? {
          get {
            return snapshot["bad_timing"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing")
          }
        }

        public var badVideo: String? {
          get {
            return snapshot["bad_video"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video")
          }
        }

        public var badViewpoint: String? {
          get {
            return snapshot["bad_viewpoint"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint")
          }
        }

        public var awkwardScene: String? {
          get {
            return snapshot["awkward_scene"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "awkward_scene")
          }
        }

        public var badVisibility: String? {
          get {
            return snapshot["bad_visibility"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_visibility")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var ratingResponses: String? {
          get {
            return snapshot["rating_responses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_responses")
          }
        }

        public var badDiversity: String? {
          get {
            return snapshot["bad_diversity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_diversity")
          }
        }

        public var submittedTime: String? {
          get {
            return snapshot["submitted_time"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "submitted_time")
          }
        }

        public var videoUploadedDate: String? {
          get {
            return snapshot["video_uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_uploaded_date")
          }
        }
      }
    }
  }
}

public final class RatingByWeekQuery: GraphQLQuery {
  public static let operationString =
    "query RatingByWeek($week: String, $sortDirection: ModelSortDirection, $filter: ModelstrRatingFilterInput, $limit: Int, $nextToken: String) {\n  ratingByWeek(week: $week, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      reviewer_id\n      up\n      video_id\n      week\n      bad_alignment\n      bad_box_big\n      bad_box_small\n      bad_label\n      bad_timing\n      bad_video\n      bad_viewpoint\n      awkward_scene\n      bad_visibility\n      project_id\n      program_id\n      project_name\n      program_name\n      collection_name\n      collection_id\n      rating_responses\n      bad_diversity\n      submitted_time\n      video_uploaded_date\n    }\n    nextToken\n  }\n}"

  public var week: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrRatingFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(week: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrRatingFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.week = week
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["week": week, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("ratingByWeek", arguments: ["week": GraphQLVariable("week"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(RatingByWeek.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(ratingByWeek: RatingByWeek? = nil) {
      self.init(snapshot: ["__typename": "Query", "ratingByWeek": ratingByWeek.flatMap { $0.snapshot }])
    }

    public var ratingByWeek: RatingByWeek? {
      get {
        return (snapshot["ratingByWeek"] as? Snapshot).flatMap { RatingByWeek(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "ratingByWeek")
      }
    }

    public struct RatingByWeek: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrRatingConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrRatingConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strRating"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("up", type: .scalar(Int.self)),
          GraphQLField("video_id", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("bad_alignment", type: .scalar(String.self)),
          GraphQLField("bad_box_big", type: .scalar(String.self)),
          GraphQLField("bad_box_small", type: .scalar(String.self)),
          GraphQLField("bad_label", type: .scalar(String.self)),
          GraphQLField("bad_timing", type: .scalar(String.self)),
          GraphQLField("bad_video", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint", type: .scalar(String.self)),
          GraphQLField("awkward_scene", type: .scalar(String.self)),
          GraphQLField("bad_visibility", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("rating_responses", type: .scalar(String.self)),
          GraphQLField("bad_diversity", type: .scalar(String.self)),
          GraphQLField("submitted_time", type: .scalar(String.self)),
          GraphQLField("video_uploaded_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
          self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reviewerId: String {
          get {
            return snapshot["reviewer_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_id")
          }
        }

        public var up: Int? {
          get {
            return snapshot["up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "up")
          }
        }

        public var videoId: String? {
          get {
            return snapshot["video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var badAlignment: String? {
          get {
            return snapshot["bad_alignment"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignment")
          }
        }

        public var badBoxBig: String? {
          get {
            return snapshot["bad_box_big"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big")
          }
        }

        public var badBoxSmall: String? {
          get {
            return snapshot["bad_box_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small")
          }
        }

        public var badLabel: String? {
          get {
            return snapshot["bad_label"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label")
          }
        }

        public var badTiming: String? {
          get {
            return snapshot["bad_timing"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing")
          }
        }

        public var badVideo: String? {
          get {
            return snapshot["bad_video"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video")
          }
        }

        public var badViewpoint: String? {
          get {
            return snapshot["bad_viewpoint"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint")
          }
        }

        public var awkwardScene: String? {
          get {
            return snapshot["awkward_scene"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "awkward_scene")
          }
        }

        public var badVisibility: String? {
          get {
            return snapshot["bad_visibility"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_visibility")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var ratingResponses: String? {
          get {
            return snapshot["rating_responses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_responses")
          }
        }

        public var badDiversity: String? {
          get {
            return snapshot["bad_diversity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_diversity")
          }
        }

        public var submittedTime: String? {
          get {
            return snapshot["submitted_time"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "submitted_time")
          }
        }

        public var videoUploadedDate: String? {
          get {
            return snapshot["video_uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_uploaded_date")
          }
        }
      }
    }
  }
}

public final class RatingByReviewerIdWeekQuery: GraphQLQuery {
  public static let operationString =
    "query RatingByReviewerIdWeek($reviewer_id: String, $week: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrRatingFilterInput, $limit: Int, $nextToken: String) {\n  ratingByReviewerIDWeek(reviewer_id: $reviewer_id, week: $week, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      reviewer_id\n      up\n      video_id\n      week\n      bad_alignment\n      bad_box_big\n      bad_box_small\n      bad_label\n      bad_timing\n      bad_video\n      bad_viewpoint\n      awkward_scene\n      bad_visibility\n      project_id\n      program_id\n      project_name\n      program_name\n      collection_name\n      collection_id\n      rating_responses\n      bad_diversity\n      submitted_time\n      video_uploaded_date\n    }\n    nextToken\n  }\n}"

  public var reviewer_id: String?
  public var week: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrRatingFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(reviewer_id: String? = nil, week: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrRatingFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.reviewer_id = reviewer_id
    self.week = week
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["reviewer_id": reviewer_id, "week": week, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("ratingByReviewerIDWeek", arguments: ["reviewer_id": GraphQLVariable("reviewer_id"), "week": GraphQLVariable("week"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(RatingByReviewerIdWeek.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(ratingByReviewerIdWeek: RatingByReviewerIdWeek? = nil) {
      self.init(snapshot: ["__typename": "Query", "ratingByReviewerIDWeek": ratingByReviewerIdWeek.flatMap { $0.snapshot }])
    }

    public var ratingByReviewerIdWeek: RatingByReviewerIdWeek? {
      get {
        return (snapshot["ratingByReviewerIDWeek"] as? Snapshot).flatMap { RatingByReviewerIdWeek(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "ratingByReviewerIDWeek")
      }
    }

    public struct RatingByReviewerIdWeek: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrRatingConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrRatingConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strRating"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("up", type: .scalar(Int.self)),
          GraphQLField("video_id", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("bad_alignment", type: .scalar(String.self)),
          GraphQLField("bad_box_big", type: .scalar(String.self)),
          GraphQLField("bad_box_small", type: .scalar(String.self)),
          GraphQLField("bad_label", type: .scalar(String.self)),
          GraphQLField("bad_timing", type: .scalar(String.self)),
          GraphQLField("bad_video", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint", type: .scalar(String.self)),
          GraphQLField("awkward_scene", type: .scalar(String.self)),
          GraphQLField("bad_visibility", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("rating_responses", type: .scalar(String.self)),
          GraphQLField("bad_diversity", type: .scalar(String.self)),
          GraphQLField("submitted_time", type: .scalar(String.self)),
          GraphQLField("video_uploaded_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
          self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reviewerId: String {
          get {
            return snapshot["reviewer_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_id")
          }
        }

        public var up: Int? {
          get {
            return snapshot["up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "up")
          }
        }

        public var videoId: String? {
          get {
            return snapshot["video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var badAlignment: String? {
          get {
            return snapshot["bad_alignment"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignment")
          }
        }

        public var badBoxBig: String? {
          get {
            return snapshot["bad_box_big"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big")
          }
        }

        public var badBoxSmall: String? {
          get {
            return snapshot["bad_box_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small")
          }
        }

        public var badLabel: String? {
          get {
            return snapshot["bad_label"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label")
          }
        }

        public var badTiming: String? {
          get {
            return snapshot["bad_timing"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing")
          }
        }

        public var badVideo: String? {
          get {
            return snapshot["bad_video"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video")
          }
        }

        public var badViewpoint: String? {
          get {
            return snapshot["bad_viewpoint"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint")
          }
        }

        public var awkwardScene: String? {
          get {
            return snapshot["awkward_scene"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "awkward_scene")
          }
        }

        public var badVisibility: String? {
          get {
            return snapshot["bad_visibility"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_visibility")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var ratingResponses: String? {
          get {
            return snapshot["rating_responses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_responses")
          }
        }

        public var badDiversity: String? {
          get {
            return snapshot["bad_diversity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_diversity")
          }
        }

        public var submittedTime: String? {
          get {
            return snapshot["submitted_time"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "submitted_time")
          }
        }

        public var videoUploadedDate: String? {
          get {
            return snapshot["video_uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_uploaded_date")
          }
        }
      }
    }
  }
}

public final class RatingByVideoIdQuery: GraphQLQuery {
  public static let operationString =
    "query RatingByVideoId($video_id: String, $sortDirection: ModelSortDirection, $filter: ModelstrRatingFilterInput, $limit: Int, $nextToken: String) {\n  ratingByVideoID(video_id: $video_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      reviewer_id\n      up\n      video_id\n      week\n      bad_alignment\n      bad_box_big\n      bad_box_small\n      bad_label\n      bad_timing\n      bad_video\n      bad_viewpoint\n      awkward_scene\n      bad_visibility\n      project_id\n      program_id\n      project_name\n      program_name\n      collection_name\n      collection_id\n      rating_responses\n      bad_diversity\n      submitted_time\n      video_uploaded_date\n    }\n    nextToken\n  }\n}"

  public var video_id: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrRatingFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(video_id: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrRatingFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.video_id = video_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["video_id": video_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("ratingByVideoID", arguments: ["video_id": GraphQLVariable("video_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(RatingByVideoId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(ratingByVideoId: RatingByVideoId? = nil) {
      self.init(snapshot: ["__typename": "Query", "ratingByVideoID": ratingByVideoId.flatMap { $0.snapshot }])
    }

    public var ratingByVideoId: RatingByVideoId? {
      get {
        return (snapshot["ratingByVideoID"] as? Snapshot).flatMap { RatingByVideoId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "ratingByVideoID")
      }
    }

    public struct RatingByVideoId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrRatingConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrRatingConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strRating"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("up", type: .scalar(Int.self)),
          GraphQLField("video_id", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("bad_alignment", type: .scalar(String.self)),
          GraphQLField("bad_box_big", type: .scalar(String.self)),
          GraphQLField("bad_box_small", type: .scalar(String.self)),
          GraphQLField("bad_label", type: .scalar(String.self)),
          GraphQLField("bad_timing", type: .scalar(String.self)),
          GraphQLField("bad_video", type: .scalar(String.self)),
          GraphQLField("bad_viewpoint", type: .scalar(String.self)),
          GraphQLField("awkward_scene", type: .scalar(String.self)),
          GraphQLField("bad_visibility", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("rating_responses", type: .scalar(String.self)),
          GraphQLField("bad_diversity", type: .scalar(String.self)),
          GraphQLField("submitted_time", type: .scalar(String.self)),
          GraphQLField("video_uploaded_date", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
          self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return snapshot["id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reviewerId: String {
          get {
            return snapshot["reviewer_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "reviewer_id")
          }
        }

        public var up: Int? {
          get {
            return snapshot["up"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "up")
          }
        }

        public var videoId: String? {
          get {
            return snapshot["video_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var badAlignment: String? {
          get {
            return snapshot["bad_alignment"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_alignment")
          }
        }

        public var badBoxBig: String? {
          get {
            return snapshot["bad_box_big"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_big")
          }
        }

        public var badBoxSmall: String? {
          get {
            return snapshot["bad_box_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_box_small")
          }
        }

        public var badLabel: String? {
          get {
            return snapshot["bad_label"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_label")
          }
        }

        public var badTiming: String? {
          get {
            return snapshot["bad_timing"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_timing")
          }
        }

        public var badVideo: String? {
          get {
            return snapshot["bad_video"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_video")
          }
        }

        public var badViewpoint: String? {
          get {
            return snapshot["bad_viewpoint"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_viewpoint")
          }
        }

        public var awkwardScene: String? {
          get {
            return snapshot["awkward_scene"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "awkward_scene")
          }
        }

        public var badVisibility: String? {
          get {
            return snapshot["bad_visibility"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_visibility")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var ratingResponses: String? {
          get {
            return snapshot["rating_responses"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_responses")
          }
        }

        public var badDiversity: String? {
          get {
            return snapshot["bad_diversity"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bad_diversity")
          }
        }

        public var submittedTime: String? {
          get {
            return snapshot["submitted_time"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "submitted_time")
          }
        }

        public var videoUploadedDate: String? {
          get {
            return snapshot["video_uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_uploaded_date")
          }
        }
      }
    }
  }
}

public final class StrRatingVideoSortByAssignedDateQuery: GraphQLQuery {
  public static let operationString =
    "query StrRatingVideoSortByAssignedDate($collector_id: ID, $assigned_date: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelstrReviewAssignmentFilterInput, $limit: Int, $nextToken: String) {\n  strRatingVideoSortByAssignedDate(collector_id: $collector_id, assigned_date: $assigned_date, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      collector_id\n      video_id\n      collection_id\n      collection_name\n      program_name\n      program_id\n      project_id\n      project_name\n      duration\n      review_status\n      uploaded_date\n      week\n      instance_ids\n      video_file_path\n      annotation_file_path\n      rating_score\n      thumbnail\n      thumbnail_small\n      assigned_date\n      orientation\n    }\n    nextToken\n  }\n}"

  public var collector_id: GraphQLID?
  public var assigned_date: ModelStringKeyConditionInput?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrReviewAssignmentFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collector_id: GraphQLID? = nil, assigned_date: ModelStringKeyConditionInput? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrReviewAssignmentFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collector_id = collector_id
    self.assigned_date = assigned_date
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collector_id": collector_id, "assigned_date": assigned_date, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("strRatingVideoSortByAssignedDate", arguments: ["collector_id": GraphQLVariable("collector_id"), "assigned_date": GraphQLVariable("assigned_date"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(StrRatingVideoSortByAssignedDate.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(strRatingVideoSortByAssignedDate: StrRatingVideoSortByAssignedDate? = nil) {
      self.init(snapshot: ["__typename": "Query", "strRatingVideoSortByAssignedDate": strRatingVideoSortByAssignedDate.flatMap { $0.snapshot }])
    }

    public var strRatingVideoSortByAssignedDate: StrRatingVideoSortByAssignedDate? {
      get {
        return (snapshot["strRatingVideoSortByAssignedDate"] as? Snapshot).flatMap { StrRatingVideoSortByAssignedDate(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "strRatingVideoSortByAssignedDate")
      }
    }

    public struct StrRatingVideoSortByAssignedDate: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrReviewAssignmentConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrReviewAssignmentConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strReviewAssignment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("review_status", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("instance_ids", type: .scalar(String.self)),
          GraphQLField("video_file_path", type: .scalar(String.self)),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("orientation", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
          self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var reviewStatus: String? {
          get {
            return snapshot["review_status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_status")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var instanceIds: String? {
          get {
            return snapshot["instance_ids"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_ids")
          }
        }

        public var videoFilePath: String? {
          get {
            return snapshot["video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var assignedDate: String {
          get {
            return snapshot["assigned_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "assigned_date")
          }
        }

        public var orientation: String? {
          get {
            return snapshot["orientation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "orientation")
          }
        }
      }
    }
  }
}

public final class AssignmentByVideoIdQuery: GraphQLQuery {
  public static let operationString =
    "query AssignmentByVideoId($video_id: String, $sortDirection: ModelSortDirection, $filter: ModelstrReviewAssignmentFilterInput, $limit: Int, $nextToken: String) {\n  assignmentByVideoId(video_id: $video_id, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      collector_id\n      video_id\n      collection_id\n      collection_name\n      program_name\n      program_id\n      project_id\n      project_name\n      duration\n      review_status\n      uploaded_date\n      week\n      instance_ids\n      video_file_path\n      annotation_file_path\n      rating_score\n      thumbnail\n      thumbnail_small\n      assigned_date\n      orientation\n    }\n    nextToken\n  }\n}"

  public var video_id: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelstrReviewAssignmentFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(video_id: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelstrReviewAssignmentFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.video_id = video_id
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["video_id": video_id, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("assignmentByVideoId", arguments: ["video_id": GraphQLVariable("video_id"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(AssignmentByVideoId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(assignmentByVideoId: AssignmentByVideoId? = nil) {
      self.init(snapshot: ["__typename": "Query", "assignmentByVideoId": assignmentByVideoId.flatMap { $0.snapshot }])
    }

    public var assignmentByVideoId: AssignmentByVideoId? {
      get {
        return (snapshot["assignmentByVideoId"] as? Snapshot).flatMap { AssignmentByVideoId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "assignmentByVideoId")
      }
    }

    public struct AssignmentByVideoId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelstrReviewAssignmentConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelstrReviewAssignmentConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["strReviewAssignment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("collection_id", type: .scalar(String.self)),
          GraphQLField("collection_name", type: .scalar(String.self)),
          GraphQLField("program_name", type: .scalar(String.self)),
          GraphQLField("program_id", type: .scalar(String.self)),
          GraphQLField("project_id", type: .scalar(String.self)),
          GraphQLField("project_name", type: .scalar(String.self)),
          GraphQLField("duration", type: .scalar(String.self)),
          GraphQLField("review_status", type: .scalar(String.self)),
          GraphQLField("uploaded_date", type: .scalar(String.self)),
          GraphQLField("week", type: .scalar(String.self)),
          GraphQLField("instance_ids", type: .scalar(String.self)),
          GraphQLField("video_file_path", type: .scalar(String.self)),
          GraphQLField("annotation_file_path", type: .scalar(String.self)),
          GraphQLField("rating_score", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
          GraphQLField("thumbnail_small", type: .scalar(String.self)),
          GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
          GraphQLField("orientation", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
          self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectorId: GraphQLID {
          get {
            return snapshot["collector_id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collector_id")
          }
        }

        public var videoId: String {
          get {
            return snapshot["video_id"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_id")
          }
        }

        public var collectionId: String? {
          get {
            return snapshot["collection_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_id")
          }
        }

        public var collectionName: String? {
          get {
            return snapshot["collection_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "collection_name")
          }
        }

        public var programName: String? {
          get {
            return snapshot["program_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_name")
          }
        }

        public var programId: String? {
          get {
            return snapshot["program_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "program_id")
          }
        }

        public var projectId: String? {
          get {
            return snapshot["project_id"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_id")
          }
        }

        public var projectName: String? {
          get {
            return snapshot["project_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "project_name")
          }
        }

        public var duration: String? {
          get {
            return snapshot["duration"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "duration")
          }
        }

        public var reviewStatus: String? {
          get {
            return snapshot["review_status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "review_status")
          }
        }

        public var uploadedDate: String? {
          get {
            return snapshot["uploaded_date"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploaded_date")
          }
        }

        public var week: String? {
          get {
            return snapshot["week"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "week")
          }
        }

        public var instanceIds: String? {
          get {
            return snapshot["instance_ids"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "instance_ids")
          }
        }

        public var videoFilePath: String? {
          get {
            return snapshot["video_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "video_file_path")
          }
        }

        public var annotationFilePath: String? {
          get {
            return snapshot["annotation_file_path"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "annotation_file_path")
          }
        }

        public var ratingScore: String? {
          get {
            return snapshot["rating_score"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating_score")
          }
        }

        public var thumbnail: String? {
          get {
            return snapshot["thumbnail"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail")
          }
        }

        public var thumbnailSmall: String? {
          get {
            return snapshot["thumbnail_small"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "thumbnail_small")
          }
        }

        public var assignedDate: String {
          get {
            return snapshot["assigned_date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "assigned_date")
          }
        }

        public var orientation: String? {
          get {
            return snapshot["orientation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "orientation")
          }
        }
      }
    }
  }
}

public final class OnCreateStrCollectionsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrCollections {\n  onCreateStrCollections {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrCollections", type: .object(OnCreateStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrCollections: OnCreateStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrCollections": onCreateStrCollections.flatMap { $0.snapshot }])
    }

    public var onCreateStrCollections: OnCreateStrCollection? {
      get {
        return (snapshot["onCreateStrCollections"] as? Snapshot).flatMap { OnCreateStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrCollections")
      }
    }

    public struct OnCreateStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class OnUpdateStrCollectionsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrCollections {\n  onUpdateStrCollections {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrCollections", type: .object(OnUpdateStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrCollections: OnUpdateStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrCollections": onUpdateStrCollections.flatMap { $0.snapshot }])
    }

    public var onUpdateStrCollections: OnUpdateStrCollection? {
      get {
        return (snapshot["onUpdateStrCollections"] as? Snapshot).flatMap { OnUpdateStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrCollections")
      }
    }

    public struct OnUpdateStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class OnDeleteStrCollectionsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrCollections {\n  onDeleteStrCollections {\n    __typename\n    id\n    name\n    project_id\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    object_id\n    objects_list\n    activities\n    activity_short_names\n    created_date\n    updated_date\n    collection_id\n    default_object\n    active\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrCollections", type: .object(OnDeleteStrCollection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrCollections: OnDeleteStrCollection? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrCollections": onDeleteStrCollections.flatMap { $0.snapshot }])
    }

    public var onDeleteStrCollections: OnDeleteStrCollection? {
      get {
        return (snapshot["onDeleteStrCollections"] as? Snapshot).flatMap { OnDeleteStrCollection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrCollections")
      }
    }

    public struct OnDeleteStrCollection: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollections"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("object_id", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, projectId: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectId: String? = nil, objectsList: String? = nil, activities: String? = nil, activityShortNames: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectionId: String? = nil, defaultObject: String? = nil, active: Bool? = nil) {
        self.init(snapshot: ["__typename": "strCollections", "id": id, "name": name, "project_id": projectId, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "object_id": objectId, "objects_list": objectsList, "activities": activities, "activity_short_names": activityShortNames, "created_date": createdDate, "updated_date": updatedDate, "collection_id": collectionId, "default_object": defaultObject, "active": active])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectId: String? {
        get {
          return snapshot["object_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_id")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }
    }
  }
}

public final class OnCreateStrProjectsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrProjects {\n  onCreateStrProjects {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrProjects", type: .object(OnCreateStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrProjects: OnCreateStrProject? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrProjects": onCreateStrProjects.flatMap { $0.snapshot }])
    }

    public var onCreateStrProjects: OnCreateStrProject? {
      get {
        return (snapshot["onCreateStrProjects"] as? Snapshot).flatMap { OnCreateStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrProjects")
      }
    }

    public struct OnCreateStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class OnUpdateStrProjectsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrProjects {\n  onUpdateStrProjects {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrProjects", type: .object(OnUpdateStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrProjects: OnUpdateStrProject? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrProjects": onUpdateStrProjects.flatMap { $0.snapshot }])
    }

    public var onUpdateStrProjects: OnUpdateStrProject? {
      get {
        return (snapshot["onUpdateStrProjects"] as? Snapshot).flatMap { OnUpdateStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrProjects")
      }
    }

    public struct OnUpdateStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class OnDeleteStrProjectsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrProjects {\n  onDeleteStrProjects {\n    __typename\n    id\n    name\n    activity_count\n    created_date\n    updated_date\n    project_id\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrProjects", type: .object(OnDeleteStrProject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrProjects: OnDeleteStrProject? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrProjects": onDeleteStrProjects.flatMap { $0.snapshot }])
    }

    public var onDeleteStrProjects: OnDeleteStrProject? {
      get {
        return (snapshot["onDeleteStrProjects"] as? Snapshot).flatMap { OnDeleteStrProject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrProjects")
      }
    }

    public struct OnDeleteStrProject: GraphQLSelectionSet {
      public static let possibleTypes = ["strProjects"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, activityCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, projectId: String? = nil) {
        self.init(snapshot: ["__typename": "strProjects", "id": id, "name": name, "activity_count": activityCount, "created_date": createdDate, "updated_date": updatedDate, "project_id": projectId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var activityCount: String? {
        get {
          return snapshot["activity_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }
    }
  }
}

public final class OnCreateStrActivitiesSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrActivities {\n  onCreateStrActivities {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrActivities", type: .object(OnCreateStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrActivities: OnCreateStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrActivities": onCreateStrActivities.flatMap { $0.snapshot }])
    }

    public var onCreateStrActivities: OnCreateStrActivity? {
      get {
        return (snapshot["onCreateStrActivities"] as? Snapshot).flatMap { OnCreateStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrActivities")
      }
    }

    public struct OnCreateStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class OnUpdateStrActivitiesSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrActivities {\n  onUpdateStrActivities {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrActivities", type: .object(OnUpdateStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrActivities: OnUpdateStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrActivities": onUpdateStrActivities.flatMap { $0.snapshot }])
    }

    public var onUpdateStrActivities: OnUpdateStrActivity? {
      get {
        return (snapshot["onUpdateStrActivities"] as? Snapshot).flatMap { OnUpdateStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrActivities")
      }
    }

    public struct OnUpdateStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class OnDeleteStrActivitiesSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrActivities {\n  onDeleteStrActivities {\n    __typename\n    id\n    activity_id\n    name\n    collection_id\n    project_id\n    program_id\n    counts\n    short_name\n    created_date\n    updated_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrActivities", type: .object(OnDeleteStrActivity.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrActivities: OnDeleteStrActivity? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrActivities": onDeleteStrActivities.flatMap { $0.snapshot }])
    }

    public var onDeleteStrActivities: OnDeleteStrActivity? {
      get {
        return (snapshot["onDeleteStrActivities"] as? Snapshot).flatMap { OnDeleteStrActivity(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrActivities")
      }
    }

    public struct OnDeleteStrActivity: GraphQLSelectionSet {
      public static let possibleTypes = ["strActivities"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("activity_id", type: .scalar(String.self)),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("counts", type: .scalar(String.self)),
        GraphQLField("short_name", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, activityId: String? = nil, name: String, collectionId: String? = nil, projectId: String? = nil, programId: String? = nil, counts: String? = nil, shortName: String? = nil, createdDate: String? = nil, updatedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strActivities", "id": id, "activity_id": activityId, "name": name, "collection_id": collectionId, "project_id": projectId, "program_id": programId, "counts": counts, "short_name": shortName, "created_date": createdDate, "updated_date": updatedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var activityId: String? {
        get {
          return snapshot["activity_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var counts: String? {
        get {
          return snapshot["counts"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "counts")
        }
      }

      public var shortName: String? {
        get {
          return snapshot["short_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_name")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }
    }
  }
}

public final class OnCreateStrProgramSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrProgram {\n  onCreateStrProgram {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrProgram", type: .object(OnCreateStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrProgram: OnCreateStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrProgram": onCreateStrProgram.flatMap { $0.snapshot }])
    }

    public var onCreateStrProgram: OnCreateStrProgram? {
      get {
        return (snapshot["onCreateStrProgram"] as? Snapshot).flatMap { OnCreateStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrProgram")
      }
    }

    public struct OnCreateStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class OnUpdateStrProgramSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrProgram {\n  onUpdateStrProgram {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrProgram", type: .object(OnUpdateStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrProgram: OnUpdateStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrProgram": onUpdateStrProgram.flatMap { $0.snapshot }])
    }

    public var onUpdateStrProgram: OnUpdateStrProgram? {
      get {
        return (snapshot["onUpdateStrProgram"] as? Snapshot).flatMap { OnUpdateStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrProgram")
      }
    }

    public struct OnUpdateStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class OnDeleteStrProgramSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrProgram {\n  onDeleteStrProgram {\n    __typename\n    id\n    name\n    program_id\n    client\n    created_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrProgram", type: .object(OnDeleteStrProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrProgram: OnDeleteStrProgram? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrProgram": onDeleteStrProgram.flatMap { $0.snapshot }])
    }

    public var onDeleteStrProgram: OnDeleteStrProgram? {
      get {
        return (snapshot["onDeleteStrProgram"] as? Snapshot).flatMap { OnDeleteStrProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrProgram")
      }
    }

    public struct OnDeleteStrProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["strProgram"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("client", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, name: String, programId: String? = nil, client: String? = nil, createdDate: String? = nil) {
        self.init(snapshot: ["__typename": "strProgram", "id": id, "name": name, "program_id": programId, "client": client, "created_date": createdDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var client: String? {
        get {
          return snapshot["client"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "client")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }
    }
  }
}

public final class OnCreateStrCollectorSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrCollector {\n  onCreateStrCollector {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrCollector", type: .object(OnCreateStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrCollector: OnCreateStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrCollector": onCreateStrCollector.flatMap { $0.snapshot }])
    }

    public var onCreateStrCollector: OnCreateStrCollector? {
      get {
        return (snapshot["onCreateStrCollector"] as? Snapshot).flatMap { OnCreateStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrCollector")
      }
    }

    public struct OnCreateStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class OnUpdateStrCollectorSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrCollector {\n  onUpdateStrCollector {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrCollector", type: .object(OnUpdateStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrCollector: OnUpdateStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrCollector": onUpdateStrCollector.flatMap { $0.snapshot }])
    }

    public var onUpdateStrCollector: OnUpdateStrCollector? {
      get {
        return (snapshot["onUpdateStrCollector"] as? Snapshot).flatMap { OnUpdateStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrCollector")
      }
    }

    public struct OnUpdateStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class OnDeleteStrCollectorSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrCollector {\n  onDeleteStrCollector {\n    __typename\n    collector_id\n    collector_email\n    first_name\n    last_name\n    password\n    query_attribute\n    is_consented\n    is_dropbox_integrated\n    is_paypal_integrated\n    dropbox_token\n    paypal_email_id\n    uploaded_count\n    verified_count\n    not_verified_count\n    consented_count\n    authorized\n    outstanding_amount\n    collector_score\n    reviewer_score\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrCollector", type: .object(OnDeleteStrCollector.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrCollector: OnDeleteStrCollector? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrCollector": onDeleteStrCollector.flatMap { $0.snapshot }])
    }

    public var onDeleteStrCollector: OnDeleteStrCollector? {
      get {
        return (snapshot["onDeleteStrCollector"] as? Snapshot).flatMap { OnDeleteStrCollector(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrCollector")
      }
    }

    public struct OnDeleteStrCollector: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollector"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("password", type: .scalar(String.self)),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("is_consented", type: .scalar(Bool.self)),
        GraphQLField("is_dropbox_integrated", type: .scalar(Bool.self)),
        GraphQLField("is_paypal_integrated", type: .scalar(Bool.self)),
        GraphQLField("dropbox_token", type: .scalar(String.self)),
        GraphQLField("paypal_email_id", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("not_verified_count", type: .scalar(String.self)),
        GraphQLField("consented_count", type: .scalar(String.self)),
        GraphQLField("authorized", type: .scalar(String.self)),
        GraphQLField("outstanding_amount", type: .scalar(String.self)),
        GraphQLField("collector_score", type: .scalar(String.self)),
        GraphQLField("reviewer_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String, firstName: String, lastName: String, password: String? = nil, queryAttribute: String, isConsented: Bool? = nil, isDropboxIntegrated: Bool? = nil, isPaypalIntegrated: Bool? = nil, dropboxToken: String? = nil, paypalEmailId: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, notVerifiedCount: String? = nil, consentedCount: String? = nil, authorized: String? = nil, outstandingAmount: String? = nil, collectorScore: String? = nil, reviewerScore: String? = nil) {
        self.init(snapshot: ["__typename": "strCollector", "collector_id": collectorId, "collector_email": collectorEmail, "first_name": firstName, "last_name": lastName, "password": password, "query_attribute": queryAttribute, "is_consented": isConsented, "is_dropbox_integrated": isDropboxIntegrated, "is_paypal_integrated": isPaypalIntegrated, "dropbox_token": dropboxToken, "paypal_email_id": paypalEmailId, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "not_verified_count": notVerifiedCount, "consented_count": consentedCount, "authorized": authorized, "outstanding_amount": outstandingAmount, "collector_score": collectorScore, "reviewer_score": reviewerScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var firstName: String {
        get {
          return snapshot["first_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String {
        get {
          return snapshot["last_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var password: String? {
        get {
          return snapshot["password"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "password")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var isConsented: Bool? {
        get {
          return snapshot["is_consented"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_consented")
        }
      }

      public var isDropboxIntegrated: Bool? {
        get {
          return snapshot["is_dropbox_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_dropbox_integrated")
        }
      }

      public var isPaypalIntegrated: Bool? {
        get {
          return snapshot["is_paypal_integrated"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "is_paypal_integrated")
        }
      }

      public var dropboxToken: String? {
        get {
          return snapshot["dropbox_token"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "dropbox_token")
        }
      }

      public var paypalEmailId: String? {
        get {
          return snapshot["paypal_email_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "paypal_email_id")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var notVerifiedCount: String? {
        get {
          return snapshot["not_verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "not_verified_count")
        }
      }

      public var consentedCount: String? {
        get {
          return snapshot["consented_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consented_count")
        }
      }

      public var authorized: String? {
        get {
          return snapshot["authorized"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorized")
        }
      }

      public var outstandingAmount: String? {
        get {
          return snapshot["outstanding_amount"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "outstanding_amount")
        }
      }

      public var collectorScore: String? {
        get {
          return snapshot["collector_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_score")
        }
      }

      public var reviewerScore: String? {
        get {
          return snapshot["reviewer_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_score")
        }
      }
    }
  }
}

public final class OnCreateStrCollectionsAssignmentSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrCollectionsAssignment {\n  onCreateStrCollectionsAssignment {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrCollectionsAssignment", type: .object(OnCreateStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrCollectionsAssignment: OnCreateStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrCollectionsAssignment": onCreateStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var onCreateStrCollectionsAssignment: OnCreateStrCollectionsAssignment? {
      get {
        return (snapshot["onCreateStrCollectionsAssignment"] as? Snapshot).flatMap { OnCreateStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrCollectionsAssignment")
      }
    }

    public struct OnCreateStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class OnUpdateStrCollectionsAssignmentSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrCollectionsAssignment {\n  onUpdateStrCollectionsAssignment {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrCollectionsAssignment", type: .object(OnUpdateStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrCollectionsAssignment: OnUpdateStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrCollectionsAssignment": onUpdateStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var onUpdateStrCollectionsAssignment: OnUpdateStrCollectionsAssignment? {
      get {
        return (snapshot["onUpdateStrCollectionsAssignment"] as? Snapshot).flatMap { OnUpdateStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrCollectionsAssignment")
      }
    }

    public struct OnUpdateStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class OnDeleteStrCollectionsAssignmentSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrCollectionsAssignment {\n  onDeleteStrCollectionsAssignment {\n    __typename\n    collector_id\n    collector_email\n    collection_name\n    project_id\n    project_name\n    program_id\n    program_name\n    training_video_url\n    training_video_json_url\n    training_videos\n    training_videos_low\n    collection_description\n    objects_list\n    collection_id\n    default_object\n    activities\n    training_videos_overlay\n    activity_short_names\n    active\n    isTrainingVideoEnabled\n    isConsentRequired\n    consent_overlay_text\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrCollectionsAssignment", type: .object(OnDeleteStrCollectionsAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrCollectionsAssignment: OnDeleteStrCollectionsAssignment? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrCollectionsAssignment": onDeleteStrCollectionsAssignment.flatMap { $0.snapshot }])
    }

    public var onDeleteStrCollectionsAssignment: OnDeleteStrCollectionsAssignment? {
      get {
        return (snapshot["onDeleteStrCollectionsAssignment"] as? Snapshot).flatMap { OnDeleteStrCollectionsAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrCollectionsAssignment")
      }
    }

    public struct OnDeleteStrCollectionsAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strCollectionsAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("collector_email", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("training_video_url", type: .scalar(String.self)),
        GraphQLField("training_video_json_url", type: .scalar(String.self)),
        GraphQLField("training_videos", type: .scalar(String.self)),
        GraphQLField("training_videos_low", type: .scalar(String.self)),
        GraphQLField("collection_description", type: .scalar(String.self)),
        GraphQLField("objects_list", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("default_object", type: .scalar(String.self)),
        GraphQLField("activities", type: .scalar(String.self)),
        GraphQLField("training_videos_overlay", type: .scalar(String.self)),
        GraphQLField("activity_short_names", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("isTrainingVideoEnabled", type: .scalar(Bool.self)),
        GraphQLField("isConsentRequired", type: .scalar(Bool.self)),
        GraphQLField("consent_overlay_text", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, collectorEmail: String? = nil, collectionName: String? = nil, projectId: String? = nil, projectName: String? = nil, programId: String? = nil, programName: String? = nil, trainingVideoUrl: String? = nil, trainingVideoJsonUrl: String? = nil, trainingVideos: String? = nil, trainingVideosLow: String? = nil, collectionDescription: String? = nil, objectsList: String? = nil, collectionId: String, defaultObject: String? = nil, activities: String? = nil, trainingVideosOverlay: String? = nil, activityShortNames: String? = nil, active: Bool? = nil, isTrainingVideoEnabled: Bool? = nil, isConsentRequired: Bool? = nil, consentOverlayText: String? = nil) {
        self.init(snapshot: ["__typename": "strCollectionsAssignment", "collector_id": collectorId, "collector_email": collectorEmail, "collection_name": collectionName, "project_id": projectId, "project_name": projectName, "program_id": programId, "program_name": programName, "training_video_url": trainingVideoUrl, "training_video_json_url": trainingVideoJsonUrl, "training_videos": trainingVideos, "training_videos_low": trainingVideosLow, "collection_description": collectionDescription, "objects_list": objectsList, "collection_id": collectionId, "default_object": defaultObject, "activities": activities, "training_videos_overlay": trainingVideosOverlay, "activity_short_names": activityShortNames, "active": active, "isTrainingVideoEnabled": isTrainingVideoEnabled, "isConsentRequired": isConsentRequired, "consent_overlay_text": consentOverlayText])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectorEmail: String? {
        get {
          return snapshot["collector_email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var trainingVideoUrl: String? {
        get {
          return snapshot["training_video_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_url")
        }
      }

      public var trainingVideoJsonUrl: String? {
        get {
          return snapshot["training_video_json_url"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_video_json_url")
        }
      }

      public var trainingVideos: String? {
        get {
          return snapshot["training_videos"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos")
        }
      }

      public var trainingVideosLow: String? {
        get {
          return snapshot["training_videos_low"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_low")
        }
      }

      public var collectionDescription: String? {
        get {
          return snapshot["collection_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_description")
        }
      }

      public var objectsList: String? {
        get {
          return snapshot["objects_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "objects_list")
        }
      }

      public var collectionId: String {
        get {
          return snapshot["collection_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var defaultObject: String? {
        get {
          return snapshot["default_object"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "default_object")
        }
      }

      public var activities: String? {
        get {
          return snapshot["activities"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities")
        }
      }

      public var trainingVideosOverlay: String? {
        get {
          return snapshot["training_videos_overlay"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "training_videos_overlay")
        }
      }

      public var activityShortNames: String? {
        get {
          return snapshot["activity_short_names"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_short_names")
        }
      }

      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      public var isTrainingVideoEnabled: Bool? {
        get {
          return snapshot["isTrainingVideoEnabled"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isTrainingVideoEnabled")
        }
      }

      public var isConsentRequired: Bool? {
        get {
          return snapshot["isConsentRequired"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isConsentRequired")
        }
      }

      public var consentOverlayText: String? {
        get {
          return snapshot["consent_overlay_text"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_overlay_text")
        }
      }
    }
  }
}

public final class OnCreateStrVideosSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrVideos {\n  onCreateStrVideos {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrVideos", type: .object(OnCreateStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrVideos: OnCreateStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrVideos": onCreateStrVideos.flatMap { $0.snapshot }])
    }

    public var onCreateStrVideos: OnCreateStrVideo? {
      get {
        return (snapshot["onCreateStrVideos"] as? Snapshot).flatMap { OnCreateStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrVideos")
      }
    }

    public struct OnCreateStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class OnUpdateStrVideosSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrVideos {\n  onUpdateStrVideos {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrVideos", type: .object(OnUpdateStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrVideos: OnUpdateStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrVideos": onUpdateStrVideos.flatMap { $0.snapshot }])
    }

    public var onUpdateStrVideos: OnUpdateStrVideo? {
      get {
        return (snapshot["onUpdateStrVideos"] as? Snapshot).flatMap { OnUpdateStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrVideos")
      }
    }

    public struct OnUpdateStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class OnDeleteStrVideosSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrVideos {\n  onDeleteStrVideos {\n    __typename\n    id\n    raw_video_file_path\n    annotation_file_path\n    video_id\n    collector_id\n    project_id\n    collection_id\n    collection_name\n    activities_list\n    object_label_list\n    thumbs_up\n    thumbs_down\n    created_date\n    updated_date\n    collected_date\n    latitude\n    longitude\n    processed_video_file_path\n    rating\n    subject_id\n    verified\n    video_sharing_link\n    json_sharing_link\n    rating_score\n    status\n    status_reason\n    thumbnail\n    thumbnail_small\n    duration\n    display_duration\n    uploaded_date\n    query_attribute\n    video_state\n    week\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrVideos", type: .object(OnDeleteStrVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrVideos: OnDeleteStrVideo? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrVideos": onDeleteStrVideos.flatMap { $0.snapshot }])
    }

    public var onDeleteStrVideos: OnDeleteStrVideo? {
      get {
        return (snapshot["onDeleteStrVideos"] as? Snapshot).flatMap { OnDeleteStrVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrVideos")
      }
    }

    public struct OnDeleteStrVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["strVideos"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("raw_video_file_path", type: .nonNull(.scalar(String.self))),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("activities_list", type: .scalar(String.self)),
        GraphQLField("object_label_list", type: .scalar(String.self)),
        GraphQLField("thumbs_up", type: .scalar(Int.self)),
        GraphQLField("thumbs_down", type: .scalar(Int.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("collected_date", type: .scalar(String.self)),
        GraphQLField("latitude", type: .scalar(String.self)),
        GraphQLField("longitude", type: .scalar(String.self)),
        GraphQLField("processed_video_file_path", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_sharing_link", type: .scalar(String.self)),
        GraphQLField("json_sharing_link", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("status_reason", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("display_duration", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("query_attribute", type: .nonNull(.scalar(String.self))),
        GraphQLField("video_state", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, rawVideoFilePath: String, annotationFilePath: String? = nil, videoId: String, collectorId: String, projectId: String? = nil, collectionId: String? = nil, collectionName: String? = nil, activitiesList: String? = nil, objectLabelList: String? = nil, thumbsUp: Int? = nil, thumbsDown: Int? = nil, createdDate: String? = nil, updatedDate: String? = nil, collectedDate: String? = nil, latitude: String? = nil, longitude: String? = nil, processedVideoFilePath: String? = nil, rating: String? = nil, subjectId: String? = nil, verified: Bool? = nil, videoSharingLink: String? = nil, jsonSharingLink: String? = nil, ratingScore: String? = nil, status: String? = nil, statusReason: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, duration: String? = nil, displayDuration: String? = nil, uploadedDate: String, queryAttribute: String, videoState: String? = nil, week: String? = nil) {
        self.init(snapshot: ["__typename": "strVideos", "id": id, "raw_video_file_path": rawVideoFilePath, "annotation_file_path": annotationFilePath, "video_id": videoId, "collector_id": collectorId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "activities_list": activitiesList, "object_label_list": objectLabelList, "thumbs_up": thumbsUp, "thumbs_down": thumbsDown, "created_date": createdDate, "updated_date": updatedDate, "collected_date": collectedDate, "latitude": latitude, "longitude": longitude, "processed_video_file_path": processedVideoFilePath, "rating": rating, "subject_id": subjectId, "verified": verified, "video_sharing_link": videoSharingLink, "json_sharing_link": jsonSharingLink, "rating_score": ratingScore, "status": status, "status_reason": statusReason, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "duration": duration, "display_duration": displayDuration, "uploaded_date": uploadedDate, "query_attribute": queryAttribute, "video_state": videoState, "week": week])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var rawVideoFilePath: String {
        get {
          return snapshot["raw_video_file_path"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "raw_video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectorId: String {
        get {
          return snapshot["collector_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var activitiesList: String? {
        get {
          return snapshot["activities_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activities_list")
        }
      }

      public var objectLabelList: String? {
        get {
          return snapshot["object_label_list"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "object_label_list")
        }
      }

      public var thumbsUp: Int? {
        get {
          return snapshot["thumbs_up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_up")
        }
      }

      public var thumbsDown: Int? {
        get {
          return snapshot["thumbs_down"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbs_down")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var collectedDate: String? {
        get {
          return snapshot["collected_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collected_date")
        }
      }

      public var latitude: String? {
        get {
          return snapshot["latitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      public var longitude: String? {
        get {
          return snapshot["longitude"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      public var processedVideoFilePath: String? {
        get {
          return snapshot["processed_video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "processed_video_file_path")
        }
      }

      public var rating: String? {
        get {
          return snapshot["rating"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoSharingLink: String? {
        get {
          return snapshot["video_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_sharing_link")
        }
      }

      public var jsonSharingLink: String? {
        get {
          return snapshot["json_sharing_link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "json_sharing_link")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var statusReason: String? {
        get {
          return snapshot["status_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status_reason")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var displayDuration: String? {
        get {
          return snapshot["display_duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "display_duration")
        }
      }

      public var uploadedDate: String {
        get {
          return snapshot["uploaded_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var queryAttribute: String {
        get {
          return snapshot["query_attribute"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "query_attribute")
        }
      }

      public var videoState: String? {
        get {
          return snapshot["video_state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_state")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }
    }
  }
}

public final class OnCreateStrInstancesSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrInstances {\n  onCreateStrInstances {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrInstances", type: .object(OnCreateStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrInstances: OnCreateStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrInstances": onCreateStrInstances.flatMap { $0.snapshot }])
    }

    public var onCreateStrInstances: OnCreateStrInstance? {
      get {
        return (snapshot["onCreateStrInstances"] as? Snapshot).flatMap { OnCreateStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrInstances")
      }
    }

    public struct OnCreateStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class OnUpdateStrInstancesSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrInstances {\n  onUpdateStrInstances {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrInstances", type: .object(OnUpdateStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrInstances: OnUpdateStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrInstances": onUpdateStrInstances.flatMap { $0.snapshot }])
    }

    public var onUpdateStrInstances: OnUpdateStrInstance? {
      get {
        return (snapshot["onUpdateStrInstances"] as? Snapshot).flatMap { OnUpdateStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrInstances")
      }
    }

    public struct OnUpdateStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class OnDeleteStrInstancesSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrInstances {\n  onDeleteStrInstances {\n    __typename\n    id\n    instance_id\n    activity_name\n    avg_bbox_height\n    avg_bbox_size\n    avg_bbox_width\n    bad_alignament_score\n    bad_box_big_score\n    bad_box_score\n    bad_box_small_score\n    bad_label_score\n    bad_timing_score\n    bad_video_score\n    bad_viewpoint_score\n    collector_id\n    collection_id\n    end_frame\n    program_id\n    project_id\n    rating_score\n    review_reason\n    s3_path\n    start_frame\n    subject_id\n    created_date\n    updated_date\n    uploaded_date\n    verified\n    video_id\n    week\n    need_review_score\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrInstances", type: .object(OnDeleteStrInstance.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrInstances: OnDeleteStrInstance? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrInstances": onDeleteStrInstances.flatMap { $0.snapshot }])
    }

    public var onDeleteStrInstances: OnDeleteStrInstance? {
      get {
        return (snapshot["onDeleteStrInstances"] as? Snapshot).flatMap { OnDeleteStrInstance(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrInstances")
      }
    }

    public struct OnDeleteStrInstance: GraphQLSelectionSet {
      public static let possibleTypes = ["strInstances"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("instance_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("activity_name", type: .nonNull(.scalar(String.self))),
        GraphQLField("avg_bbox_height", type: .scalar(String.self)),
        GraphQLField("avg_bbox_size", type: .scalar(String.self)),
        GraphQLField("avg_bbox_width", type: .scalar(String.self)),
        GraphQLField("bad_alignament_score", type: .scalar(String.self)),
        GraphQLField("bad_box_big_score", type: .scalar(String.self)),
        GraphQLField("bad_box_score", type: .scalar(String.self)),
        GraphQLField("bad_box_small_score", type: .scalar(String.self)),
        GraphQLField("bad_label_score", type: .scalar(String.self)),
        GraphQLField("bad_timing_score", type: .scalar(String.self)),
        GraphQLField("bad_video_score", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint_score", type: .scalar(String.self)),
        GraphQLField("collector_id", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("end_frame", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("review_reason", type: .scalar(String.self)),
        GraphQLField("s3_path", type: .scalar(String.self)),
        GraphQLField("start_frame", type: .scalar(String.self)),
        GraphQLField("subject_id", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("verified", type: .scalar(Bool.self)),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("need_review_score", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, instanceId: String, activityName: String, avgBboxHeight: String? = nil, avgBboxSize: String? = nil, avgBboxWidth: String? = nil, badAlignamentScore: String? = nil, badBoxBigScore: String? = nil, badBoxScore: String? = nil, badBoxSmallScore: String? = nil, badLabelScore: String? = nil, badTimingScore: String? = nil, badVideoScore: String? = nil, badViewpointScore: String? = nil, collectorId: String? = nil, collectionId: String? = nil, endFrame: String? = nil, programId: String? = nil, projectId: String? = nil, ratingScore: String? = nil, reviewReason: String? = nil, s3Path: String? = nil, startFrame: String? = nil, subjectId: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, uploadedDate: String? = nil, verified: Bool? = nil, videoId: String, week: String? = nil, needReviewScore: String? = nil) {
        self.init(snapshot: ["__typename": "strInstances", "id": id, "instance_id": instanceId, "activity_name": activityName, "avg_bbox_height": avgBboxHeight, "avg_bbox_size": avgBboxSize, "avg_bbox_width": avgBboxWidth, "bad_alignament_score": badAlignamentScore, "bad_box_big_score": badBoxBigScore, "bad_box_score": badBoxScore, "bad_box_small_score": badBoxSmallScore, "bad_label_score": badLabelScore, "bad_timing_score": badTimingScore, "bad_video_score": badVideoScore, "bad_viewpoint_score": badViewpointScore, "collector_id": collectorId, "collection_id": collectionId, "end_frame": endFrame, "program_id": programId, "project_id": projectId, "rating_score": ratingScore, "review_reason": reviewReason, "s3_path": s3Path, "start_frame": startFrame, "subject_id": subjectId, "created_date": createdDate, "updated_date": updatedDate, "uploaded_date": uploadedDate, "verified": verified, "video_id": videoId, "week": week, "need_review_score": needReviewScore])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var instanceId: String {
        get {
          return snapshot["instance_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_id")
        }
      }

      public var activityName: String {
        get {
          return snapshot["activity_name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "activity_name")
        }
      }

      public var avgBboxHeight: String? {
        get {
          return snapshot["avg_bbox_height"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_height")
        }
      }

      public var avgBboxSize: String? {
        get {
          return snapshot["avg_bbox_size"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_size")
        }
      }

      public var avgBboxWidth: String? {
        get {
          return snapshot["avg_bbox_width"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "avg_bbox_width")
        }
      }

      public var badAlignamentScore: String? {
        get {
          return snapshot["bad_alignament_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignament_score")
        }
      }

      public var badBoxBigScore: String? {
        get {
          return snapshot["bad_box_big_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big_score")
        }
      }

      public var badBoxScore: String? {
        get {
          return snapshot["bad_box_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_score")
        }
      }

      public var badBoxSmallScore: String? {
        get {
          return snapshot["bad_box_small_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small_score")
        }
      }

      public var badLabelScore: String? {
        get {
          return snapshot["bad_label_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label_score")
        }
      }

      public var badTimingScore: String? {
        get {
          return snapshot["bad_timing_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing_score")
        }
      }

      public var badVideoScore: String? {
        get {
          return snapshot["bad_video_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video_score")
        }
      }

      public var badViewpointScore: String? {
        get {
          return snapshot["bad_viewpoint_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint_score")
        }
      }

      public var collectorId: String? {
        get {
          return snapshot["collector_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var endFrame: String? {
        get {
          return snapshot["end_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "end_frame")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var reviewReason: String? {
        get {
          return snapshot["review_reason"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_reason")
        }
      }

      public var s3Path: String? {
        get {
          return snapshot["s3_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3_path")
        }
      }

      public var startFrame: String? {
        get {
          return snapshot["start_frame"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "start_frame")
        }
      }

      public var subjectId: String? {
        get {
          return snapshot["subject_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_id")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var verified: Bool? {
        get {
          return snapshot["verified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var needReviewScore: String? {
        get {
          return snapshot["need_review_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "need_review_score")
        }
      }
    }
  }
}

public final class OnCreateStrSubjectSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrSubject {\n  onCreateStrSubject {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrSubject", type: .object(OnCreateStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrSubject: OnCreateStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrSubject": onCreateStrSubject.flatMap { $0.snapshot }])
    }

    public var onCreateStrSubject: OnCreateStrSubject? {
      get {
        return (snapshot["onCreateStrSubject"] as? Snapshot).flatMap { OnCreateStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrSubject")
      }
    }

    public struct OnCreateStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class OnUpdateStrSubjectSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrSubject {\n  onUpdateStrSubject {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrSubject", type: .object(OnUpdateStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrSubject: OnUpdateStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrSubject": onUpdateStrSubject.flatMap { $0.snapshot }])
    }

    public var onUpdateStrSubject: OnUpdateStrSubject? {
      get {
        return (snapshot["onUpdateStrSubject"] as? Snapshot).flatMap { OnUpdateStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrSubject")
      }
    }

    public struct OnUpdateStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class OnDeleteStrSubjectSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrSubject {\n  onDeleteStrSubject {\n    __typename\n    collector_id\n    uuid\n    subject_email\n    collector_email\n    last_activity_date\n    consent_response\n    consent_video_id\n    beard\n    ethnicity\n    eye_glasses\n    first_name\n    last_name\n    gender\n    hair_color\n    hair_length\n    uploaded_count\n    verified_count\n    created_date\n    updated_date\n    status\n    count\n    program_id\n    program_name\n    project_id\n    project_name\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrSubject", type: .object(OnDeleteStrSubject.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrSubject: OnDeleteStrSubject? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrSubject": onDeleteStrSubject.flatMap { $0.snapshot }])
    }

    public var onDeleteStrSubject: OnDeleteStrSubject? {
      get {
        return (snapshot["onDeleteStrSubject"] as? Snapshot).flatMap { OnDeleteStrSubject(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrSubject")
      }
    }

    public struct OnDeleteStrSubject: GraphQLSelectionSet {
      public static let possibleTypes = ["strSubject"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("uuid", type: .scalar(String.self)),
        GraphQLField("subject_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_email", type: .nonNull(.scalar(String.self))),
        GraphQLField("last_activity_date", type: .scalar(String.self)),
        GraphQLField("consent_response", type: .scalar(String.self)),
        GraphQLField("consent_video_id", type: .scalar(String.self)),
        GraphQLField("beard", type: .scalar(String.self)),
        GraphQLField("ethnicity", type: .scalar(String.self)),
        GraphQLField("eye_glasses", type: .scalar(String.self)),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(String.self)),
        GraphQLField("hair_color", type: .scalar(String.self)),
        GraphQLField("hair_length", type: .scalar(String.self)),
        GraphQLField("uploaded_count", type: .scalar(String.self)),
        GraphQLField("verified_count", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, uuid: String? = nil, subjectEmail: String, collectorEmail: String, lastActivityDate: String? = nil, consentResponse: String? = nil, consentVideoId: String? = nil, beard: String? = nil, ethnicity: String? = nil, eyeGlasses: String? = nil, firstName: String? = nil, lastName: String? = nil, gender: String? = nil, hairColor: String? = nil, hairLength: String? = nil, uploadedCount: String? = nil, verifiedCount: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, status: String, count: String? = nil, programId: String? = nil, programName: String? = nil, projectId: String? = nil, projectName: String? = nil) {
        self.init(snapshot: ["__typename": "strSubject", "collector_id": collectorId, "uuid": uuid, "subject_email": subjectEmail, "collector_email": collectorEmail, "last_activity_date": lastActivityDate, "consent_response": consentResponse, "consent_video_id": consentVideoId, "beard": beard, "ethnicity": ethnicity, "eye_glasses": eyeGlasses, "first_name": firstName, "last_name": lastName, "gender": gender, "hair_color": hairColor, "hair_length": hairLength, "uploaded_count": uploadedCount, "verified_count": verifiedCount, "created_date": createdDate, "updated_date": updatedDate, "status": status, "count": count, "program_id": programId, "program_name": programName, "project_id": projectId, "project_name": projectName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var uuid: String? {
        get {
          return snapshot["uuid"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uuid")
        }
      }

      public var subjectEmail: String {
        get {
          return snapshot["subject_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "subject_email")
        }
      }

      public var collectorEmail: String {
        get {
          return snapshot["collector_email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_email")
        }
      }

      public var lastActivityDate: String? {
        get {
          return snapshot["last_activity_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_activity_date")
        }
      }

      public var consentResponse: String? {
        get {
          return snapshot["consent_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_response")
        }
      }

      public var consentVideoId: String? {
        get {
          return snapshot["consent_video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_video_id")
        }
      }

      public var beard: String? {
        get {
          return snapshot["beard"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "beard")
        }
      }

      public var ethnicity: String? {
        get {
          return snapshot["ethnicity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ethnicity")
        }
      }

      public var eyeGlasses: String? {
        get {
          return snapshot["eye_glasses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "eye_glasses")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["first_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["last_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "last_name")
        }
      }

      public var gender: String? {
        get {
          return snapshot["gender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var hairColor: String? {
        get {
          return snapshot["hair_color"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_color")
        }
      }

      public var hairLength: String? {
        get {
          return snapshot["hair_length"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hair_length")
        }
      }

      public var uploadedCount: String? {
        get {
          return snapshot["uploaded_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_count")
        }
      }

      public var verifiedCount: String? {
        get {
          return snapshot["verified_count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "verified_count")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var status: String {
        get {
          return snapshot["status"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var count: String? {
        get {
          return snapshot["count"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "count")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }
    }
  }
}

public final class OnCreateStrRatingSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrRating {\n  onCreateStrRating {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrRating", type: .object(OnCreateStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrRating: OnCreateStrRating? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrRating": onCreateStrRating.flatMap { $0.snapshot }])
    }

    public var onCreateStrRating: OnCreateStrRating? {
      get {
        return (snapshot["onCreateStrRating"] as? Snapshot).flatMap { OnCreateStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrRating")
      }
    }

    public struct OnCreateStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class OnUpdateStrRatingSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrRating {\n  onUpdateStrRating {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrRating", type: .object(OnUpdateStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrRating: OnUpdateStrRating? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrRating": onUpdateStrRating.flatMap { $0.snapshot }])
    }

    public var onUpdateStrRating: OnUpdateStrRating? {
      get {
        return (snapshot["onUpdateStrRating"] as? Snapshot).flatMap { OnUpdateStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrRating")
      }
    }

    public struct OnUpdateStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class OnDeleteStrRatingSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrRating {\n  onDeleteStrRating {\n    __typename\n    id\n    reviewer_id\n    up\n    video_id\n    week\n    bad_alignment\n    bad_box_big\n    bad_box_small\n    bad_label\n    bad_timing\n    bad_video\n    bad_viewpoint\n    awkward_scene\n    bad_visibility\n    project_id\n    program_id\n    project_name\n    program_name\n    collection_name\n    collection_id\n    rating_responses\n    bad_diversity\n    submitted_time\n    video_uploaded_date\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrRating", type: .object(OnDeleteStrRating.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrRating: OnDeleteStrRating? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrRating": onDeleteStrRating.flatMap { $0.snapshot }])
    }

    public var onDeleteStrRating: OnDeleteStrRating? {
      get {
        return (snapshot["onDeleteStrRating"] as? Snapshot).flatMap { OnDeleteStrRating(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrRating")
      }
    }

    public struct OnDeleteStrRating: GraphQLSelectionSet {
      public static let possibleTypes = ["strRating"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(String.self))),
        GraphQLField("reviewer_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("up", type: .scalar(Int.self)),
        GraphQLField("video_id", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("bad_alignment", type: .scalar(String.self)),
        GraphQLField("bad_box_big", type: .scalar(String.self)),
        GraphQLField("bad_box_small", type: .scalar(String.self)),
        GraphQLField("bad_label", type: .scalar(String.self)),
        GraphQLField("bad_timing", type: .scalar(String.self)),
        GraphQLField("bad_video", type: .scalar(String.self)),
        GraphQLField("bad_viewpoint", type: .scalar(String.self)),
        GraphQLField("awkward_scene", type: .scalar(String.self)),
        GraphQLField("bad_visibility", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("rating_responses", type: .scalar(String.self)),
        GraphQLField("bad_diversity", type: .scalar(String.self)),
        GraphQLField("submitted_time", type: .scalar(String.self)),
        GraphQLField("video_uploaded_date", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: String, reviewerId: String, up: Int? = nil, videoId: String? = nil, week: String? = nil, badAlignment: String? = nil, badBoxBig: String? = nil, badBoxSmall: String? = nil, badLabel: String? = nil, badTiming: String? = nil, badVideo: String? = nil, badViewpoint: String? = nil, awkwardScene: String? = nil, badVisibility: String? = nil, projectId: String? = nil, programId: String? = nil, projectName: String? = nil, programName: String? = nil, collectionName: String? = nil, collectionId: String? = nil, ratingResponses: String? = nil, badDiversity: String? = nil, submittedTime: String? = nil, videoUploadedDate: String? = nil) {
        self.init(snapshot: ["__typename": "strRating", "id": id, "reviewer_id": reviewerId, "up": up, "video_id": videoId, "week": week, "bad_alignment": badAlignment, "bad_box_big": badBoxBig, "bad_box_small": badBoxSmall, "bad_label": badLabel, "bad_timing": badTiming, "bad_video": badVideo, "bad_viewpoint": badViewpoint, "awkward_scene": awkwardScene, "bad_visibility": badVisibility, "project_id": projectId, "program_id": programId, "project_name": projectName, "program_name": programName, "collection_name": collectionName, "collection_id": collectionId, "rating_responses": ratingResponses, "bad_diversity": badDiversity, "submitted_time": submittedTime, "video_uploaded_date": videoUploadedDate])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return snapshot["id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reviewerId: String {
        get {
          return snapshot["reviewer_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "reviewer_id")
        }
      }

      public var up: Int? {
        get {
          return snapshot["up"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "up")
        }
      }

      public var videoId: String? {
        get {
          return snapshot["video_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var badAlignment: String? {
        get {
          return snapshot["bad_alignment"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_alignment")
        }
      }

      public var badBoxBig: String? {
        get {
          return snapshot["bad_box_big"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_big")
        }
      }

      public var badBoxSmall: String? {
        get {
          return snapshot["bad_box_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_box_small")
        }
      }

      public var badLabel: String? {
        get {
          return snapshot["bad_label"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_label")
        }
      }

      public var badTiming: String? {
        get {
          return snapshot["bad_timing"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_timing")
        }
      }

      public var badVideo: String? {
        get {
          return snapshot["bad_video"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_video")
        }
      }

      public var badViewpoint: String? {
        get {
          return snapshot["bad_viewpoint"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_viewpoint")
        }
      }

      public var awkwardScene: String? {
        get {
          return snapshot["awkward_scene"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "awkward_scene")
        }
      }

      public var badVisibility: String? {
        get {
          return snapshot["bad_visibility"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_visibility")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var ratingResponses: String? {
        get {
          return snapshot["rating_responses"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_responses")
        }
      }

      public var badDiversity: String? {
        get {
          return snapshot["bad_diversity"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bad_diversity")
        }
      }

      public var submittedTime: String? {
        get {
          return snapshot["submitted_time"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "submitted_time")
        }
      }

      public var videoUploadedDate: String? {
        get {
          return snapshot["video_uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_uploaded_date")
        }
      }
    }
  }
}

public final class OnCreateStrConsentQuestionnaireSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrConsentQuestionnaire {\n  onCreateStrConsentQuestionnaire {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrConsentQuestionnaire", type: .object(OnCreateStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrConsentQuestionnaire: OnCreateStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrConsentQuestionnaire": onCreateStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var onCreateStrConsentQuestionnaire: OnCreateStrConsentQuestionnaire? {
      get {
        return (snapshot["onCreateStrConsentQuestionnaire"] as? Snapshot).flatMap { OnCreateStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrConsentQuestionnaire")
      }
    }

    public struct OnCreateStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class OnUpdateStrConsentQuestionnaireSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrConsentQuestionnaire {\n  onUpdateStrConsentQuestionnaire {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrConsentQuestionnaire", type: .object(OnUpdateStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrConsentQuestionnaire: OnUpdateStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrConsentQuestionnaire": onUpdateStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var onUpdateStrConsentQuestionnaire: OnUpdateStrConsentQuestionnaire? {
      get {
        return (snapshot["onUpdateStrConsentQuestionnaire"] as? Snapshot).flatMap { OnUpdateStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrConsentQuestionnaire")
      }
    }

    public struct OnUpdateStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class OnDeleteStrConsentQuestionnaireSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrConsentQuestionnaire {\n  onDeleteStrConsentQuestionnaire {\n    __typename\n    id\n    consent_id\n    short_description\n    long_description\n    agree_question_id\n    disagree_question_id\n    category\n    category_response\n    created_date\n    updated_date\n    program_id\n    project_id\n    collection_id\n    collection_name\n    more_info\n    consent_question_type\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrConsentQuestionnaire", type: .object(OnDeleteStrConsentQuestionnaire.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrConsentQuestionnaire: OnDeleteStrConsentQuestionnaire? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrConsentQuestionnaire": onDeleteStrConsentQuestionnaire.flatMap { $0.snapshot }])
    }

    public var onDeleteStrConsentQuestionnaire: OnDeleteStrConsentQuestionnaire? {
      get {
        return (snapshot["onDeleteStrConsentQuestionnaire"] as? Snapshot).flatMap { OnDeleteStrConsentQuestionnaire(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrConsentQuestionnaire")
      }
    }

    public struct OnDeleteStrConsentQuestionnaire: GraphQLSelectionSet {
      public static let possibleTypes = ["strConsentQuestionnaire"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("consent_id", type: .scalar(String.self)),
        GraphQLField("short_description", type: .scalar(String.self)),
        GraphQLField("long_description", type: .scalar(String.self)),
        GraphQLField("agree_question_id", type: .scalar(String.self)),
        GraphQLField("disagree_question_id", type: .scalar(String.self)),
        GraphQLField("category", type: .scalar(String.self)),
        GraphQLField("category_response", type: .scalar(String.self)),
        GraphQLField("created_date", type: .scalar(String.self)),
        GraphQLField("updated_date", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("more_info", type: .scalar(String.self)),
        GraphQLField("consent_question_type", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, consentId: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, agreeQuestionId: String? = nil, disagreeQuestionId: String? = nil, category: String? = nil, categoryResponse: String? = nil, createdDate: String? = nil, updatedDate: String? = nil, programId: String? = nil, projectId: String, collectionId: String? = nil, collectionName: String? = nil, moreInfo: String? = nil, consentQuestionType: String? = nil) {
        self.init(snapshot: ["__typename": "strConsentQuestionnaire", "id": id, "consent_id": consentId, "short_description": shortDescription, "long_description": longDescription, "agree_question_id": agreeQuestionId, "disagree_question_id": disagreeQuestionId, "category": category, "category_response": categoryResponse, "created_date": createdDate, "updated_date": updatedDate, "program_id": programId, "project_id": projectId, "collection_id": collectionId, "collection_name": collectionName, "more_info": moreInfo, "consent_question_type": consentQuestionType])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var consentId: String? {
        get {
          return snapshot["consent_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_id")
        }
      }

      public var shortDescription: String? {
        get {
          return snapshot["short_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "short_description")
        }
      }

      public var longDescription: String? {
        get {
          return snapshot["long_description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "long_description")
        }
      }

      public var agreeQuestionId: String? {
        get {
          return snapshot["agree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "agree_question_id")
        }
      }

      public var disagreeQuestionId: String? {
        get {
          return snapshot["disagree_question_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "disagree_question_id")
        }
      }

      public var category: String? {
        get {
          return snapshot["category"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category")
        }
      }

      public var categoryResponse: String? {
        get {
          return snapshot["category_response"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "category_response")
        }
      }

      public var createdDate: String? {
        get {
          return snapshot["created_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "created_date")
        }
      }

      public var updatedDate: String? {
        get {
          return snapshot["updated_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updated_date")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String {
        get {
          return snapshot["project_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var moreInfo: String? {
        get {
          return snapshot["more_info"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "more_info")
        }
      }

      public var consentQuestionType: String? {
        get {
          return snapshot["consent_question_type"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "consent_question_type")
        }
      }
    }
  }
}

public final class OnCreateStrReviewAssignmentSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateStrReviewAssignment {\n  onCreateStrReviewAssignment {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateStrReviewAssignment", type: .object(OnCreateStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateStrReviewAssignment: OnCreateStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateStrReviewAssignment": onCreateStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var onCreateStrReviewAssignment: OnCreateStrReviewAssignment? {
      get {
        return (snapshot["onCreateStrReviewAssignment"] as? Snapshot).flatMap { OnCreateStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateStrReviewAssignment")
      }
    }

    public struct OnCreateStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}

public final class OnUpdateStrReviewAssignmentSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateStrReviewAssignment {\n  onUpdateStrReviewAssignment {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateStrReviewAssignment", type: .object(OnUpdateStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateStrReviewAssignment: OnUpdateStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateStrReviewAssignment": onUpdateStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var onUpdateStrReviewAssignment: OnUpdateStrReviewAssignment? {
      get {
        return (snapshot["onUpdateStrReviewAssignment"] as? Snapshot).flatMap { OnUpdateStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateStrReviewAssignment")
      }
    }

    public struct OnUpdateStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}

public final class OnDeleteStrReviewAssignmentSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteStrReviewAssignment {\n  onDeleteStrReviewAssignment {\n    __typename\n    collector_id\n    video_id\n    collection_id\n    collection_name\n    program_name\n    program_id\n    project_id\n    project_name\n    duration\n    review_status\n    uploaded_date\n    week\n    instance_ids\n    video_file_path\n    annotation_file_path\n    rating_score\n    thumbnail\n    thumbnail_small\n    assigned_date\n    orientation\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteStrReviewAssignment", type: .object(OnDeleteStrReviewAssignment.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteStrReviewAssignment: OnDeleteStrReviewAssignment? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteStrReviewAssignment": onDeleteStrReviewAssignment.flatMap { $0.snapshot }])
    }

    public var onDeleteStrReviewAssignment: OnDeleteStrReviewAssignment? {
      get {
        return (snapshot["onDeleteStrReviewAssignment"] as? Snapshot).flatMap { OnDeleteStrReviewAssignment(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteStrReviewAssignment")
      }
    }

    public struct OnDeleteStrReviewAssignment: GraphQLSelectionSet {
      public static let possibleTypes = ["strReviewAssignment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collector_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("video_id", type: .nonNull(.scalar(String.self))),
        GraphQLField("collection_id", type: .scalar(String.self)),
        GraphQLField("collection_name", type: .scalar(String.self)),
        GraphQLField("program_name", type: .scalar(String.self)),
        GraphQLField("program_id", type: .scalar(String.self)),
        GraphQLField("project_id", type: .scalar(String.self)),
        GraphQLField("project_name", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(String.self)),
        GraphQLField("review_status", type: .scalar(String.self)),
        GraphQLField("uploaded_date", type: .scalar(String.self)),
        GraphQLField("week", type: .scalar(String.self)),
        GraphQLField("instance_ids", type: .scalar(String.self)),
        GraphQLField("video_file_path", type: .scalar(String.self)),
        GraphQLField("annotation_file_path", type: .scalar(String.self)),
        GraphQLField("rating_score", type: .scalar(String.self)),
        GraphQLField("thumbnail", type: .scalar(String.self)),
        GraphQLField("thumbnail_small", type: .scalar(String.self)),
        GraphQLField("assigned_date", type: .nonNull(.scalar(String.self))),
        GraphQLField("orientation", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(collectorId: GraphQLID, videoId: String, collectionId: String? = nil, collectionName: String? = nil, programName: String? = nil, programId: String? = nil, projectId: String? = nil, projectName: String? = nil, duration: String? = nil, reviewStatus: String? = nil, uploadedDate: String? = nil, week: String? = nil, instanceIds: String? = nil, videoFilePath: String? = nil, annotationFilePath: String? = nil, ratingScore: String? = nil, thumbnail: String? = nil, thumbnailSmall: String? = nil, assignedDate: String, orientation: String? = nil) {
        self.init(snapshot: ["__typename": "strReviewAssignment", "collector_id": collectorId, "video_id": videoId, "collection_id": collectionId, "collection_name": collectionName, "program_name": programName, "program_id": programId, "project_id": projectId, "project_name": projectName, "duration": duration, "review_status": reviewStatus, "uploaded_date": uploadedDate, "week": week, "instance_ids": instanceIds, "video_file_path": videoFilePath, "annotation_file_path": annotationFilePath, "rating_score": ratingScore, "thumbnail": thumbnail, "thumbnail_small": thumbnailSmall, "assigned_date": assignedDate, "orientation": orientation])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var collectorId: GraphQLID {
        get {
          return snapshot["collector_id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collector_id")
        }
      }

      public var videoId: String {
        get {
          return snapshot["video_id"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_id")
        }
      }

      public var collectionId: String? {
        get {
          return snapshot["collection_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_id")
        }
      }

      public var collectionName: String? {
        get {
          return snapshot["collection_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "collection_name")
        }
      }

      public var programName: String? {
        get {
          return snapshot["program_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_name")
        }
      }

      public var programId: String? {
        get {
          return snapshot["program_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "program_id")
        }
      }

      public var projectId: String? {
        get {
          return snapshot["project_id"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_id")
        }
      }

      public var projectName: String? {
        get {
          return snapshot["project_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "project_name")
        }
      }

      public var duration: String? {
        get {
          return snapshot["duration"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "duration")
        }
      }

      public var reviewStatus: String? {
        get {
          return snapshot["review_status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "review_status")
        }
      }

      public var uploadedDate: String? {
        get {
          return snapshot["uploaded_date"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploaded_date")
        }
      }

      public var week: String? {
        get {
          return snapshot["week"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "week")
        }
      }

      public var instanceIds: String? {
        get {
          return snapshot["instance_ids"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "instance_ids")
        }
      }

      public var videoFilePath: String? {
        get {
          return snapshot["video_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "video_file_path")
        }
      }

      public var annotationFilePath: String? {
        get {
          return snapshot["annotation_file_path"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "annotation_file_path")
        }
      }

      public var ratingScore: String? {
        get {
          return snapshot["rating_score"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating_score")
        }
      }

      public var thumbnail: String? {
        get {
          return snapshot["thumbnail"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail")
        }
      }

      public var thumbnailSmall: String? {
        get {
          return snapshot["thumbnail_small"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "thumbnail_small")
        }
      }

      public var assignedDate: String {
        get {
          return snapshot["assigned_date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "assigned_date")
        }
      }

      public var orientation: String? {
        get {
          return snapshot["orientation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "orientation")
        }
      }
    }
  }
}